#pragma once

#include <cstdint>
#include <cstdio>

namespace __Adamant
{
	namespace Runtime
	{
		class string
		{
			public:
				uint8_t const * const Bytes; // unsafe arrays are just blocks of memory from new[]
				size_t const * const ByteLength;

				string(size_t const * const byteLength, uint8_t const * const bytes)
					: ByteLength(byteLength), Bytes(bytes)
				{
				}

				~string()
				{
					delete ByteLength;
					delete[] Bytes;
				}

				/*char const * ToCString() const
				{
					char* cString = new char[*ByteLength+1];
					std::strncpy(cString, (char const *)bytes, *ByteLength);
					cString[*ByteLength]=0;
					return cString;
				}*/
		};

		class NativeMethods
		{
			public:
				static void ConsoleWriteLine(string const * const line)
				{
					// stdout is some weird macro/constant and can't be used with std:: in front of it
					std::fwrite(line->Bytes, 1, *line->ByteLength, stdout);
					std::fputc('\n', stdout);
				}
		};
	}
}