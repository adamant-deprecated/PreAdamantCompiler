@parser PreAdamantParser;
@namespace PreAdamant.Compiler.Syntax;

compilationUnit
	= usingDirective*
	  // globalAttribute*
	  declaration*
	  EOF
	;

usingDirective = "using" namespaceName ";"; // TODO using names are allowed to be more complicated than this

identifier = Identifier | EscapedIdentifier;

namespaceName = identifier{"." 1,};

// declaration
namespaceDeclaration: declaration = "namespace" namespaceName "{" usingDirective* declaration* "}";
classDeclaration: declaration = attribute* accessModifier safetyModifier? classInheritanceModifier? "mut"? "class" className:identifier typeParameters? baseTypes?
		typeParameterConstraintClause*
		"{" member* "}";
structDeclaration: declaration = attribute* accessModifier safetyModifier? "mut"? "struct" structName:identifier typeParameters? baseTypes?
		typeParameterConstraintClause*
		"{" member* "}";
variableDeclaration: declaration = attribute* accessModifier kind:("var"|"let") identifier (":" valueType)? ("=" expression)? ";";
functionDeclaration: declaration = attribute* accessModifier safetyModifier? asyncModifier? identifier typeArguments? parameterList "->" returnType typeParameterConstraintClause* contract* methodBody;
externalBlockDeclaration: declaration = "external" "{" declaration* "}";

// contract
precondition: contract = "requires" expression;
postcondition: contract = "ensures" expression;

attribute = "@" identifier ("(" argumentList ")")?;

baseTypes = ":" baseType:name? (":" interfaces:name{"," 1,})?;

accessModifier = "public" | "private" | "protected" | "internal";

safetyModifier = "safe" | "unsafe";

classInheritanceModifier = "abstract"| "sealed";

methodInheritanceModifier = "abstract" | "override" | "sealed" | "sealed" "override";

explicitModifier = "implicit" | "explicit";

asyncModifier = "async";

typeParameters = "<" typeParameter{"," 1,} ">";

typeParameter = identifier isList:"..."? (":" baseType:typeName)? | lifetime;

typeArguments = "<" type{"," 1,} ">";

identifierOrPredefinedType = identifier | "string" | "byte" | IntType | UIntType | FloatType | SizeType | OffsetType | UnsafeArrayType;

// simpleName
identifierName: simpleName = identifierOrPredefinedType;
genericName: simpleName	= identifierOrPredefinedType typeArguments;

// name
unqualifiedName: name = simpleName;
qualifiedName: name = leftName:name "." rightName:simpleName;

// typeName
namedType: typeName = name;
maybeType: typeName = typeName "?";
pointerType: typeName = "*" isMutable:"mut"? typeName;
tupleType: typeName = ("[" types:typeName{"," 1,} "]" | "[" "]");
functionType: typeName = funcTypeParameterList "->" returnType;

// valueType - these are types for which there are actual values of that type
lifetimeType: valueType = lifetime? isMutable:"mut"? typeName;
refType: valueType = "ref" "var"? isMutable:"mut"? typeName;

type = valueType | isVoid:"void";

returnType =  type | diverges:"!";

lifetime = "~" identifier | "~" "self" | "~" "own";

funcTypeParameterList = "(" funcTypeParameter{","} ")";

funcTypeParameter = parameterModifier* valueType;

constExpression = IntLiteral | StringLiteral | identifier;

typeParameterBoundConstraintClause: typeParameterConstraintClause = "where" typeParameter ":" typeParameterConstraint{"," 1,};
typeParameterRangeConstraintClause: typeParameterConstraintClause = "where" typeParameter (">="|"<="|"<"|">") IntLiteral;

// typeParameterConstraint
constructorConstraint: typeParameterConstraint = "new" "(" ")";
typeConstraint: typeParameterConstraint = typeName;
typeListParameterConstraint: typeParameterConstraint = typeParameter; // will only be hit for type lists (i.e. "foo...")

// member
constructor: member = attribute* accessModifier safetyModifier? "new" identifier? parameterList ("->" returnType)? whereClause* constructorInitializer? contract* methodBody;
copyConstructor: member = attribute* accessModifier safetyModifier? explicitModifier "new" "copy" parameterList ("->" returnType)? whereClause* constructorInitializer? contract* methodBody;
destructor: member = attribute* accessModifier safetyModifier? "delete" parameterList methodBody;
conversionMethod: member = attribute* accessModifier safetyModifier? explicitModifier "conversion" typeArguments? parameterList "->" returnType typeParameterConstraintClause* contract* methodBody;
field: member = attribute* accessModifier kind:("var"|"let") "unsafe"? identifier (":" valueType)? ("=" expression)? ";";
accessor: member = attribute* accessModifier methodInheritanceModifier? safetyModifier? asyncModifier? kind:("get"|"set") identifier typeArguments? parameterList "->" returnType typeParameterConstraintClause* contract* methodBody;
indexer: member = attribute* accessModifier methodInheritanceModifier? safetyModifier? asyncModifier? kind:("get"|"set") "[" "]" typeArguments? parameterList "->" returnType typeParameterConstraintClause* contract* methodBody;
method: member = attribute* accessModifier methodInheritanceModifier? safetyModifier? asyncModifier? identifier typeArguments? parameterList "->" returnType typeParameterConstraintClause* contract* methodBody;
operatorOverload: member = attribute* accessModifier methodInheritanceModifier? safetyModifier? asyncModifier? "operator" overloadableOperator parameterList "->" returnType typeParameterConstraintClause* contract* methodBody;
nestedClassDeclaration: member = attribute* accessModifier safetyModifier? classInheritanceModifier? "class" identifier typeParameters? baseTypes?
		typeParameterConstraintClause*
		"{" member* "}";


parameterList = "(" parameter{","} ")";

// parameter
namedParameter: parameter = isVar:"var"? modifiers:parameterModifier* identifier? ":" valueType;
selfParameter: parameter = isRef:"ref"? isMutable:"mut"? "self";

parameterModifier = "params";

whereClause = "where" typeName ":" constraints:genericConstraint{"," 1,};

genericConstraint = typeName | "class" | "struct" | "copy" "(" ")";

constructorInitializer = ":" ("base"|"self") "(" argumentList ")";

argumentList =  expressions:expression{","};

// methodBody
blockMethodBody: methodBody = "{" statement* "}";
noMethodBody: methodBody = ";";

overloadableOperator = "*" | "&" | "or" | "and" | "xor" | "?" | "??" | "." | "[" "]" | "|" "|";

// statement
block = "{" statement* "}";

variableDeclarationStatement: statement = localVariableDeclaration ";";
unsafeBlockStatement: statement = "unsafe" "{" statement* "}";
blockStatement: statement = block;
emptyStatement: statement = ";";
expressionStatement: statement = expression ";";
returnStatement: statement = "return" expression? ";";
throwStatement: statement = "throw" expression ";";
ifStatement: statement = "if" condition:expression then:block ("else" else:block)?;
letIfStatement: statement = "if" localVariableDeclaration then:block ("else" else:block)?;
forStatement: statement = "for" (localVariableDeclaration|"_") "in" expression block;
whileStatement: statement = "while" expression block;
deleteStatement: statement = "delete" expression ";";
continueStatement: statement = "continue" ";";

simpleLocalVariableDeclaration: localVariableDeclaration = kind:("var"|"let") identifier ("?")? ":" valueType ("=" expression)?; // no type inference in pre-adamant so types are required
destructureLocalVariableDeclaration: localVariableDeclaration = kind:("var"|"let") "[" identifier{"," 1,} "]" ":" valueType ("=" expression)?; // destructure tuple types

// expression
parenthesizedExpression: expression = "(" expression ")";
magnitudeExpression: expression = "|" expression "|";
memberExpression: expression = expression "." identifier;
placementDeleteExpression: expression = expression "." "delete";
dotDotExpression: expression = lhs:expression ".." rhs:expression;
toExpression: expression = from:expression "to" to:expression;
callExpression: expression = expression "(" argumentList ")";
arrayAccessExpression: expression = expression "[" argumentList "]";
awaitExpression: expression = "await" expression;
nullCheckExpression: expression = expression "?";
unaryExpression: expression = op:("+"|"-"|"not"|"&"|"*") expression;
multiplicativeExpression: expression = lhs:expression op:("*"|"/") rhs:expression;
additiveExpression: expression = lhs:expression op:("+"|"-") rhs:expression;
comparativeExpression: expression = lhs:expression op:("<"|"<="|">"|">=") rhs:expression;
equalityExpression: expression = lhs:expression op:("=="|"<>") rhs:expression;
andExpression: expression = lhs:expression "and" rhs:expression;
xorExpression: expression = lhs:expression "xor" rhs:expression;
orExpression: expression = lhs:expression "or" rhs:expression;
coalesceExpression: expression = lhs:expression "??" rhs:expression;
inExpression: expression = lhs:expression "in" rhs:expression;
// Since new Class.Constructor() is indistiguishable from new Namespace.Class() we can"t parse for named constructor calls here
newExpression: expression = "new" ("(" placementArguments:argumentList ")"	)? (name|"copy") "(" constructorArguments:argumentList ")";
newMemoryExpression: expression = "new" typeArguments? "(" argumentList ")";
newObjectExpression: expression = "new" baseTypes? "(" argumentList ")" "{" member* "}";
deleteMemoryExpression: expression = "delete" "(" argumentList ")";
castExpression: expression = expression kind:("as"|"as!"|"as?") typeName;
tryExpression: expression = kind:("try"|"try!"|"try?") expression;
ifExpression: expression = condition:expression "?" then:expression ":" else:expression {right};
assignmentExpression: expression = lvalue:expression op:("="|"*="|"/="|"+="|"-="|"and="|"xor="|"or=") rvalue:expression {right};
lambdaExpression: expression = (identifier|parameterList) "->" (expression|"{" statement* "}");
nameExpression: expression = simpleName;
nullLiteralExpression: expression = "null";
selfExpression: expression = "self";
booleanLiteralExpression: expression = BooleanLiteral;
intLiteralExpression: expression = IntLiteral;
uninitializedExpression: expression = "uninitialized";
stringLiteralExpression: expression = StringLiteral;
charLiteralExpression: expression = CharLiteral;
unsafeExpression: expression =  "unsafe" "(" expression ")";