//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser_Antlr.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Syntax.Antlr {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser_Antlr : Parser {
	public const int
		Whitespace=1, Newline=2, PreprocessorLine=3, DocComment=4, LineComment=5, 
		BlockComment=6, Using=7, Namespace=8, Class=9, Struct=10, Enum=11, New=12, 
		NewPanic=13, NewResult=14, NewPointer=15, NewPointerPanic=16, NewNullablePointer=17, 
		Delete=18, Self=19, Uninitialized=20, Where=21, Base=22, Operator=23, 
		External=24, Var=25, Let=26, Get=27, Set=28, Sealed=29, Override=30, Abstract=31, 
		Params=32, Loop=33, While=34, If=35, Else=36, For=37, In=38, Switch=39, 
		Break=40, Continue=41, Return=42, Try=43, TryPanic=44, TryResult=45, Catch=46, 
		Finally=47, Throw=48, Implicit=49, Explicit=50, Conversion=51, As=52, 
		AsPanic=53, AsResult=54, Public=55, Private=56, Protected=57, Internal=58, 
		Safe=59, Unsafe=60, Own=61, Mutable=62, Immutable=63, Copy=64, Move=65, 
		Ref=66, Async=67, Await=68, Requires=69, Ensures=70, Void=71, String=72, 
		ByteType=73, IntType=74, UIntType=75, FloatType=76, SizeType=77, OffsetType=78, 
		UnsafeArrayType=79, Panic=80, ReservedWord=81, BooleanLiteral=82, IntLiteral=83, 
		NullLiteral=84, StringLiteral=85, CharLiteral=86, Semicolon=87, Colon=88, 
		Dot=89, DotDot=90, To=91, ColonColon=92, Tilde=93, Comma=94, Lambda=95, 
		LeftBrace=96, RightBrace=97, LeftAngle=98, RightAngle=99, LeftBracket=100, 
		RightBracket=101, LeftParen=102, RightParen=103, Asterisk=104, AtSign=105, 
		AddressOf=106, Coalesce=107, IsNull=108, Equal=109, NotEqual=110, LessThanOrEqual=111, 
		GreaterThanOrEqual=112, TypeList=113, Plus=114, Minus=115, Divide=116, 
		Pipe=117, And=118, Xor=119, Or=120, Not=121, Assign=122, AddAssign=123, 
		SubtractAssign=124, MultiplyAssign=125, DivideAssign=126, AndAssign=127, 
		XorAssign=128, OrAssign=129, PlaceHolder=130, Identifier=131, EscapedIdentifier=132, 
		Unknown=133, PreprocessorSkippedSection=134, BadNotEqual=135;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_attribute = 4, RULE_baseTypes = 5, RULE_accessModifier = 6, 
		RULE_safetyModifier = 7, RULE_classInheritanceModifier = 8, RULE_methodInheritanceModifier = 9, 
		RULE_explicitModifier = 10, RULE_asyncModifier = 11, RULE_typeParameters = 12, 
		RULE_typeParameter = 13, RULE_typeArguments = 14, RULE_identifierOrPredefinedType = 15, 
		RULE_type = 16, RULE_returnType = 17, RULE_lifetime = 18, RULE_funcTypeParameterList = 19, 
		RULE_funcTypeParameter = 20, RULE_constExpression = 21, RULE_parameterList = 22, 
		RULE_parameterModifier = 23, RULE_whereClause = 24, RULE_genericConstraint = 25, 
		RULE_constructorInitializer = 26, RULE_argumentList = 27, RULE_overloadableOperator = 28, 
		RULE_block = 29, RULE_declaration = 30, RULE_contract = 31, RULE_simpleName = 32, 
		RULE_name = 33, RULE_typeName = 34, RULE_valueType = 35, RULE_typeParameterConstraintClause = 36, 
		RULE_typeParameterConstraint = 37, RULE_member = 38, RULE_parameter = 39, 
		RULE_methodBody = 40, RULE_statement = 41, RULE_localVariableDeclaration = 42, 
		RULE_expression = 43;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "attribute", 
		"baseTypes", "accessModifier", "safetyModifier", "classInheritanceModifier", 
		"methodInheritanceModifier", "explicitModifier", "asyncModifier", "typeParameters", 
		"typeParameter", "typeArguments", "identifierOrPredefinedType", "type", 
		"returnType", "lifetime", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "parameterList", "parameterModifier", "whereClause", 
		"genericConstraint", "constructorInitializer", "argumentList", "overloadableOperator", 
		"block", "declaration", "contract", "simpleName", "name", "typeName", 
		"valueType", "typeParameterConstraintClause", "typeParameterConstraint", 
		"member", "parameter", "methodBody", "statement", "localVariableDeclaration", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'using'", "'namespace'", "'class'", 
		"'struct'", "'enum'", "'new'", "'new!'", "'new?'", "'new*'", "'new*!'", 
		"'new*?'", "'delete'", "'self'", "'uninitialized'", "'where'", "'base'", 
		"'operator'", "'external'", "'var'", "'let'", "'get'", "'set'", "'sealed'", 
		"'override'", "'abstract'", "'params'", "'loop'", "'while'", "'if'", "'else'", 
		"'for'", "'in'", "'switch'", "'break'", "'continue'", "'return'", "'try'", 
		"'try!'", "'try?'", "'catch'", "'finally'", "'throw'", "'implicit'", "'explicit'", 
		"'conversion'", "'as'", "'as!'", "'as?'", "'public'", "'private'", "'protected'", 
		"'internal'", "'safe'", "'unsafe'", "'own'", "'mut'", "'immut'", "'copy'", 
		"'move'", "'ref'", "'async'", "'await'", "'requires'", "'ensures'", "'void'", 
		"'string'", "'byte'", null, null, null, "'size'", "'offset'", "'UnsafeArray'", 
		"'!'", null, null, null, "'null'", null, null, "';'", "':'", "'.'", "'..'", 
		"'to'", "'::'", "'~'", "','", "'->'", "'{'", "'}'", "'<'", "'>'", "'['", 
		"']'", "'('", "')'", "'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", 
		"'<='", "'>='", "'...'", "'+'", "'-'", "'/'", "'|'", "'and'", "'xor'", 
		"'or'", "'not'", "'='", "'+='", "'-='", "'*='", "'/='", "'and='", "'xor='", 
		"'or='", "'_'", null, null, null, null, "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "Newline", "PreprocessorLine", "DocComment", "LineComment", 
		"BlockComment", "Using", "Namespace", "Class", "Struct", "Enum", "New", 
		"NewPanic", "NewResult", "NewPointer", "NewPointerPanic", "NewNullablePointer", 
		"Delete", "Self", "Uninitialized", "Where", "Base", "Operator", "External", 
		"Var", "Let", "Get", "Set", "Sealed", "Override", "Abstract", "Params", 
		"Loop", "While", "If", "Else", "For", "In", "Switch", "Break", "Continue", 
		"Return", "Try", "TryPanic", "TryResult", "Catch", "Finally", "Throw", 
		"Implicit", "Explicit", "Conversion", "As", "AsPanic", "AsResult", "Public", 
		"Private", "Protected", "Internal", "Safe", "Unsafe", "Own", "Mutable", 
		"Immutable", "Copy", "Move", "Ref", "Async", "Await", "Requires", "Ensures", 
		"Void", "String", "ByteType", "IntType", "UIntType", "FloatType", "SizeType", 
		"OffsetType", "UnsafeArrayType", "Panic", "ReservedWord", "BooleanLiteral", 
		"IntLiteral", "NullLiteral", "StringLiteral", "CharLiteral", "Semicolon", 
		"Colon", "Dot", "DotDot", "To", "ColonColon", "Tilde", "Comma", "Lambda", 
		"LeftBrace", "RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "Pipe", "And", "Xor", "Or", "Not", 
		"Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", 
		"AndAssign", "XorAssign", "OrAssign", "PlaceHolder", "Identifier", "EscapedIdentifier", 
		"Unknown", "PreprocessorSkippedSection", "BadNotEqual"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser_Antlr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser_Antlr(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser_Antlr.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 88; usingDirective();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==AtSign) {
				{
				{
				State = 94; declaration();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			State = 100; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(Using);
			State = 103; namespaceName();
			State = 104; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser_Antlr.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser_Antlr.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.La(1);
			if ( !(_la==Identifier || _la==EscapedIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 108; identifier();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 109; Match(Dot);
				State = 110; identifier();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(AtSign);
			State = 117; identifier();
			{
			State = 122;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 118; Match(LeftParen);
				State = 119; argumentList();
				State = 120; Match(RightParen);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 10, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(Colon);
			{
			State = 126;
			_la = TokenStream.La(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (String - 72)) | (1L << (ByteType - 72)) | (1L << (IntType - 72)) | (1L << (UIntType - 72)) | (1L << (FloatType - 72)) | (1L << (SizeType - 72)) | (1L << (OffsetType - 72)) | (1L << (UnsafeArrayType - 72)) | (1L << (Identifier - 72)) | (1L << (EscapedIdentifier - 72)))) != 0)) {
				{
				State = 125; _localctx.baseType = name(0);
				}
			}

			}
			{
			State = 137;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 128; Match(Colon);
				{
				State = 129; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 130; Match(Comma);
					State = 131; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafetyModifierContext : ParserRuleContext {
		public SafetyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safetyModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterSafetyModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitSafetyModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafetyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafetyModifierContext safetyModifier() {
		SafetyModifierContext _localctx = new SafetyModifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_safetyModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_la = TokenStream.La(1);
			if ( !(_la==Safe || _la==Unsafe) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritanceModifierContext : ParserRuleContext {
		public ClassInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterClassInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitClassInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritanceModifierContext classInheritanceModifier() {
		ClassInheritanceModifierContext _localctx = new ClassInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_classInheritanceModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = TokenStream.La(1);
			if ( !(_la==Sealed || _la==Abstract) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInheritanceModifierContext : ParserRuleContext {
		public MethodInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterMethodInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitMethodInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInheritanceModifierContext methodInheritanceModifier() {
		MethodInheritanceModifierContext _localctx = new MethodInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodInheritanceModifier);
		try {
			State = 150;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(Abstract);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; Match(Override);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; Match(Sealed);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 148; Match(Sealed);
				State = 149; Match(Override);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitModifierContext : ParserRuleContext {
		public ExplicitModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterExplicitModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitExplicitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitModifierContext explicitModifier() {
		ExplicitModifierContext _localctx = new ExplicitModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_explicitModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.La(1);
			if ( !(_la==Implicit || _la==Explicit) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsyncModifierContext : ParserRuleContext {
		public AsyncModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asyncModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAsyncModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAsyncModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsyncModifierContext asyncModifier() {
		AsyncModifierContext _localctx = new AsyncModifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_asyncModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(Async);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(LeftAngle);
			{
			State = 157; typeParameter();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 158; Match(Comma);
				State = 159; typeParameter();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			State = 165; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public TypeNameContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeParameter);
		int _la;
		try {
			State = 176;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; identifier();
				{
				State = 169;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 168; _localctx.isList = Match(TypeList);
					}
				}

				}
				{
				State = 173;
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 171; Match(Colon);
					State = 172; _localctx.baseType = typeName(0);
					}
					break;
				}
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(LeftAngle);
			{
			State = 179; type();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 180; Match(Comma);
				State = 181; type();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			State = 187; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser_Antlr.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser_Antlr.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser_Antlr.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser_Antlr.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser_Antlr.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser_Antlr.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_identifierOrPredefinedType);
		try {
			State = 198;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; identifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 193; Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 194; Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 195; Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 196; Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 197; Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_type);
		try {
			State = 202;
			switch (TokenStream.La(1)) {
			case Mutable:
			case Ref:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; valueType();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_returnType);
		try {
			State = 206;
			switch (TokenStream.La(1)) {
			case Mutable:
			case Ref:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; type();
				}
				break;
			case Panic:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; Match(Panic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 36, RULE_lifetime);
		try {
			State = 214;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; Match(Tilde);
				State = 209; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(Tilde);
				State = 211; Match(Self);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212; Match(Tilde);
				State = 213; Match(Own);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(LeftParen);
			{
			State = 225;
			_la = TokenStream.La(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (Params - 32)) | (1L << (Mutable - 32)) | (1L << (Ref - 32)) | (1L << (String - 32)) | (1L << (ByteType - 32)) | (1L << (IntType - 32)) | (1L << (UIntType - 32)) | (1L << (FloatType - 32)) | (1L << (SizeType - 32)) | (1L << (OffsetType - 32)) | (1L << (UnsafeArrayType - 32)) | (1L << (Tilde - 32)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LeftBracket - 100)) | (1L << (LeftParen - 100)) | (1L << (Asterisk - 100)) | (1L << (Identifier - 100)) | (1L << (EscapedIdentifier - 100)))) != 0)) {
				{
				State = 217; funcTypeParameter();
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 218; Match(Comma);
					State = 219; funcTypeParameter();
					}
					}
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			State = 227; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 229; parameterModifier();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			State = 235; valueType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser_Antlr.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser_Antlr.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_constExpression);
		try {
			State = 240;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(LeftParen);
			{
			State = 251;
			_la = TokenStream.La(1);
			if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (Self - 19)) | (1L << (Var - 19)) | (1L << (Params - 19)) | (1L << (Mutable - 19)) | (1L << (Ref - 19)))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (Colon - 88)) | (1L << (Identifier - 88)) | (1L << (EscapedIdentifier - 88)))) != 0)) {
				{
				State = 243; parameter();
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 244; Match(Comma);
					State = 245; parameter();
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			State = 253; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public GenericConstraintContext _genericConstraint;
		public IList<GenericConstraintContext> _constraints = new List<GenericConstraintContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public GenericConstraintContext[] genericConstraint() {
			return GetRuleContexts<GenericConstraintContext>();
		}
		public GenericConstraintContext genericConstraint(int i) {
			return GetRuleContext<GenericConstraintContext>(i);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(Where);
			State = 258; typeName(0);
			State = 259; Match(Colon);
			{
			State = 260; _localctx._genericConstraint = genericConstraint();
			_localctx._constraints.Add(_localctx._genericConstraint);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 261; Match(Comma);
				State = 262; _localctx._genericConstraint = genericConstraint();
				_localctx._constraints.Add(_localctx._genericConstraint);
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public GenericConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterGenericConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitGenericConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintContext genericConstraint() {
		GenericConstraintContext _localctx = new GenericConstraintContext(Context, State);
		EnterRule(_localctx, 50, RULE_genericConstraint);
		try {
			State = 274;
			switch (TokenStream.La(1)) {
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; typeName(0);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(Class);
				}
				break;
			case Struct:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270; Match(Struct);
				}
				break;
			case Copy:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271; Match(Copy);
				State = 272; Match(LeftParen);
				State = 273; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(Colon);
			State = 277;
			_la = TokenStream.La(1);
			if ( !(_la==Self || _la==Base) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 278; Match(LeftParen);
			State = 279; argumentList();
			State = 280; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 54, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 290;
			_la = TokenStream.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (New - 12)) | (1L << (Delete - 12)) | (1L << (Self - 12)) | (1L << (Uninitialized - 12)) | (1L << (Try - 12)) | (1L << (TryPanic - 12)) | (1L << (TryResult - 12)) | (1L << (Unsafe - 12)) | (1L << (Await - 12)) | (1L << (String - 12)) | (1L << (ByteType - 12)) | (1L << (IntType - 12)) | (1L << (UIntType - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FloatType - 76)) | (1L << (SizeType - 76)) | (1L << (OffsetType - 76)) | (1L << (UnsafeArrayType - 76)) | (1L << (BooleanLiteral - 76)) | (1L << (IntLiteral - 76)) | (1L << (NullLiteral - 76)) | (1L << (StringLiteral - 76)) | (1L << (CharLiteral - 76)) | (1L << (LeftParen - 76)) | (1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Pipe - 76)) | (1L << (Not - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
				{
				State = 282; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 283; Match(Comma);
					State = 284; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_overloadableOperator);
		try {
			State = 304;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 296; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 297; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 298; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 299; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 300; Match(LeftBracket);
				State = 301; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 302; Match(Pipe);
				State = 303; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(LeftBrace);
			{
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (New - 12)) | (1L << (Delete - 12)) | (1L << (Self - 12)) | (1L << (Uninitialized - 12)) | (1L << (Var - 12)) | (1L << (Let - 12)) | (1L << (While - 12)) | (1L << (If - 12)) | (1L << (For - 12)) | (1L << (Continue - 12)) | (1L << (Return - 12)) | (1L << (Try - 12)) | (1L << (TryPanic - 12)) | (1L << (TryResult - 12)) | (1L << (Throw - 12)) | (1L << (Unsafe - 12)) | (1L << (Await - 12)) | (1L << (String - 12)) | (1L << (ByteType - 12)) | (1L << (IntType - 12)) | (1L << (UIntType - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FloatType - 76)) | (1L << (SizeType - 76)) | (1L << (OffsetType - 76)) | (1L << (UnsafeArrayType - 76)) | (1L << (BooleanLiteral - 76)) | (1L << (IntLiteral - 76)) | (1L << (NullLiteral - 76)) | (1L << (StringLiteral - 76)) | (1L << (CharLiteral - 76)) | (1L << (Semicolon - 76)) | (1L << (LeftBrace - 76)) | (1L << (LeftParen - 76)) | (1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Pipe - 76)) | (1L << (Not - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
				{
				{
				State = 307; statement();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			State = 313; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDeclarationContext : DeclarationContext {
		public IdentifierContext structName;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public StructDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalBlockDeclarationContext : DeclarationContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ExternalBlockDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterExternalBlockDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitExternalBlockDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalBlockDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext className;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_declaration);
		int _la;
		try {
			State = 469;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; Match(Namespace);
				State = 316; namespaceName();
				State = 317; Match(LeftBrace);
				{
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 318; usingDirective();
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==AtSign) {
					{
					{
					State = 324; declaration();
					}
					}
					State = 329;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 330; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 332; attribute();
					}
					}
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 338; accessModifier();
				{
				State = 340;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 339; safetyModifier();
					}
				}

				}
				{
				State = 343;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 342; classInheritanceModifier();
					}
				}

				}
				{
				State = 346;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 345; Match(Mutable);
					}
				}

				}
				State = 348; Match(Class);
				State = 349; ((ClassDeclarationContext)_localctx).className = identifier();
				{
				State = 351;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 350; typeParameters();
					}
				}

				}
				{
				State = 354;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 353; baseTypes();
					}
				}

				}
				{
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 356; typeParameterConstraintClause();
					}
					}
					State = 361;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 362; Match(LeftBrace);
				{
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (Public - 55)) | (1L << (Private - 55)) | (1L << (Protected - 55)) | (1L << (Internal - 55)) | (1L << (AtSign - 55)))) != 0)) {
					{
					{
					State = 363; member();
					}
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 369; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new StructDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 371; attribute();
					}
					}
					State = 376;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 377; accessModifier();
				{
				State = 379;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 378; safetyModifier();
					}
				}

				}
				{
				State = 382;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 381; Match(Mutable);
					}
				}

				}
				State = 384; Match(Struct);
				State = 385; ((StructDeclarationContext)_localctx).structName = identifier();
				{
				State = 387;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 386; typeParameters();
					}
				}

				}
				{
				State = 390;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 389; baseTypes();
					}
				}

				}
				{
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 392; typeParameterConstraintClause();
					}
					}
					State = 397;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 398; Match(LeftBrace);
				{
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (Public - 55)) | (1L << (Private - 55)) | (1L << (Protected - 55)) | (1L << (Internal - 55)) | (1L << (AtSign - 55)))) != 0)) {
					{
					{
					State = 399; member();
					}
					}
					State = 404;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 405; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 407; attribute();
					}
					}
					State = 412;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 413; accessModifier();
				State = 414;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 415; identifier();
				{
				State = 418;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 416; Match(Colon);
					State = 417; valueType();
					}
				}

				}
				{
				State = 422;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 420; Match(Assign);
					State = 421; expression(0);
					}
				}

				}
				State = 424; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 426; attribute();
					}
					}
					State = 431;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 432; accessModifier();
				{
				State = 434;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 433; safetyModifier();
					}
				}

				}
				{
				State = 437;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 436; asyncModifier();
					}
				}

				}
				State = 439; identifier();
				{
				State = 441;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 440; typeArguments();
					}
				}

				}
				State = 443; parameterList();
				State = 444; Match(Lambda);
				State = 445; returnType();
				{
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 446; typeParameterConstraintClause();
					}
					}
					State = 451;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 452; contract();
					}
					}
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 458; methodBody();
				}
				break;
			case 6:
				_localctx = new ExternalBlockDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 460; Match(External);
				State = 461; Match(LeftBrace);
				{
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==AtSign) {
					{
					{
					State = 462; declaration();
					}
					}
					State = 467;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 468; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 62, RULE_contract);
		try {
			State = 475;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; Match(Requires);
				State = 472; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 473; Match(Ensures);
				State = 474; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_simpleName);
		try {
			State = 481;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 478; identifierOrPredefinedType();
				State = 479; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnqualifiedNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public UnqualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterUnqualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitUnqualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnqualifiedNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 484; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 491;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 486;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 487; Match(Dot);
					State = 488; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
	 
		public TypeNameContext() { }
		public virtual void CopyFrom(TypeNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : TypeNameContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : TypeNameContext {
		public IToken isMutable;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PointerTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : TypeNameContext {
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _types = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public TupleTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : TypeNameContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : TypeNameContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MaybeTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			switch (TokenStream.La(1)) {
			case Asterisk:
				{
				_localctx = new PointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 495; Match(Asterisk);
				{
				State = 497;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 496; ((PointerTypeContext)_localctx).isMutable = Match(Mutable);
					}
				}

				}
				State = 499; typeName(3);
				}
				break;
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 500; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 514;
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 501; Match(LeftBracket);
					{
					State = 502; ((TupleTypeContext)_localctx)._typeName = typeName(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._typeName);
					State = 507;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 503; Match(Comma);
						State = 504; ((TupleTypeContext)_localctx)._typeName = typeName(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._typeName);
						}
						}
						State = 509;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					State = 510; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 512; Match(LeftBracket);
					State = 513; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 516; funcTypeParameterList();
				State = 517; Match(Lambda);
				State = 518; returnType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 526;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MaybeTypeContext(new TypeNameContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 522;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 523; Match(IsNull);
					}
					} 
				}
				State = 528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RefTypeContext : ValueTypeContext {
		public IToken isMutable;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public RefTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterRefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitRefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LifetimeTypeContext : ValueTypeContext {
		public IToken isMutable;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public LifetimeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterLifetimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitLifetimeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetimeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_valueType);
		int _la;
		try {
			State = 544;
			switch (TokenStream.La(1)) {
			case Mutable:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new LifetimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 530;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 529; lifetime();
					}
				}

				}
				{
				State = 533;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 532; ((LifetimeTypeContext)_localctx).isMutable = Match(Mutable);
					}
				}

				}
				State = 535; typeName(0);
				}
				break;
			case Ref:
				_localctx = new RefTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 536; Match(Ref);
				{
				State = 538;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 537; Match(Var);
					}
				}

				}
				{
				State = 541;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 540; ((RefTypeContext)_localctx).isMutable = Match(Mutable);
					}
				}

				}
				State = 543; typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
	 
		public TypeParameterConstraintClauseContext() { }
		public virtual void CopyFrom(TypeParameterConstraintClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeParameterRangeConstraintClauseContext : TypeParameterConstraintClauseContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser_Antlr.IntLiteral, 0); }
		public TypeParameterRangeConstraintClauseContext(TypeParameterConstraintClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeParameterRangeConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeParameterRangeConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterRangeConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeParameterBoundConstraintClauseContext : TypeParameterConstraintClauseContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public TypeParameterBoundConstraintClauseContext(TypeParameterConstraintClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeParameterBoundConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeParameterBoundConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterBoundConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 562;
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				_localctx = new TypeParameterBoundConstraintClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 546; Match(Where);
				State = 547; typeParameter();
				State = 548; Match(Colon);
				{
				State = 549; typeParameterConstraint();
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 550; Match(Comma);
					State = 551; typeParameterConstraint();
					}
					}
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				}
				break;
			case 2:
				_localctx = new TypeParameterRangeConstraintClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; Match(Where);
				State = 558; typeParameter();
				State = 559;
				_la = TokenStream.La(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (LeftAngle - 98)) | (1L << (RightAngle - 98)) | (1L << (LessThanOrEqual - 98)) | (1L << (GreaterThanOrEqual - 98)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 560; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeParameterConstraint);
		try {
			State = 569;
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; Match(New);
				State = 565; Match(LeftParen);
				State = 566; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 567; typeName(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 568; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ExplicitModifierContext explicitModifier() {
			return GetRuleContext<ExplicitModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CopyConstructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ExplicitModifierContext explicitModifier() {
			return GetRuleContext<ExplicitModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public CopyConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterCopyConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitCopyConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 76, RULE_member);
		int _la;
		try {
			State = 895;
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 571; attribute();
					}
					}
					State = 576;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 577; accessModifier();
				{
				State = 579;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 578; safetyModifier();
					}
				}

				}
				State = 581; Match(New);
				{
				State = 583;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 582; identifier();
					}
				}

				}
				State = 585; parameterList();
				{
				State = 588;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 586; Match(Lambda);
					State = 587; returnType();
					}
				}

				}
				{
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 590; whereClause();
					}
					}
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 597;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 596; constructorInitializer();
					}
				}

				}
				{
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 599; contract();
					}
					}
					State = 604;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 605; methodBody();
				}
				break;
			case 2:
				_localctx = new CopyConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 607; attribute();
					}
					}
					State = 612;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 613; accessModifier();
				{
				State = 615;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 614; safetyModifier();
					}
				}

				}
				State = 617; explicitModifier();
				State = 618; Match(New);
				State = 619; Match(Copy);
				State = 620; parameterList();
				{
				State = 623;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 621; Match(Lambda);
					State = 622; returnType();
					}
				}

				}
				{
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 625; whereClause();
					}
					}
					State = 630;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 632;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 631; constructorInitializer();
					}
				}

				}
				{
				State = 637;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 634; contract();
					}
					}
					State = 639;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 640; methodBody();
				}
				break;
			case 3:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 642; attribute();
					}
					}
					State = 647;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 648; accessModifier();
				{
				State = 650;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 649; safetyModifier();
					}
				}

				}
				State = 652; Match(Delete);
				State = 653; parameterList();
				State = 654; methodBody();
				}
				break;
			case 4:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 656; attribute();
					}
					}
					State = 661;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 662; accessModifier();
				{
				State = 664;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 663; safetyModifier();
					}
				}

				}
				State = 666; explicitModifier();
				State = 667; Match(Conversion);
				{
				State = 669;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 668; typeArguments();
					}
				}

				}
				State = 671; parameterList();
				State = 672; Match(Lambda);
				State = 673; returnType();
				{
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 674; typeParameterConstraintClause();
					}
					}
					State = 679;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 680; contract();
					}
					}
					State = 685;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 686; methodBody();
				}
				break;
			case 5:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 688; attribute();
					}
					}
					State = 693;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 694; accessModifier();
				State = 695;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				{
				State = 697;
				_la = TokenStream.La(1);
				if (_la==Unsafe) {
					{
					State = 696; Match(Unsafe);
					}
				}

				}
				State = 699; identifier();
				{
				State = 702;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 700; Match(Colon);
					State = 701; valueType();
					}
				}

				}
				{
				State = 706;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 704; Match(Assign);
					State = 705; expression(0);
					}
				}

				}
				State = 708; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 710; attribute();
					}
					}
					State = 715;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 716; accessModifier();
				{
				State = 718;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 717; methodInheritanceModifier();
					}
				}

				}
				{
				State = 721;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 720; safetyModifier();
					}
				}

				}
				{
				State = 724;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 723; asyncModifier();
					}
				}

				}
				State = 726;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 727; identifier();
				{
				State = 729;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 728; typeArguments();
					}
				}

				}
				State = 731; parameterList();
				State = 732; Match(Lambda);
				State = 733; returnType();
				{
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 734; typeParameterConstraintClause();
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 743;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 740; contract();
					}
					}
					State = 745;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 746; methodBody();
				}
				break;
			case 7:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 748; attribute();
					}
					}
					State = 753;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 754; accessModifier();
				{
				State = 756;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 755; methodInheritanceModifier();
					}
				}

				}
				{
				State = 759;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 758; safetyModifier();
					}
				}

				}
				{
				State = 762;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 761; asyncModifier();
					}
				}

				}
				State = 764;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 765; Match(LeftBracket);
				State = 766; Match(RightBracket);
				{
				State = 768;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 767; typeArguments();
					}
				}

				}
				State = 770; parameterList();
				State = 771; Match(Lambda);
				State = 772; returnType();
				{
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 773; typeParameterConstraintClause();
					}
					}
					State = 778;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 779; contract();
					}
					}
					State = 784;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 785; methodBody();
				}
				break;
			case 8:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 787; attribute();
					}
					}
					State = 792;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 793; accessModifier();
				{
				State = 795;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 794; methodInheritanceModifier();
					}
				}

				}
				{
				State = 798;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 797; safetyModifier();
					}
				}

				}
				{
				State = 801;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 800; asyncModifier();
					}
				}

				}
				State = 803; identifier();
				{
				State = 805;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 804; typeArguments();
					}
				}

				}
				State = 807; parameterList();
				State = 808; Match(Lambda);
				State = 809; returnType();
				{
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 810; typeParameterConstraintClause();
					}
					}
					State = 815;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 816; contract();
					}
					}
					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 822; methodBody();
				}
				break;
			case 9:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				{
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 824; attribute();
					}
					}
					State = 829;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 830; accessModifier();
				{
				State = 832;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 831; methodInheritanceModifier();
					}
				}

				}
				{
				State = 835;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 834; safetyModifier();
					}
				}

				}
				{
				State = 838;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 837; asyncModifier();
					}
				}

				}
				State = 840; Match(Operator);
				State = 841; overloadableOperator();
				State = 842; parameterList();
				State = 843; Match(Lambda);
				State = 844; returnType();
				{
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 845; typeParameterConstraintClause();
					}
					}
					State = 850;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 851; contract();
					}
					}
					State = 856;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 857; methodBody();
				}
				break;
			case 10:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				{
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 859; attribute();
					}
					}
					State = 864;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 865; accessModifier();
				{
				State = 867;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 866; safetyModifier();
					}
				}

				}
				{
				State = 870;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 869; classInheritanceModifier();
					}
				}

				}
				State = 872; Match(Class);
				State = 873; identifier();
				{
				State = 875;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 874; typeParameters();
					}
				}

				}
				{
				State = 878;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 877; baseTypes();
					}
				}

				}
				{
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 880; typeParameterConstraintClause();
					}
					}
					State = 885;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 886; Match(LeftBrace);
				{
				State = 890;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (Public - 55)) | (1L << (Private - 55)) | (1L << (Protected - 55)) | (1L << (Internal - 55)) | (1L << (AtSign - 55)))) != 0)) {
					{
					{
					State = 887; member();
					}
					}
					State = 892;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 893; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public IToken isVar;
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public IToken isRef;
		public IToken isMutable;
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 78, RULE_parameter);
		int _la;
		try {
			State = 918;
			switch (TokenStream.La(1)) {
			case Var:
			case Params:
			case Colon:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 898;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 897; ((NamedParameterContext)_localctx).isVar = Match(Var);
					}
				}

				}
				{
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 900; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 905;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				{
				State = 907;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 906; identifier();
					}
				}

				}
				State = 909; Match(Colon);
				State = 910; valueType();
				}
				break;
			case Self:
			case Mutable:
			case Ref:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 912;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 911; ((SelfParameterContext)_localctx).isRef = Match(Ref);
					}
				}

				}
				{
				State = 915;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 914; ((SelfParameterContext)_localctx).isMutable = Match(Mutable);
					}
				}

				}
				State = 917; Match(Self);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
	 
		public MethodBodyContext() { }
		public virtual void CopyFrom(MethodBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoMethodBodyContext : MethodBodyContext {
		public NoMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNoMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNoMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockMethodBodyContext : MethodBodyContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterBlockMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitBlockMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 80, RULE_methodBody);
		int _la;
		try {
			State = 929;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				_localctx = new BlockMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 920; Match(LeftBrace);
				{
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (New - 12)) | (1L << (Delete - 12)) | (1L << (Self - 12)) | (1L << (Uninitialized - 12)) | (1L << (Var - 12)) | (1L << (Let - 12)) | (1L << (While - 12)) | (1L << (If - 12)) | (1L << (For - 12)) | (1L << (Continue - 12)) | (1L << (Return - 12)) | (1L << (Try - 12)) | (1L << (TryPanic - 12)) | (1L << (TryResult - 12)) | (1L << (Throw - 12)) | (1L << (Unsafe - 12)) | (1L << (Await - 12)) | (1L << (String - 12)) | (1L << (ByteType - 12)) | (1L << (IntType - 12)) | (1L << (UIntType - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FloatType - 76)) | (1L << (SizeType - 76)) | (1L << (OffsetType - 76)) | (1L << (UnsafeArrayType - 76)) | (1L << (BooleanLiteral - 76)) | (1L << (IntLiteral - 76)) | (1L << (NullLiteral - 76)) | (1L << (StringLiteral - 76)) | (1L << (CharLiteral - 76)) | (1L << (Semicolon - 76)) | (1L << (LeftBrace - 76)) | (1L << (LeftParen - 76)) | (1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Pipe - 76)) | (1L << (Not - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
					{
					{
					State = 921; statement();
					}
					}
					State = 926;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 927; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new NoMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 928; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public BlockContext then;
		public BlockContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public BlockContext then;
		public BlockContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_statement);
		int _la;
		try {
			State = 990;
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 931; localVariableDeclaration();
				State = 932; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 934; Match(Unsafe);
				State = 935; Match(LeftBrace);
				{
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (New - 12)) | (1L << (Delete - 12)) | (1L << (Self - 12)) | (1L << (Uninitialized - 12)) | (1L << (Var - 12)) | (1L << (Let - 12)) | (1L << (While - 12)) | (1L << (If - 12)) | (1L << (For - 12)) | (1L << (Continue - 12)) | (1L << (Return - 12)) | (1L << (Try - 12)) | (1L << (TryPanic - 12)) | (1L << (TryResult - 12)) | (1L << (Throw - 12)) | (1L << (Unsafe - 12)) | (1L << (Await - 12)) | (1L << (String - 12)) | (1L << (ByteType - 12)) | (1L << (IntType - 12)) | (1L << (UIntType - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FloatType - 76)) | (1L << (SizeType - 76)) | (1L << (OffsetType - 76)) | (1L << (UnsafeArrayType - 76)) | (1L << (BooleanLiteral - 76)) | (1L << (IntLiteral - 76)) | (1L << (NullLiteral - 76)) | (1L << (StringLiteral - 76)) | (1L << (CharLiteral - 76)) | (1L << (Semicolon - 76)) | (1L << (LeftBrace - 76)) | (1L << (LeftParen - 76)) | (1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Pipe - 76)) | (1L << (Not - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
					{
					{
					State = 936; statement();
					}
					}
					State = 941;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 942; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 943; block();
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 944; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 945; expression(0);
				State = 946; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 948; Match(Return);
				{
				State = 950;
				_la = TokenStream.La(1);
				if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (New - 12)) | (1L << (Delete - 12)) | (1L << (Self - 12)) | (1L << (Uninitialized - 12)) | (1L << (Try - 12)) | (1L << (TryPanic - 12)) | (1L << (TryResult - 12)) | (1L << (Unsafe - 12)) | (1L << (Await - 12)) | (1L << (String - 12)) | (1L << (ByteType - 12)) | (1L << (IntType - 12)) | (1L << (UIntType - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FloatType - 76)) | (1L << (SizeType - 76)) | (1L << (OffsetType - 76)) | (1L << (UnsafeArrayType - 76)) | (1L << (BooleanLiteral - 76)) | (1L << (IntLiteral - 76)) | (1L << (NullLiteral - 76)) | (1L << (StringLiteral - 76)) | (1L << (CharLiteral - 76)) | (1L << (LeftParen - 76)) | (1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Pipe - 76)) | (1L << (Not - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
					{
					State = 949; expression(0);
					}
				}

				}
				State = 952; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 953; Match(Throw);
				State = 954; expression(0);
				State = 955; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 957; Match(If);
				State = 958; ((IfStatementContext)_localctx).condition = expression(0);
				State = 959; ((IfStatementContext)_localctx).then = block();
				{
				State = 962;
				_la = TokenStream.La(1);
				if (_la==Else) {
					{
					State = 960; Match(Else);
					State = 961; ((IfStatementContext)_localctx).@else = block();
					}
				}

				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 964; Match(If);
				State = 965; localVariableDeclaration();
				State = 966; ((LetIfStatementContext)_localctx).then = block();
				{
				State = 969;
				_la = TokenStream.La(1);
				if (_la==Else) {
					{
					State = 967; Match(Else);
					State = 968; ((LetIfStatementContext)_localctx).@else = block();
					}
				}

				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 971; Match(For);
				State = 974;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 972; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 973; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 976; Match(In);
				State = 977; expression(0);
				State = 978; block();
				}
				break;
			case 11:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 980; Match(While);
				State = 981; expression(0);
				State = 982; block();
				}
				break;
			case 12:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 984; Match(Delete);
				State = 985; expression(0);
				State = 986; Match(Semicolon);
				}
				break;
			case 13:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 988; Match(Continue);
				State = 989; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
	 
		public LocalVariableDeclarationContext() { }
		public virtual void CopyFrom(LocalVariableDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DestructureLocalVariableDeclarationContext : LocalVariableDeclarationContext {
		public IToken kind;
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DestructureLocalVariableDeclarationContext(LocalVariableDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterDestructureLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitDestructureLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructureLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleLocalVariableDeclarationContext : LocalVariableDeclarationContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleLocalVariableDeclarationContext(LocalVariableDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterSimpleLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitSimpleLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_localVariableDeclaration);
		int _la;
		try {
			State = 1020;
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				_localctx = new SimpleLocalVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 992;
				((SimpleLocalVariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((SimpleLocalVariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 993; identifier();
				{
				State = 995;
				_la = TokenStream.La(1);
				if (_la==IsNull) {
					{
					State = 994; Match(IsNull);
					}
				}

				}
				State = 997; Match(Colon);
				State = 998; valueType();
				{
				State = 1001;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 999; Match(Assign);
					State = 1000; expression(0);
					}
				}

				}
				}
				break;
			case 2:
				_localctx = new DestructureLocalVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1003;
				((DestructureLocalVariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((DestructureLocalVariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1004; Match(LeftBracket);
				{
				State = 1005; identifier();
				State = 1010;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 1006; Match(Comma);
					State = 1007; identifier();
					}
					}
					State = 1012;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 1013; Match(RightBracket);
				State = 1014; Match(Colon);
				State = 1015; valueType();
				{
				State = 1018;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 1016; Match(Assign);
					State = 1017; expression(0);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToExpressionContext : ExpressionContext {
		public ExpressionContext from;
		public ExpressionContext to;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ToExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterToExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitToExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser_Antlr.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewMemoryExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public NewMemoryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNewMemoryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNewMemoryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewMemoryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnsafeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterUnsafeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitUnsafeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteMemoryExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DeleteMemoryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterDeleteMemoryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitDeleteMemoryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteMemoryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public ArgumentListContext placementArguments;
		public ArgumentListContext constructorArguments;
		public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser_Antlr.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlacementDeleteExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PlacementDeleteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterPlacementDeleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitPlacementDeleteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlacementDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser_Antlr.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser_Antlr.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParser_AntlrListener typedListener = listener as IPreAdamantParser_AntlrListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParser_AntlrVisitor<TResult> typedVisitor = visitor as IPreAdamantParser_AntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1023; Match(Await);
				State = 1024; expression(30);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1025;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (Asterisk - 104)) | (1L << (AddressOf - 104)) | (1L << (Plus - 104)) | (1L << (Minus - 104)) | (1L << (Not - 104)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1026; expression(28);
				}
				break;
			case 3:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1027;
				((TryExpressionContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1028; expression(13);
				}
				break;
			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1029; Match(LeftParen);
				State = 1030; expression(0);
				State = 1031; Match(RightParen);
				}
				break;
			case 5:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1033; Match(Pipe);
				State = 1034; expression(0);
				State = 1035; Match(Pipe);
				}
				break;
			case 6:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1037; Match(New);
				{
				State = 1042;
				_la = TokenStream.La(1);
				if (_la==LeftParen) {
					{
					State = 1038; Match(LeftParen);
					State = 1039; ((NewExpressionContext)_localctx).placementArguments = argumentList();
					State = 1040; Match(RightParen);
					}
				}

				}
				State = 1046;
				switch (TokenStream.La(1)) {
				case String:
				case ByteType:
				case IntType:
				case UIntType:
				case FloatType:
				case SizeType:
				case OffsetType:
				case UnsafeArrayType:
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1044; name(0);
					}
					break;
				case Copy:
					{
					State = 1045; Match(Copy);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1048; Match(LeftParen);
				State = 1049; ((NewExpressionContext)_localctx).constructorArguments = argumentList();
				State = 1050; Match(RightParen);
				}
				break;
			case 7:
				{
				_localctx = new NewMemoryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1052; Match(New);
				{
				State = 1054;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 1053; typeArguments();
					}
				}

				}
				State = 1056; Match(LeftParen);
				State = 1057; argumentList();
				State = 1058; Match(RightParen);
				}
				break;
			case 8:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1060; Match(New);
				{
				State = 1062;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1061; baseTypes();
					}
				}

				}
				State = 1064; Match(LeftParen);
				State = 1065; argumentList();
				State = 1066; Match(RightParen);
				State = 1067; Match(LeftBrace);
				{
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (Public - 55)) | (1L << (Private - 55)) | (1L << (Protected - 55)) | (1L << (Internal - 55)) | (1L << (AtSign - 55)))) != 0)) {
					{
					{
					State = 1068; member();
					}
					}
					State = 1073;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 1074; Match(RightBrace);
				}
				break;
			case 9:
				{
				_localctx = new DeleteMemoryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1076; Match(Delete);
				State = 1077; Match(LeftParen);
				State = 1078; argumentList();
				State = 1079; Match(RightParen);
				}
				break;
			case 10:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1083;
				switch (TokenStream.La(1)) {
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1081; identifier();
					}
					break;
				case LeftParen:
					{
					State = 1082; parameterList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1085; Match(Lambda);
				State = 1095;
				switch (TokenStream.La(1)) {
				case New:
				case Delete:
				case Self:
				case Uninitialized:
				case Try:
				case TryPanic:
				case TryResult:
				case Unsafe:
				case Await:
				case String:
				case ByteType:
				case IntType:
				case UIntType:
				case FloatType:
				case SizeType:
				case OffsetType:
				case UnsafeArrayType:
				case BooleanLiteral:
				case IntLiteral:
				case NullLiteral:
				case StringLiteral:
				case CharLiteral:
				case LeftParen:
				case Asterisk:
				case AddressOf:
				case Plus:
				case Minus:
				case Pipe:
				case Not:
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1086; expression(0);
					}
					break;
				case LeftBrace:
					{
					State = 1087; Match(LeftBrace);
					{
					State = 1091;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (New - 12)) | (1L << (Delete - 12)) | (1L << (Self - 12)) | (1L << (Uninitialized - 12)) | (1L << (Var - 12)) | (1L << (Let - 12)) | (1L << (While - 12)) | (1L << (If - 12)) | (1L << (For - 12)) | (1L << (Continue - 12)) | (1L << (Return - 12)) | (1L << (Try - 12)) | (1L << (TryPanic - 12)) | (1L << (TryResult - 12)) | (1L << (Throw - 12)) | (1L << (Unsafe - 12)) | (1L << (Await - 12)) | (1L << (String - 12)) | (1L << (ByteType - 12)) | (1L << (IntType - 12)) | (1L << (UIntType - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FloatType - 76)) | (1L << (SizeType - 76)) | (1L << (OffsetType - 76)) | (1L << (UnsafeArrayType - 76)) | (1L << (BooleanLiteral - 76)) | (1L << (IntLiteral - 76)) | (1L << (NullLiteral - 76)) | (1L << (StringLiteral - 76)) | (1L << (CharLiteral - 76)) | (1L << (Semicolon - 76)) | (1L << (LeftBrace - 76)) | (1L << (LeftParen - 76)) | (1L << (Asterisk - 76)) | (1L << (AddressOf - 76)) | (1L << (Plus - 76)) | (1L << (Minus - 76)) | (1L << (Pipe - 76)) | (1L << (Not - 76)) | (1L << (Identifier - 76)) | (1L << (EscapedIdentifier - 76)))) != 0)) {
						{
						{
						State = 1088; statement();
						}
						}
						State = 1093;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					State = 1094; Match(RightBrace);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1097; simpleName();
				}
				break;
			case 12:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1098; Match(NullLiteral);
				}
				break;
			case 13:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1099; Match(Self);
				}
				break;
			case 14:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1100; Match(BooleanLiteral);
				}
				break;
			case 15:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1101; Match(IntLiteral);
				}
				break;
			case 16:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1102; Match(Uninitialized);
				}
				break;
			case 17:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1103; Match(StringLiteral);
				}
				break;
			case 18:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1104; Match(CharLiteral);
				}
				break;
			case 19:
				{
				_localctx = new UnsafeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1105; Match(Unsafe);
				State = 1106; Match(LeftParen);
				State = 1107; expression(0);
				State = 1108; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1175;
					switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DotDotExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1112;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 1113; Match(DotDot);
						State = 1114; ((DotDotExpressionContext)_localctx).rhs = expression(35);
						}
						break;
					case 2:
						{
						_localctx = new ToExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ToExpressionContext)_localctx).from = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1115;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 1116; Match(To);
						State = 1117; ((ToExpressionContext)_localctx).to = expression(34);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1118;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1119;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1120; ((MultiplicativeExpressionContext)_localctx).rhs = expression(28);
						}
						break;
					case 4:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1121;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1122;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1123; ((AdditiveExpressionContext)_localctx).rhs = expression(27);
						}
						break;
					case 5:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparativeExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1124;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1125;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (LeftAngle - 98)) | (1L << (RightAngle - 98)) | (1L << (LessThanOrEqual - 98)) | (1L << (GreaterThanOrEqual - 98)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1126; ((ComparativeExpressionContext)_localctx).rhs = expression(26);
						}
						break;
					case 6:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1127;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1128;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1129; ((EqualityExpressionContext)_localctx).rhs = expression(25);
						}
						break;
					case 7:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1130;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1131; Match(And);
						State = 1132; ((AndExpressionContext)_localctx).rhs = expression(24);
						}
						break;
					case 8:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((XorExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1133;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1134; Match(Xor);
						State = 1135; ((XorExpressionContext)_localctx).rhs = expression(23);
						}
						break;
					case 9:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1136;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1137; Match(Or);
						State = 1138; ((OrExpressionContext)_localctx).rhs = expression(22);
						}
						break;
					case 10:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CoalesceExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1139;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1140; Match(Coalesce);
						State = 1141; ((CoalesceExpressionContext)_localctx).rhs = expression(21);
						}
						break;
					case 11:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1142;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1143; Match(In);
						State = 1144; ((InExpressionContext)_localctx).rhs = expression(20);
						}
						break;
					case 12:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1145;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1146; Match(IsNull);
						State = 1147; ((IfExpressionContext)_localctx).then = expression(0);
						State = 1148; Match(Colon);
						State = 1149; ((IfExpressionContext)_localctx).@else = expression(12);
						}
						break;
					case 13:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1151;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1152;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (Assign - 122)) | (1L << (AddAssign - 122)) | (1L << (SubtractAssign - 122)) | (1L << (MultiplyAssign - 122)) | (1L << (DivideAssign - 122)) | (1L << (AndAssign - 122)) | (1L << (XorAssign - 122)) | (1L << (OrAssign - 122)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1153; ((AssignmentExpressionContext)_localctx).rvalue = expression(11);
						}
						break;
					case 14:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1154;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 1155; Match(Dot);
						State = 1156; identifier();
						}
						break;
					case 15:
						{
						_localctx = new PlacementDeleteExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1157;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 1158; Match(Dot);
						State = 1159; Match(Delete);
						}
						break;
					case 16:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1160;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1161; Match(LeftParen);
						State = 1162; argumentList();
						State = 1163; Match(RightParen);
						}
						break;
					case 17:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1165;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1166; Match(LeftBracket);
						State = 1167; argumentList();
						State = 1168; Match(RightBracket);
						}
						break;
					case 18:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1170;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1171; Match(IsNull);
						}
						break;
					case 19:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1172;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1173;
						((CastExpressionContext)_localctx).kind = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1174; typeName(0);
						}
						break;
					}
					} 
				}
				State = 1179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return name_sempred((NameContext)_localctx, predIndex);
		case 34: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 34);
		case 3: return Precpred(Context, 33);
		case 4: return Precpred(Context, 27);
		case 5: return Precpred(Context, 26);
		case 6: return Precpred(Context, 25);
		case 7: return Precpred(Context, 24);
		case 8: return Precpred(Context, 23);
		case 9: return Precpred(Context, 22);
		case 10: return Precpred(Context, 21);
		case 11: return Precpred(Context, 20);
		case 12: return Precpred(Context, 19);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 36);
		case 16: return Precpred(Context, 35);
		case 17: return Precpred(Context, 32);
		case 18: return Precpred(Context, 31);
		case 19: return Precpred(Context, 29);
		case 20: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x89\x49F\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x3\x2\a\x2\\\n\x2\f\x2\xE\x2_\v\x2\x3\x2\a\x2\x62"+
		"\n\x2\f\x2\xE\x2\x65\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\a\x5r\n\x5\f\x5\xE\x5u\v\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x5\x6}\n\x6\x3\a\x3\a\x5\a\x81\n\a\x3\a\x3\a\x3\a\x3\a"+
		"\a\a\x87\n\a\f\a\xE\a\x8A\v\a\x5\a\x8C\n\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x99\n\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\a\xE\xA3\n\xE\f\xE\xE\xE\xA6\v\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x5\xF\xAC\n\xF\x3\xF\x3\xF\x5\xF\xB0\n\xF\x3\xF\x5\xF\xB3\n\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\xB9\n\x10\f\x10\xE\x10\xBC\v\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\xC9\n\x11\x3\x12\x3\x12\x5\x12\xCD\n\x12\x3\x13\x3\x13\x5\x13"+
		"\xD1\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xD9\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\xDF\n\x15\f\x15\xE\x15\xE2\v\x15\x5"+
		"\x15\xE4\n\x15\x3\x15\x3\x15\x3\x16\a\x16\xE9\n\x16\f\x16\xE\x16\xEC\v"+
		"\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17\xF3\n\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\a\x18\xF9\n\x18\f\x18\xE\x18\xFC\v\x18\x5\x18\xFE\n\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\a\x1A\x10A\n\x1A\f\x1A\xE\x1A\x10D\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x115\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1D\x3\x1D\x3\x1D\a\x1D\x120\n\x1D\f\x1D\xE\x1D\x123\v\x1D\x5"+
		"\x1D\x125\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x133\n\x1E\x3\x1F\x3\x1F\a\x1F\x137"+
		"\n\x1F\f\x1F\xE\x1F\x13A\v\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \a \x142\n"+
		" \f \xE \x145\v \x3 \a \x148\n \f \xE \x14B\v \x3 \x3 \x3 \a \x150\n "+
		"\f \xE \x153\v \x3 \x3 \x5 \x157\n \x3 \x5 \x15A\n \x3 \x5 \x15D\n \x3"+
		" \x3 \x3 \x5 \x162\n \x3 \x5 \x165\n \x3 \a \x168\n \f \xE \x16B\v \x3"+
		" \x3 \a \x16F\n \f \xE \x172\v \x3 \x3 \x3 \a \x177\n \f \xE \x17A\v "+
		"\x3 \x3 \x5 \x17E\n \x3 \x5 \x181\n \x3 \x3 \x3 \x5 \x186\n \x3 \x5 \x189"+
		"\n \x3 \a \x18C\n \f \xE \x18F\v \x3 \x3 \a \x193\n \f \xE \x196\v \x3"+
		" \x3 \x3 \a \x19B\n \f \xE \x19E\v \x3 \x3 \x3 \x3 \x3 \x5 \x1A5\n \x3"+
		" \x3 \x5 \x1A9\n \x3 \x3 \x3 \a \x1AE\n \f \xE \x1B1\v \x3 \x3 \x5 \x1B5"+
		"\n \x3 \x5 \x1B8\n \x3 \x3 \x5 \x1BC\n \x3 \x3 \x3 \x3 \a \x1C2\n \f "+
		"\xE \x1C5\v \x3 \a \x1C8\n \f \xE \x1CB\v \x3 \x3 \x3 \x3 \x3 \a \x1D2"+
		"\n \f \xE \x1D5\v \x3 \x5 \x1D8\n \x3!\x3!\x3!\x3!\x5!\x1DE\n!\x3\"\x3"+
		"\"\x3\"\x3\"\x5\"\x1E4\n\"\x3#\x3#\x3#\x3#\x3#\x3#\a#\x1EC\n#\f#\xE#\x1EF"+
		"\v#\x3$\x3$\x3$\x5$\x1F4\n$\x3$\x3$\x3$\x3$\x3$\x3$\a$\x1FC\n$\f$\xE$"+
		"\x1FF\v$\x3$\x3$\x3$\x3$\x5$\x205\n$\x3$\x3$\x3$\x3$\x5$\x20B\n$\x3$\x3"+
		"$\a$\x20F\n$\f$\xE$\x212\v$\x3%\x5%\x215\n%\x3%\x5%\x218\n%\x3%\x3%\x3"+
		"%\x5%\x21D\n%\x3%\x5%\x220\n%\x3%\x5%\x223\n%\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\a&\x22B\n&\f&\xE&\x22E\v&\x3&\x3&\x3&\x3&\x3&\x5&\x235\n&\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x5\'\x23C\n\'\x3(\a(\x23F\n(\f(\xE(\x242\v(\x3(\x3(\x5(\x246"+
		"\n(\x3(\x3(\x5(\x24A\n(\x3(\x3(\x3(\x5(\x24F\n(\x3(\a(\x252\n(\f(\xE("+
		"\x255\v(\x3(\x5(\x258\n(\x3(\a(\x25B\n(\f(\xE(\x25E\v(\x3(\x3(\x3(\a("+
		"\x263\n(\f(\xE(\x266\v(\x3(\x3(\x5(\x26A\n(\x3(\x3(\x3(\x3(\x3(\x3(\x5"+
		"(\x272\n(\x3(\a(\x275\n(\f(\xE(\x278\v(\x3(\x5(\x27B\n(\x3(\a(\x27E\n"+
		"(\f(\xE(\x281\v(\x3(\x3(\x3(\a(\x286\n(\f(\xE(\x289\v(\x3(\x3(\x5(\x28D"+
		"\n(\x3(\x3(\x3(\x3(\x3(\a(\x294\n(\f(\xE(\x297\v(\x3(\x3(\x5(\x29B\n("+
		"\x3(\x3(\x3(\x5(\x2A0\n(\x3(\x3(\x3(\x3(\a(\x2A6\n(\f(\xE(\x2A9\v(\x3"+
		"(\a(\x2AC\n(\f(\xE(\x2AF\v(\x3(\x3(\x3(\a(\x2B4\n(\f(\xE(\x2B7\v(\x3("+
		"\x3(\x3(\x5(\x2BC\n(\x3(\x3(\x3(\x5(\x2C1\n(\x3(\x3(\x5(\x2C5\n(\x3(\x3"+
		"(\x3(\a(\x2CA\n(\f(\xE(\x2CD\v(\x3(\x3(\x5(\x2D1\n(\x3(\x5(\x2D4\n(\x3"+
		"(\x5(\x2D7\n(\x3(\x3(\x3(\x5(\x2DC\n(\x3(\x3(\x3(\x3(\a(\x2E2\n(\f(\xE"+
		"(\x2E5\v(\x3(\a(\x2E8\n(\f(\xE(\x2EB\v(\x3(\x3(\x3(\a(\x2F0\n(\f(\xE("+
		"\x2F3\v(\x3(\x3(\x5(\x2F7\n(\x3(\x5(\x2FA\n(\x3(\x5(\x2FD\n(\x3(\x3(\x3"+
		"(\x3(\x5(\x303\n(\x3(\x3(\x3(\x3(\a(\x309\n(\f(\xE(\x30C\v(\x3(\a(\x30F"+
		"\n(\f(\xE(\x312\v(\x3(\x3(\x3(\a(\x317\n(\f(\xE(\x31A\v(\x3(\x3(\x5(\x31E"+
		"\n(\x3(\x5(\x321\n(\x3(\x5(\x324\n(\x3(\x3(\x5(\x328\n(\x3(\x3(\x3(\x3"+
		"(\a(\x32E\n(\f(\xE(\x331\v(\x3(\a(\x334\n(\f(\xE(\x337\v(\x3(\x3(\x3("+
		"\a(\x33C\n(\f(\xE(\x33F\v(\x3(\x3(\x5(\x343\n(\x3(\x5(\x346\n(\x3(\x5"+
		"(\x349\n(\x3(\x3(\x3(\x3(\x3(\x3(\a(\x351\n(\f(\xE(\x354\v(\x3(\a(\x357"+
		"\n(\f(\xE(\x35A\v(\x3(\x3(\x3(\a(\x35F\n(\f(\xE(\x362\v(\x3(\x3(\x5(\x366"+
		"\n(\x3(\x5(\x369\n(\x3(\x3(\x3(\x5(\x36E\n(\x3(\x5(\x371\n(\x3(\a(\x374"+
		"\n(\f(\xE(\x377\v(\x3(\x3(\a(\x37B\n(\f(\xE(\x37E\v(\x3(\x3(\x5(\x382"+
		"\n(\x3)\x5)\x385\n)\x3)\a)\x388\n)\f)\xE)\x38B\v)\x3)\x5)\x38E\n)\x3)"+
		"\x3)\x3)\x5)\x393\n)\x3)\x5)\x396\n)\x3)\x5)\x399\n)\x3*\x3*\a*\x39D\n"+
		"*\f*\xE*\x3A0\v*\x3*\x3*\x5*\x3A4\n*\x3+\x3+\x3+\x3+\x3+\x3+\a+\x3AC\n"+
		"+\f+\xE+\x3AF\v+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x3B9\n+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x3C5\n+\x3+\x3+\x3+\x3+\x3+\x5+\x3CC"+
		"\n+\x3+\x3+\x3+\x5+\x3D1\n+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3+\x5+\x3E1\n+\x3,\x3,\x3,\x5,\x3E6\n,\x3,\x3,\x3,\x3,\x5,"+
		"\x3EC\n,\x3,\x3,\x3,\x3,\x3,\a,\x3F3\n,\f,\xE,\x3F6\v,\x3,\x3,\x3,\x3"+
		",\x3,\x5,\x3FD\n,\x5,\x3FF\n,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x415\n-\x3-\x3-\x5-\x419"+
		"\n-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x421\n-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x429"+
		"\n-\x3-\x3-\x3-\x3-\x3-\a-\x430\n-\f-\xE-\x433\v-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x5-\x43E\n-\x3-\x3-\x3-\x3-\a-\x444\n-\f-\xE-\x447\v"+
		"-\x3-\x5-\x44A\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x5-\x459\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\a-\x49A\n-\f-\xE"+
		"-\x49D\v-\x3-\x2\x5\x44\x46X.\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVX\x2\x12"+
		"\x3\x2\x85\x86\x3\x2\x39<\x3\x2=>\x4\x2\x1F\x1F!!\x3\x2\x33\x34\x4\x2"+
		"\x15\x15\x18\x18\x3\x2\x1B\x1C\x4\x2\x64\x65qr\x3\x2\x1D\x1E\x6\x2jjl"+
		"ltu{{\x3\x2-/\x4\x2jjvv\x3\x2tu\x3\x2op\x3\x2|\x83\x3\x2\x36\x38\x565"+
		"\x2]\x3\x2\x2\x2\x4h\x3\x2\x2\x2\x6l\x3\x2\x2\x2\bn\x3\x2\x2\x2\nv\x3"+
		"\x2\x2\x2\f~\x3\x2\x2\x2\xE\x8D\x3\x2\x2\x2\x10\x8F\x3\x2\x2\x2\x12\x91"+
		"\x3\x2\x2\x2\x14\x98\x3\x2\x2\x2\x16\x9A\x3\x2\x2\x2\x18\x9C\x3\x2\x2"+
		"\x2\x1A\x9E\x3\x2\x2\x2\x1C\xB2\x3\x2\x2\x2\x1E\xB4\x3\x2\x2\x2 \xC8\x3"+
		"\x2\x2\x2\"\xCC\x3\x2\x2\x2$\xD0\x3\x2\x2\x2&\xD8\x3\x2\x2\x2(\xDA\x3"+
		"\x2\x2\x2*\xEA\x3\x2\x2\x2,\xF2\x3\x2\x2\x2.\xF4\x3\x2\x2\x2\x30\x101"+
		"\x3\x2\x2\x2\x32\x103\x3\x2\x2\x2\x34\x114\x3\x2\x2\x2\x36\x116\x3\x2"+
		"\x2\x2\x38\x124\x3\x2\x2\x2:\x132\x3\x2\x2\x2<\x134\x3\x2\x2\x2>\x1D7"+
		"\x3\x2\x2\x2@\x1DD\x3\x2\x2\x2\x42\x1E3\x3\x2\x2\x2\x44\x1E5\x3\x2\x2"+
		"\x2\x46\x20A\x3\x2\x2\x2H\x222\x3\x2\x2\x2J\x234\x3\x2\x2\x2L\x23B\x3"+
		"\x2\x2\x2N\x381\x3\x2\x2\x2P\x398\x3\x2\x2\x2R\x3A3\x3\x2\x2\x2T\x3E0"+
		"\x3\x2\x2\x2V\x3FE\x3\x2\x2\x2X\x458\x3\x2\x2\x2Z\\\x5\x4\x3\x2[Z\x3\x2"+
		"\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\x63\x3\x2\x2\x2_]\x3"+
		"\x2\x2\x2`\x62\x5> \x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2\x63\x61\x3"+
		"\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2"+
		"\x66g\a\x2\x2\x3g\x3\x3\x2\x2\x2hi\a\t\x2\x2ij\x5\b\x5\x2jk\aY\x2\x2k"+
		"\x5\x3\x2\x2\x2lm\t\x2\x2\x2m\a\x3\x2\x2\x2ns\x5\x6\x4\x2op\a[\x2\x2p"+
		"r\x5\x6\x4\x2qo\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2"+
		"t\t\x3\x2\x2\x2us\x3\x2\x2\x2vw\ak\x2\x2w|\x5\x6\x4\x2xy\ah\x2\x2yz\x5"+
		"\x38\x1D\x2z{\ai\x2\x2{}\x3\x2\x2\x2|x\x3\x2\x2\x2|}\x3\x2\x2\x2}\v\x3"+
		"\x2\x2\x2~\x80\aZ\x2\x2\x7F\x81\x5\x44#\x2\x80\x7F\x3\x2\x2\x2\x80\x81"+
		"\x3\x2\x2\x2\x81\x8B\x3\x2\x2\x2\x82\x83\aZ\x2\x2\x83\x88\x5\x44#\x2\x84"+
		"\x85\a`\x2\x2\x85\x87\x5\x44#\x2\x86\x84\x3\x2\x2\x2\x87\x8A\x3\x2\x2"+
		"\x2\x88\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A\x88"+
		"\x3\x2\x2\x2\x8B\x82\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\r\x3\x2\x2\x2"+
		"\x8D\x8E\t\x3\x2\x2\x8E\xF\x3\x2\x2\x2\x8F\x90\t\x4\x2\x2\x90\x11\x3\x2"+
		"\x2\x2\x91\x92\t\x5\x2\x2\x92\x13\x3\x2\x2\x2\x93\x99\a!\x2\x2\x94\x99"+
		"\a \x2\x2\x95\x99\a\x1F\x2\x2\x96\x97\a\x1F\x2\x2\x97\x99\a \x2\x2\x98"+
		"\x93\x3\x2\x2\x2\x98\x94\x3\x2\x2\x2\x98\x95\x3\x2\x2\x2\x98\x96\x3\x2"+
		"\x2\x2\x99\x15\x3\x2\x2\x2\x9A\x9B\t\x6\x2\x2\x9B\x17\x3\x2\x2\x2\x9C"+
		"\x9D\a\x45\x2\x2\x9D\x19\x3\x2\x2\x2\x9E\x9F\a\x64\x2\x2\x9F\xA4\x5\x1C"+
		"\xF\x2\xA0\xA1\a`\x2\x2\xA1\xA3\x5\x1C\xF\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA6"+
		"\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA7\x3\x2\x2"+
		"\x2\xA6\xA4\x3\x2\x2\x2\xA7\xA8\a\x65\x2\x2\xA8\x1B\x3\x2\x2\x2\xA9\xAB"+
		"\x5\x6\x4\x2\xAA\xAC\as\x2\x2\xAB\xAA\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2"+
		"\xAC\xAF\x3\x2\x2\x2\xAD\xAE\aZ\x2\x2\xAE\xB0\x5\x46$\x2\xAF\xAD\x3\x2"+
		"\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xB3\x5&\x14\x2\xB2"+
		"\xA9\x3\x2\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\x1D\x3\x2\x2\x2\xB4\xB5\a\x64"+
		"\x2\x2\xB5\xBA\x5\"\x12\x2\xB6\xB7\a`\x2\x2\xB7\xB9\x5\"\x12\x2\xB8\xB6"+
		"\x3\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2"+
		"\x2\xBB\xBD\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD\xBE\a\x65\x2\x2\xBE\x1F"+
		"\x3\x2\x2\x2\xBF\xC9\x5\x6\x4\x2\xC0\xC9\aJ\x2\x2\xC1\xC9\aK\x2\x2\xC2"+
		"\xC9\aL\x2\x2\xC3\xC9\aM\x2\x2\xC4\xC9\aN\x2\x2\xC5\xC9\aO\x2\x2\xC6\xC9"+
		"\aP\x2\x2\xC7\xC9\aQ\x2\x2\xC8\xBF\x3\x2\x2\x2\xC8\xC0\x3\x2\x2\x2\xC8"+
		"\xC1\x3\x2\x2\x2\xC8\xC2\x3\x2\x2\x2\xC8\xC3\x3\x2\x2\x2\xC8\xC4\x3\x2"+
		"\x2\x2\xC8\xC5\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC7\x3\x2\x2\x2\xC9"+
		"!\x3\x2\x2\x2\xCA\xCD\x5H%\x2\xCB\xCD\aI\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC"+
		"\xCB\x3\x2\x2\x2\xCD#\x3\x2\x2\x2\xCE\xD1\x5\"\x12\x2\xCF\xD1\aR\x2\x2"+
		"\xD0\xCE\x3\x2\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1%\x3\x2\x2\x2\xD2\xD3\a_\x2"+
		"\x2\xD3\xD9\x5\x6\x4\x2\xD4\xD5\a_\x2\x2\xD5\xD9\a\x15\x2\x2\xD6\xD7\a"+
		"_\x2\x2\xD7\xD9\a?\x2\x2\xD8\xD2\x3\x2\x2\x2\xD8\xD4\x3\x2\x2\x2\xD8\xD6"+
		"\x3\x2\x2\x2\xD9\'\x3\x2\x2\x2\xDA\xE3\ah\x2\x2\xDB\xE0\x5*\x16\x2\xDC"+
		"\xDD\a`\x2\x2\xDD\xDF\x5*\x16\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE2\x3\x2\x2"+
		"\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0"+
		"\x3\x2\x2\x2\xE3\xDB\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x3\x2\x2"+
		"\x2\xE5\xE6\ai\x2\x2\xE6)\x3\x2\x2\x2\xE7\xE9\x5\x30\x19\x2\xE8\xE7\x3"+
		"\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2"+
		"\xEB\xED\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xEE\x5H%\x2\xEE+\x3\x2\x2"+
		"\x2\xEF\xF3\aU\x2\x2\xF0\xF3\aW\x2\x2\xF1\xF3\x5\x6\x4\x2\xF2\xEF\x3\x2"+
		"\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3-\x3\x2\x2\x2\xF4\xFD"+
		"\ah\x2\x2\xF5\xFA\x5P)\x2\xF6\xF7\a`\x2\x2\xF7\xF9\x5P)\x2\xF8\xF6\x3"+
		"\x2\x2\x2\xF9\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2"+
		"\xFB\xFE\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\xF5\x3\x2\x2\x2\xFD\xFE\x3"+
		"\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\ai\x2\x2\x100/\x3\x2\x2\x2\x101"+
		"\x102\a\"\x2\x2\x102\x31\x3\x2\x2\x2\x103\x104\a\x17\x2\x2\x104\x105\x5"+
		"\x46$\x2\x105\x106\aZ\x2\x2\x106\x10B\x5\x34\x1B\x2\x107\x108\a`\x2\x2"+
		"\x108\x10A\x5\x34\x1B\x2\x109\x107\x3\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B"+
		"\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x33\x3\x2\x2\x2\x10D\x10B"+
		"\x3\x2\x2\x2\x10E\x115\x5\x46$\x2\x10F\x115\a\v\x2\x2\x110\x115\a\f\x2"+
		"\x2\x111\x112\a\x42\x2\x2\x112\x113\ah\x2\x2\x113\x115\ai\x2\x2\x114\x10E"+
		"\x3\x2\x2\x2\x114\x10F\x3\x2\x2\x2\x114\x110\x3\x2\x2\x2\x114\x111\x3"+
		"\x2\x2\x2\x115\x35\x3\x2\x2\x2\x116\x117\aZ\x2\x2\x117\x118\t\a\x2\x2"+
		"\x118\x119\ah\x2\x2\x119\x11A\x5\x38\x1D\x2\x11A\x11B\ai\x2\x2\x11B\x37"+
		"\x3\x2\x2\x2\x11C\x121\x5X-\x2\x11D\x11E\a`\x2\x2\x11E\x120\x5X-\x2\x11F"+
		"\x11D\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122"+
		"\x3\x2\x2\x2\x122\x125\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x11C\x3"+
		"\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x39\x3\x2\x2\x2\x126\x133\aj\x2\x2"+
		"\x127\x133\al\x2\x2\x128\x133\az\x2\x2\x129\x133\ax\x2\x2\x12A\x133\a"+
		"y\x2\x2\x12B\x133\an\x2\x2\x12C\x133\am\x2\x2\x12D\x133\a[\x2\x2\x12E"+
		"\x12F\a\x66\x2\x2\x12F\x133\ag\x2\x2\x130\x131\aw\x2\x2\x131\x133\aw\x2"+
		"\x2\x132\x126\x3\x2\x2\x2\x132\x127\x3\x2\x2\x2\x132\x128\x3\x2\x2\x2"+
		"\x132\x129\x3\x2\x2\x2\x132\x12A\x3\x2\x2\x2\x132\x12B\x3\x2\x2\x2\x132"+
		"\x12C\x3\x2\x2\x2\x132\x12D\x3\x2\x2\x2\x132\x12E\x3\x2\x2\x2\x132\x130"+
		"\x3\x2\x2\x2\x133;\x3\x2\x2\x2\x134\x138\a\x62\x2\x2\x135\x137\x5T+\x2"+
		"\x136\x135\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138"+
		"\x139\x3\x2\x2\x2\x139\x13B\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13B\x13C"+
		"\a\x63\x2\x2\x13C=\x3\x2\x2\x2\x13D\x13E\a\n\x2\x2\x13E\x13F\x5\b\x5\x2"+
		"\x13F\x143\a\x62\x2\x2\x140\x142\x5\x4\x3\x2\x141\x140\x3\x2\x2\x2\x142"+
		"\x145\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x149"+
		"\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x146\x148\x5> \x2\x147\x146\x3\x2\x2"+
		"\x2\x148\x14B\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2"+
		"\x14A\x14C\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14C\x14D\a\x63\x2\x2\x14D"+
		"\x1D8\x3\x2\x2\x2\x14E\x150\x5\n\x6\x2\x14F\x14E\x3\x2\x2\x2\x150\x153"+
		"\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x154\x3"+
		"\x2\x2\x2\x153\x151\x3\x2\x2\x2\x154\x156\x5\xE\b\x2\x155\x157\x5\x10"+
		"\t\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x159\x3\x2\x2\x2"+
		"\x158\x15A\x5\x12\n\x2\x159\x158\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A"+
		"\x15C\x3\x2\x2\x2\x15B\x15D\a@\x2\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D\x3"+
		"\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x15F\a\v\x2\x2\x15F\x161\x5\x6\x4"+
		"\x2\x160\x162\x5\x1A\xE\x2\x161\x160\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2"+
		"\x162\x164\x3\x2\x2\x2\x163\x165\x5\f\a\x2\x164\x163\x3\x2\x2\x2\x164"+
		"\x165\x3\x2\x2\x2\x165\x169\x3\x2\x2\x2\x166\x168\x5J&\x2\x167\x166\x3"+
		"\x2\x2\x2\x168\x16B\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x169\x16A\x3\x2"+
		"\x2\x2\x16A\x16C\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x170\a\x62\x2"+
		"\x2\x16D\x16F\x5N(\x2\x16E\x16D\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170"+
		"\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2\x172\x170"+
		"\x3\x2\x2\x2\x173\x174\a\x63\x2\x2\x174\x1D8\x3\x2\x2\x2\x175\x177\x5"+
		"\n\x6\x2\x176\x175\x3\x2\x2\x2\x177\x17A\x3\x2\x2\x2\x178\x176\x3\x2\x2"+
		"\x2\x178\x179\x3\x2\x2\x2\x179\x17B\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2"+
		"\x17B\x17D\x5\xE\b\x2\x17C\x17E\x5\x10\t\x2\x17D\x17C\x3\x2\x2\x2\x17D"+
		"\x17E\x3\x2\x2\x2\x17E\x180\x3\x2\x2\x2\x17F\x181\a@\x2\x2\x180\x17F\x3"+
		"\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\a\f\x2"+
		"\x2\x183\x185\x5\x6\x4\x2\x184\x186\x5\x1A\xE\x2\x185\x184\x3\x2\x2\x2"+
		"\x185\x186\x3\x2\x2\x2\x186\x188\x3\x2\x2\x2\x187\x189\x5\f\a\x2\x188"+
		"\x187\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x18D\x3\x2\x2\x2\x18A\x18C"+
		"\x5J&\x2\x18B\x18A\x3\x2\x2\x2\x18C\x18F\x3\x2\x2\x2\x18D\x18B\x3\x2\x2"+
		"\x2\x18D\x18E\x3\x2\x2\x2\x18E\x190\x3\x2\x2\x2\x18F\x18D\x3\x2\x2\x2"+
		"\x190\x194\a\x62\x2\x2\x191\x193\x5N(\x2\x192\x191\x3\x2\x2\x2\x193\x196"+
		"\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195\x197\x3"+
		"\x2\x2\x2\x196\x194\x3\x2\x2\x2\x197\x198\a\x63\x2\x2\x198\x1D8\x3\x2"+
		"\x2\x2\x199\x19B\x5\n\x6\x2\x19A\x199\x3\x2\x2\x2\x19B\x19E\x3\x2\x2\x2"+
		"\x19C\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19F\x3\x2\x2\x2\x19E"+
		"\x19C\x3\x2\x2\x2\x19F\x1A0\x5\xE\b\x2\x1A0\x1A1\t\b\x2\x2\x1A1\x1A4\x5"+
		"\x6\x4\x2\x1A2\x1A3\aZ\x2\x2\x1A3\x1A5\x5H%\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4"+
		"\x1A5\x3\x2\x2\x2\x1A5\x1A8\x3\x2\x2\x2\x1A6\x1A7\a|\x2\x2\x1A7\x1A9\x5"+
		"X-\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2"+
		"\x1AA\x1AB\aY\x2\x2\x1AB\x1D8\x3\x2\x2\x2\x1AC\x1AE\x5\n\x6\x2\x1AD\x1AC"+
		"\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2\x1AF\x1B0\x3"+
		"\x2\x2\x2\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2\x1B4\x5\xE"+
		"\b\x2\x1B3\x1B5\x5\x10\t\x2\x1B4\x1B3\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2"+
		"\x1B5\x1B7\x3\x2\x2\x2\x1B6\x1B8\x5\x18\r\x2\x1B7\x1B6\x3\x2\x2\x2\x1B7"+
		"\x1B8\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BB\x5\x6\x4\x2\x1BA\x1BC"+
		"\x5\x1E\x10\x2\x1BB\x1BA\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BD\x3"+
		"\x2\x2\x2\x1BD\x1BE\x5.\x18\x2\x1BE\x1BF\a\x61\x2\x2\x1BF\x1C3\x5$\x13"+
		"\x2\x1C0\x1C2\x5J&\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C5\x3\x2\x2\x2\x1C3"+
		"\x1C1\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C9\x3\x2\x2\x2\x1C5\x1C3"+
		"\x3\x2\x2\x2\x1C6\x1C8\x5@!\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1CB\x3\x2\x2"+
		"\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CC\x3\x2\x2\x2"+
		"\x1CB\x1C9\x3\x2\x2\x2\x1CC\x1CD\x5R*\x2\x1CD\x1D8\x3\x2\x2\x2\x1CE\x1CF"+
		"\a\x1A\x2\x2\x1CF\x1D3\a\x62\x2\x2\x1D0\x1D2\x5> \x2\x1D1\x1D0\x3\x2\x2"+
		"\x2\x1D2\x1D5\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2"+
		"\x1D4\x1D6\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1D8\a\x63\x2\x2\x1D7"+
		"\x13D\x3\x2\x2\x2\x1D7\x151\x3\x2\x2\x2\x1D7\x178\x3\x2\x2\x2\x1D7\x19C"+
		"\x3\x2\x2\x2\x1D7\x1AF\x3\x2\x2\x2\x1D7\x1CE\x3\x2\x2\x2\x1D8?\x3\x2\x2"+
		"\x2\x1D9\x1DA\aG\x2\x2\x1DA\x1DE\x5X-\x2\x1DB\x1DC\aH\x2\x2\x1DC\x1DE"+
		"\x5X-\x2\x1DD\x1D9\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DE\x41\x3\x2\x2"+
		"\x2\x1DF\x1E4\x5 \x11\x2\x1E0\x1E1\x5 \x11\x2\x1E1\x1E2\x5\x1E\x10\x2"+
		"\x1E2\x1E4\x3\x2\x2\x2\x1E3\x1DF\x3\x2\x2\x2\x1E3\x1E0\x3\x2\x2\x2\x1E4"+
		"\x43\x3\x2\x2\x2\x1E5\x1E6\b#\x1\x2\x1E6\x1E7\x5\x42\"\x2\x1E7\x1ED\x3"+
		"\x2\x2\x2\x1E8\x1E9\f\x3\x2\x2\x1E9\x1EA\a[\x2\x2\x1EA\x1EC\x5\x42\"\x2"+
		"\x1EB\x1E8\x3\x2\x2\x2\x1EC\x1EF\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED"+
		"\x1EE\x3\x2\x2\x2\x1EE\x45\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1F0\x1F1"+
		"\b$\x1\x2\x1F1\x1F3\aj\x2\x2\x1F2\x1F4\a@\x2\x2\x1F3\x1F2\x3\x2\x2\x2"+
		"\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x20B\x5\x46$\x5\x1F6"+
		"\x20B\x5\x44#\x2\x1F7\x1F8\a\x66\x2\x2\x1F8\x1FD\x5\x46$\x2\x1F9\x1FA"+
		"\a`\x2\x2\x1FA\x1FC\x5\x46$\x2\x1FB\x1F9\x3\x2\x2\x2\x1FC\x1FF\x3\x2\x2"+
		"\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x200\x3\x2\x2\x2"+
		"\x1FF\x1FD\x3\x2\x2\x2\x200\x201\ag\x2\x2\x201\x205\x3\x2\x2\x2\x202\x203"+
		"\a\x66\x2\x2\x203\x205\ag\x2\x2\x204\x1F7\x3\x2\x2\x2\x204\x202\x3\x2"+
		"\x2\x2\x205\x20B\x3\x2\x2\x2\x206\x207\x5(\x15\x2\x207\x208\a\x61\x2\x2"+
		"\x208\x209\x5$\x13\x2\x209\x20B\x3\x2\x2\x2\x20A\x1F0\x3\x2\x2\x2\x20A"+
		"\x1F6\x3\x2\x2\x2\x20A\x204\x3\x2\x2\x2\x20A\x206\x3\x2\x2\x2\x20B\x210"+
		"\x3\x2\x2\x2\x20C\x20D\f\x6\x2\x2\x20D\x20F\an\x2\x2\x20E\x20C\x3\x2\x2"+
		"\x2\x20F\x212\x3\x2\x2\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2"+
		"\x211G\x3\x2\x2\x2\x212\x210\x3\x2\x2\x2\x213\x215\x5&\x14\x2\x214\x213"+
		"\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x217\x3\x2\x2\x2\x216\x218\a@"+
		"\x2\x2\x217\x216\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x219\x3\x2\x2"+
		"\x2\x219\x223\x5\x46$\x2\x21A\x21C\a\x44\x2\x2\x21B\x21D\a\x1B\x2\x2\x21C"+
		"\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21F\x3\x2\x2\x2\x21E\x220"+
		"\a@\x2\x2\x21F\x21E\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x221\x3\x2"+
		"\x2\x2\x221\x223\x5\x46$\x2\x222\x214\x3\x2\x2\x2\x222\x21A\x3\x2\x2\x2"+
		"\x223I\x3\x2\x2\x2\x224\x225\a\x17\x2\x2\x225\x226\x5\x1C\xF\x2\x226\x227"+
		"\aZ\x2\x2\x227\x22C\x5L\'\x2\x228\x229\a`\x2\x2\x229\x22B\x5L\'\x2\x22A"+
		"\x228\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22C\x22D"+
		"\x3\x2\x2\x2\x22D\x235\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F\x230\a\x17"+
		"\x2\x2\x230\x231\x5\x1C\xF\x2\x231\x232\t\t\x2\x2\x232\x233\aU\x2\x2\x233"+
		"\x235\x3\x2\x2\x2\x234\x224\x3\x2\x2\x2\x234\x22F\x3\x2\x2\x2\x235K\x3"+
		"\x2\x2\x2\x236\x237\a\xE\x2\x2\x237\x238\ah\x2\x2\x238\x23C\ai\x2\x2\x239"+
		"\x23C\x5\x46$\x2\x23A\x23C\x5\x1C\xF\x2\x23B\x236\x3\x2\x2\x2\x23B\x239"+
		"\x3\x2\x2\x2\x23B\x23A\x3\x2\x2\x2\x23CM\x3\x2\x2\x2\x23D\x23F\x5\n\x6"+
		"\x2\x23E\x23D\x3\x2\x2\x2\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2\x2"+
		"\x240\x241\x3\x2\x2\x2\x241\x243\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x243"+
		"\x245\x5\xE\b\x2\x244\x246\x5\x10\t\x2\x245\x244\x3\x2\x2\x2\x245\x246"+
		"\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x249\a\xE\x2\x2\x248\x24A\x5\x6"+
		"\x4\x2\x249\x248\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x24A\x24B\x3\x2\x2"+
		"\x2\x24B\x24E\x5.\x18\x2\x24C\x24D\a\x61\x2\x2\x24D\x24F\x5$\x13\x2\x24E"+
		"\x24C\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x253\x3\x2\x2\x2\x250\x252"+
		"\x5\x32\x1A\x2\x251\x250\x3\x2\x2\x2\x252\x255\x3\x2\x2\x2\x253\x251\x3"+
		"\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x257\x3\x2\x2\x2\x255\x253\x3\x2"+
		"\x2\x2\x256\x258\x5\x36\x1C\x2\x257\x256\x3\x2\x2\x2\x257\x258\x3\x2\x2"+
		"\x2\x258\x25C\x3\x2\x2\x2\x259\x25B\x5@!\x2\x25A\x259\x3\x2\x2\x2\x25B"+
		"\x25E\x3\x2\x2\x2\x25C\x25A\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25F"+
		"\x3\x2\x2\x2\x25E\x25C\x3\x2\x2\x2\x25F\x260\x5R*\x2\x260\x382\x3\x2\x2"+
		"\x2\x261\x263\x5\n\x6\x2\x262\x261\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2\x264"+
		"\x262\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\x3\x2\x2\x2\x266\x264"+
		"\x3\x2\x2\x2\x267\x269\x5\xE\b\x2\x268\x26A\x5\x10\t\x2\x269\x268\x3\x2"+
		"\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\x5\x16\f"+
		"\x2\x26C\x26D\a\xE\x2\x2\x26D\x26E\a\x42\x2\x2\x26E\x271\x5.\x18\x2\x26F"+
		"\x270\a\x61\x2\x2\x270\x272\x5$\x13\x2\x271\x26F\x3\x2\x2\x2\x271\x272"+
		"\x3\x2\x2\x2\x272\x276\x3\x2\x2\x2\x273\x275\x5\x32\x1A\x2\x274\x273\x3"+
		"\x2\x2\x2\x275\x278\x3\x2\x2\x2\x276\x274\x3\x2\x2\x2\x276\x277\x3\x2"+
		"\x2\x2\x277\x27A\x3\x2\x2\x2\x278\x276\x3\x2\x2\x2\x279\x27B\x5\x36\x1C"+
		"\x2\x27A\x279\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27F\x3\x2\x2\x2"+
		"\x27C\x27E\x5@!\x2\x27D\x27C\x3\x2\x2\x2\x27E\x281\x3\x2\x2\x2\x27F\x27D"+
		"\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x282\x3\x2\x2\x2\x281\x27F\x3"+
		"\x2\x2\x2\x282\x283\x5R*\x2\x283\x382\x3\x2\x2\x2\x284\x286\x5\n\x6\x2"+
		"\x285\x284\x3\x2\x2\x2\x286\x289\x3\x2\x2\x2\x287\x285\x3\x2\x2\x2\x287"+
		"\x288\x3\x2\x2\x2\x288\x28A\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2\x28A\x28C"+
		"\x5\xE\b\x2\x28B\x28D\x5\x10\t\x2\x28C\x28B\x3\x2\x2\x2\x28C\x28D\x3\x2"+
		"\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x28F\a\x14\x2\x2\x28F\x290\x5.\x18\x2"+
		"\x290\x291\x5R*\x2\x291\x382\x3\x2\x2\x2\x292\x294\x5\n\x6\x2\x293\x292"+
		"\x3\x2\x2\x2\x294\x297\x3\x2\x2\x2\x295\x293\x3\x2\x2\x2\x295\x296\x3"+
		"\x2\x2\x2\x296\x298\x3\x2\x2\x2\x297\x295\x3\x2\x2\x2\x298\x29A\x5\xE"+
		"\b\x2\x299\x29B\x5\x10\t\x2\x29A\x299\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2"+
		"\x29B\x29C\x3\x2\x2\x2\x29C\x29D\x5\x16\f\x2\x29D\x29F\a\x35\x2\x2\x29E"+
		"\x2A0\x5\x1E\x10\x2\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A1"+
		"\x3\x2\x2\x2\x2A1\x2A2\x5.\x18\x2\x2A2\x2A3\a\x61\x2\x2\x2A3\x2A7\x5$"+
		"\x13\x2\x2A4\x2A6\x5J&\x2\x2A5\x2A4\x3\x2\x2\x2\x2A6\x2A9\x3\x2\x2\x2"+
		"\x2A7\x2A5\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2AD\x3\x2\x2\x2\x2A9"+
		"\x2A7\x3\x2\x2\x2\x2AA\x2AC\x5@!\x2\x2AB\x2AA\x3\x2\x2\x2\x2AC\x2AF\x3"+
		"\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2B0\x3\x2"+
		"\x2\x2\x2AF\x2AD\x3\x2\x2\x2\x2B0\x2B1\x5R*\x2\x2B1\x382\x3\x2\x2\x2\x2B2"+
		"\x2B4\x5\n\x6\x2\x2B3\x2B2\x3\x2\x2\x2\x2B4\x2B7\x3\x2\x2\x2\x2B5\x2B3"+
		"\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B8\x3\x2\x2\x2\x2B7\x2B5\x3"+
		"\x2\x2\x2\x2B8\x2B9\x5\xE\b\x2\x2B9\x2BB\t\b\x2\x2\x2BA\x2BC\a>\x2\x2"+
		"\x2BB\x2BA\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD"+
		"\x2C0\x5\x6\x4\x2\x2BE\x2BF\aZ\x2\x2\x2BF\x2C1\x5H%\x2\x2C0\x2BE\x3\x2"+
		"\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C4\x3\x2\x2\x2\x2C2\x2C3\a|\x2\x2"+
		"\x2C3\x2C5\x5X-\x2\x2C4\x2C2\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6"+
		"\x3\x2\x2\x2\x2C6\x2C7\aY\x2\x2\x2C7\x382\x3\x2\x2\x2\x2C8\x2CA\x5\n\x6"+
		"\x2\x2C9\x2C8\x3\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB\x2C9\x3\x2\x2\x2"+
		"\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CE\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE"+
		"\x2D0\x5\xE\b\x2\x2CF\x2D1\x5\x14\v\x2\x2D0\x2CF\x3\x2\x2\x2\x2D0\x2D1"+
		"\x3\x2\x2\x2\x2D1\x2D3\x3\x2\x2\x2\x2D2\x2D4\x5\x10\t\x2\x2D3\x2D2\x3"+
		"\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D6\x3\x2\x2\x2\x2D5\x2D7\x5\x18"+
		"\r\x2\x2D6\x2D5\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2"+
		"\x2D8\x2D9\t\n\x2\x2\x2D9\x2DB\x5\x6\x4\x2\x2DA\x2DC\x5\x1E\x10\x2\x2DB"+
		"\x2DA\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DE"+
		"\x5.\x18\x2\x2DE\x2DF\a\x61\x2\x2\x2DF\x2E3\x5$\x13\x2\x2E0\x2E2\x5J&"+
		"\x2\x2E1\x2E0\x3\x2\x2\x2\x2E2\x2E5\x3\x2\x2\x2\x2E3\x2E1\x3\x2\x2\x2"+
		"\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E9\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E6"+
		"\x2E8\x5@!\x2\x2E7\x2E6\x3\x2\x2\x2\x2E8\x2EB\x3\x2\x2\x2\x2E9\x2E7\x3"+
		"\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EC\x3\x2\x2\x2\x2EB\x2E9\x3\x2"+
		"\x2\x2\x2EC\x2ED\x5R*\x2\x2ED\x382\x3\x2\x2\x2\x2EE\x2F0\x5\n\x6\x2\x2EF"+
		"\x2EE\x3\x2\x2\x2\x2F0\x2F3\x3\x2\x2\x2\x2F1\x2EF\x3\x2\x2\x2\x2F1\x2F2"+
		"\x3\x2\x2\x2\x2F2\x2F4\x3\x2\x2\x2\x2F3\x2F1\x3\x2\x2\x2\x2F4\x2F6\x5"+
		"\xE\b\x2\x2F5\x2F7\x5\x14\v\x2\x2F6\x2F5\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2"+
		"\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8\x2FA\x5\x10\t\x2\x2F9\x2F8\x3\x2\x2\x2"+
		"\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FC\x3\x2\x2\x2\x2FB\x2FD\x5\x18\r\x2\x2FC"+
		"\x2FB\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FF"+
		"\t\n\x2\x2\x2FF\x300\a\x66\x2\x2\x300\x302\ag\x2\x2\x301\x303\x5\x1E\x10"+
		"\x2\x302\x301\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2"+
		"\x304\x305\x5.\x18\x2\x305\x306\a\x61\x2\x2\x306\x30A\x5$\x13\x2\x307"+
		"\x309\x5J&\x2\x308\x307\x3\x2\x2\x2\x309\x30C\x3\x2\x2\x2\x30A\x308\x3"+
		"\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x310\x3\x2\x2\x2\x30C\x30A\x3\x2"+
		"\x2\x2\x30D\x30F\x5@!\x2\x30E\x30D\x3\x2\x2\x2\x30F\x312\x3\x2\x2\x2\x310"+
		"\x30E\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x313\x3\x2\x2\x2\x312\x310"+
		"\x3\x2\x2\x2\x313\x314\x5R*\x2\x314\x382\x3\x2\x2\x2\x315\x317\x5\n\x6"+
		"\x2\x316\x315\x3\x2\x2\x2\x317\x31A\x3\x2\x2\x2\x318\x316\x3\x2\x2\x2"+
		"\x318\x319\x3\x2\x2\x2\x319\x31B\x3\x2\x2\x2\x31A\x318\x3\x2\x2\x2\x31B"+
		"\x31D\x5\xE\b\x2\x31C\x31E\x5\x14\v\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E"+
		"\x3\x2\x2\x2\x31E\x320\x3\x2\x2\x2\x31F\x321\x5\x10\t\x2\x320\x31F\x3"+
		"\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x323\x3\x2\x2\x2\x322\x324\x5\x18"+
		"\r\x2\x323\x322\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2"+
		"\x325\x327\x5\x6\x4\x2\x326\x328\x5\x1E\x10\x2\x327\x326\x3\x2\x2\x2\x327"+
		"\x328\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32A\x5.\x18\x2\x32A\x32B"+
		"\a\x61\x2\x2\x32B\x32F\x5$\x13\x2\x32C\x32E\x5J&\x2\x32D\x32C\x3\x2\x2"+
		"\x2\x32E\x331\x3\x2\x2\x2\x32F\x32D\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2"+
		"\x330\x335\x3\x2\x2\x2\x331\x32F\x3\x2\x2\x2\x332\x334\x5@!\x2\x333\x332"+
		"\x3\x2\x2\x2\x334\x337\x3\x2\x2\x2\x335\x333\x3\x2\x2\x2\x335\x336\x3"+
		"\x2\x2\x2\x336\x338\x3\x2\x2\x2\x337\x335\x3\x2\x2\x2\x338\x339\x5R*\x2"+
		"\x339\x382\x3\x2\x2\x2\x33A\x33C\x5\n\x6\x2\x33B\x33A\x3\x2\x2\x2\x33C"+
		"\x33F\x3\x2\x2\x2\x33D\x33B\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x340"+
		"\x3\x2\x2\x2\x33F\x33D\x3\x2\x2\x2\x340\x342\x5\xE\b\x2\x341\x343\x5\x14"+
		"\v\x2\x342\x341\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2\x343\x345\x3\x2\x2\x2"+
		"\x344\x346\x5\x10\t\x2\x345\x344\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346"+
		"\x348\x3\x2\x2\x2\x347\x349\x5\x18\r\x2\x348\x347\x3\x2\x2\x2\x348\x349"+
		"\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34A\x34B\a\x19\x2\x2\x34B\x34C\x5"+
		":\x1E\x2\x34C\x34D\x5.\x18\x2\x34D\x34E\a\x61\x2\x2\x34E\x352\x5$\x13"+
		"\x2\x34F\x351\x5J&\x2\x350\x34F\x3\x2\x2\x2\x351\x354\x3\x2\x2\x2\x352"+
		"\x350\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353\x358\x3\x2\x2\x2\x354\x352"+
		"\x3\x2\x2\x2\x355\x357\x5@!\x2\x356\x355\x3\x2\x2\x2\x357\x35A\x3\x2\x2"+
		"\x2\x358\x356\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35B\x3\x2\x2\x2"+
		"\x35A\x358\x3\x2\x2\x2\x35B\x35C\x5R*\x2\x35C\x382\x3\x2\x2\x2\x35D\x35F"+
		"\x5\n\x6\x2\x35E\x35D\x3\x2\x2\x2\x35F\x362\x3\x2\x2\x2\x360\x35E\x3\x2"+
		"\x2\x2\x360\x361\x3\x2\x2\x2\x361\x363\x3\x2\x2\x2\x362\x360\x3\x2\x2"+
		"\x2\x363\x365\x5\xE\b\x2\x364\x366\x5\x10\t\x2\x365\x364\x3\x2\x2\x2\x365"+
		"\x366\x3\x2\x2\x2\x366\x368\x3\x2\x2\x2\x367\x369\x5\x12\n\x2\x368\x367"+
		"\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A\x36B\a\v"+
		"\x2\x2\x36B\x36D\x5\x6\x4\x2\x36C\x36E\x5\x1A\xE\x2\x36D\x36C\x3\x2\x2"+
		"\x2\x36D\x36E\x3\x2\x2\x2\x36E\x370\x3\x2\x2\x2\x36F\x371\x5\f\a\x2\x370"+
		"\x36F\x3\x2\x2\x2\x370\x371\x3\x2\x2\x2\x371\x375\x3\x2\x2\x2\x372\x374"+
		"\x5J&\x2\x373\x372\x3\x2\x2\x2\x374\x377\x3\x2\x2\x2\x375\x373\x3\x2\x2"+
		"\x2\x375\x376\x3\x2\x2\x2\x376\x378\x3\x2\x2\x2\x377\x375\x3\x2\x2\x2"+
		"\x378\x37C\a\x62\x2\x2\x379\x37B\x5N(\x2\x37A\x379\x3\x2\x2\x2\x37B\x37E"+
		"\x3\x2\x2\x2\x37C\x37A\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37F\x3"+
		"\x2\x2\x2\x37E\x37C\x3\x2\x2\x2\x37F\x380\a\x63\x2\x2\x380\x382\x3\x2"+
		"\x2\x2\x381\x240\x3\x2\x2\x2\x381\x264\x3\x2\x2\x2\x381\x287\x3\x2\x2"+
		"\x2\x381\x295\x3\x2\x2\x2\x381\x2B5\x3\x2\x2\x2\x381\x2CB\x3\x2\x2\x2"+
		"\x381\x2F1\x3\x2\x2\x2\x381\x318\x3\x2\x2\x2\x381\x33D\x3\x2\x2\x2\x381"+
		"\x360\x3\x2\x2\x2\x382O\x3\x2\x2\x2\x383\x385\a\x1B\x2\x2\x384\x383\x3"+
		"\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x389\x3\x2\x2\x2\x386\x388\x5\x30"+
		"\x19\x2\x387\x386\x3\x2\x2\x2\x388\x38B\x3\x2\x2\x2\x389\x387\x3\x2\x2"+
		"\x2\x389\x38A\x3\x2\x2\x2\x38A\x38D\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2"+
		"\x38C\x38E\x5\x6\x4\x2\x38D\x38C\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E"+
		"\x38F\x3\x2\x2\x2\x38F\x390\aZ\x2\x2\x390\x399\x5H%\x2\x391\x393\a\x44"+
		"\x2\x2\x392\x391\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x395\x3\x2\x2"+
		"\x2\x394\x396\a@\x2\x2\x395\x394\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396"+
		"\x397\x3\x2\x2\x2\x397\x399\a\x15\x2\x2\x398\x384\x3\x2\x2\x2\x398\x392"+
		"\x3\x2\x2\x2\x399Q\x3\x2\x2\x2\x39A\x39E\a\x62\x2\x2\x39B\x39D\x5T+\x2"+
		"\x39C\x39B\x3\x2\x2\x2\x39D\x3A0\x3\x2\x2\x2\x39E\x39C\x3\x2\x2\x2\x39E"+
		"\x39F\x3\x2\x2\x2\x39F\x3A1\x3\x2\x2\x2\x3A0\x39E\x3\x2\x2\x2\x3A1\x3A4"+
		"\a\x63\x2\x2\x3A2\x3A4\aY\x2\x2\x3A3\x39A\x3\x2\x2\x2\x3A3\x3A2\x3\x2"+
		"\x2\x2\x3A4S\x3\x2\x2\x2\x3A5\x3A6\x5V,\x2\x3A6\x3A7\aY\x2\x2\x3A7\x3E1"+
		"\x3\x2\x2\x2\x3A8\x3A9\a>\x2\x2\x3A9\x3AD\a\x62\x2\x2\x3AA\x3AC\x5T+\x2"+
		"\x3AB\x3AA\x3\x2\x2\x2\x3AC\x3AF\x3\x2\x2\x2\x3AD\x3AB\x3\x2\x2\x2\x3AD"+
		"\x3AE\x3\x2\x2\x2\x3AE\x3B0\x3\x2\x2\x2\x3AF\x3AD\x3\x2\x2\x2\x3B0\x3E1"+
		"\a\x63\x2\x2\x3B1\x3E1\x5<\x1F\x2\x3B2\x3E1\aY\x2\x2\x3B3\x3B4\x5X-\x2"+
		"\x3B4\x3B5\aY\x2\x2\x3B5\x3E1\x3\x2\x2\x2\x3B6\x3B8\a,\x2\x2\x3B7\x3B9"+
		"\x5X-\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2"+
		"\x2\x3BA\x3E1\aY\x2\x2\x3BB\x3BC\a\x32\x2\x2\x3BC\x3BD\x5X-\x2\x3BD\x3BE"+
		"\aY\x2\x2\x3BE\x3E1\x3\x2\x2\x2\x3BF\x3C0\a%\x2\x2\x3C0\x3C1\x5X-\x2\x3C1"+
		"\x3C4\x5<\x1F\x2\x3C2\x3C3\a&\x2\x2\x3C3\x3C5\x5<\x1F\x2\x3C4\x3C2\x3"+
		"\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3E1\x3\x2\x2\x2\x3C6\x3C7\a%\x2"+
		"\x2\x3C7\x3C8\x5V,\x2\x3C8\x3CB\x5<\x1F\x2\x3C9\x3CA\a&\x2\x2\x3CA\x3CC"+
		"\x5<\x1F\x2\x3CB\x3C9\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3E1\x3\x2"+
		"\x2\x2\x3CD\x3D0\a\'\x2\x2\x3CE\x3D1\x5V,\x2\x3CF\x3D1\a\x84\x2\x2\x3D0"+
		"\x3CE\x3\x2\x2\x2\x3D0\x3CF\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3D3"+
		"\a(\x2\x2\x3D3\x3D4\x5X-\x2\x3D4\x3D5\x5<\x1F\x2\x3D5\x3E1\x3\x2\x2\x2"+
		"\x3D6\x3D7\a$\x2\x2\x3D7\x3D8\x5X-\x2\x3D8\x3D9\x5<\x1F\x2\x3D9\x3E1\x3"+
		"\x2\x2\x2\x3DA\x3DB\a\x14\x2\x2\x3DB\x3DC\x5X-\x2\x3DC\x3DD\aY\x2\x2\x3DD"+
		"\x3E1\x3\x2\x2\x2\x3DE\x3DF\a+\x2\x2\x3DF\x3E1\aY\x2\x2\x3E0\x3A5\x3\x2"+
		"\x2\x2\x3E0\x3A8\x3\x2\x2\x2\x3E0\x3B1\x3\x2\x2\x2\x3E0\x3B2\x3\x2\x2"+
		"\x2\x3E0\x3B3\x3\x2\x2\x2\x3E0\x3B6\x3\x2\x2\x2\x3E0\x3BB\x3\x2\x2\x2"+
		"\x3E0\x3BF\x3\x2\x2\x2\x3E0\x3C6\x3\x2\x2\x2\x3E0\x3CD\x3\x2\x2\x2\x3E0"+
		"\x3D6\x3\x2\x2\x2\x3E0\x3DA\x3\x2\x2\x2\x3E0\x3DE\x3\x2\x2\x2\x3E1U\x3"+
		"\x2\x2\x2\x3E2\x3E3\t\b\x2\x2\x3E3\x3E5\x5\x6\x4\x2\x3E4\x3E6\an\x2\x2"+
		"\x3E5\x3E4\x3\x2\x2\x2\x3E5\x3E6\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7"+
		"\x3E8\aZ\x2\x2\x3E8\x3EB\x5H%\x2\x3E9\x3EA\a|\x2\x2\x3EA\x3EC\x5X-\x2"+
		"\x3EB\x3E9\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC\x3FF\x3\x2\x2\x2\x3ED"+
		"\x3EE\t\b\x2\x2\x3EE\x3EF\a\x66\x2\x2\x3EF\x3F4\x5\x6\x4\x2\x3F0\x3F1"+
		"\a`\x2\x2\x3F1\x3F3\x5\x6\x4\x2\x3F2\x3F0\x3\x2\x2\x2\x3F3\x3F6\x3\x2"+
		"\x2\x2\x3F4\x3F2\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5\x3F7\x3\x2\x2"+
		"\x2\x3F6\x3F4\x3\x2\x2\x2\x3F7\x3F8\ag\x2\x2\x3F8\x3F9\aZ\x2\x2\x3F9\x3FC"+
		"\x5H%\x2\x3FA\x3FB\a|\x2\x2\x3FB\x3FD\x5X-\x2\x3FC\x3FA\x3\x2\x2\x2\x3FC"+
		"\x3FD\x3\x2\x2\x2\x3FD\x3FF\x3\x2\x2\x2\x3FE\x3E2\x3\x2\x2\x2\x3FE\x3ED"+
		"\x3\x2\x2\x2\x3FFW\x3\x2\x2\x2\x400\x401\b-\x1\x2\x401\x402\a\x46\x2\x2"+
		"\x402\x459\x5X- \x403\x404\t\v\x2\x2\x404\x459\x5X-\x1E\x405\x406\t\f"+
		"\x2\x2\x406\x459\x5X-\xF\x407\x408\ah\x2\x2\x408\x409\x5X-\x2\x409\x40A"+
		"\ai\x2\x2\x40A\x459\x3\x2\x2\x2\x40B\x40C\aw\x2\x2\x40C\x40D\x5X-\x2\x40D"+
		"\x40E\aw\x2\x2\x40E\x459\x3\x2\x2\x2\x40F\x414\a\xE\x2\x2\x410\x411\a"+
		"h\x2\x2\x411\x412\x5\x38\x1D\x2\x412\x413\ai\x2\x2\x413\x415\x3\x2\x2"+
		"\x2\x414\x410\x3\x2\x2\x2\x414\x415\x3\x2\x2\x2\x415\x418\x3\x2\x2\x2"+
		"\x416\x419\x5\x44#\x2\x417\x419\a\x42\x2\x2\x418\x416\x3\x2\x2\x2\x418"+
		"\x417\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41B\ah\x2\x2\x41B\x41C\x5"+
		"\x38\x1D\x2\x41C\x41D\ai\x2\x2\x41D\x459\x3\x2\x2\x2\x41E\x420\a\xE\x2"+
		"\x2\x41F\x421\x5\x1E\x10\x2\x420\x41F\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2"+
		"\x421\x422\x3\x2\x2\x2\x422\x423\ah\x2\x2\x423\x424\x5\x38\x1D\x2\x424"+
		"\x425\ai\x2\x2\x425\x459\x3\x2\x2\x2\x426\x428\a\xE\x2\x2\x427\x429\x5"+
		"\f\a\x2\x428\x427\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429\x42A\x3\x2\x2"+
		"\x2\x42A\x42B\ah\x2\x2\x42B\x42C\x5\x38\x1D\x2\x42C\x42D\ai\x2\x2\x42D"+
		"\x431\a\x62\x2\x2\x42E\x430\x5N(\x2\x42F\x42E\x3\x2\x2\x2\x430\x433\x3"+
		"\x2\x2\x2\x431\x42F\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432\x434\x3\x2"+
		"\x2\x2\x433\x431\x3\x2\x2\x2\x434\x435\a\x63\x2\x2\x435\x459\x3\x2\x2"+
		"\x2\x436\x437\a\x14\x2\x2\x437\x438\ah\x2\x2\x438\x439\x5\x38\x1D\x2\x439"+
		"\x43A\ai\x2\x2\x43A\x459\x3\x2\x2\x2\x43B\x43E\x5\x6\x4\x2\x43C\x43E\x5"+
		".\x18\x2\x43D\x43B\x3\x2\x2\x2\x43D\x43C\x3\x2\x2\x2\x43E\x43F\x3\x2\x2"+
		"\x2\x43F\x449\a\x61\x2\x2\x440\x44A\x5X-\x2\x441\x445\a\x62\x2\x2\x442"+
		"\x444\x5T+\x2\x443\x442\x3\x2\x2\x2\x444\x447\x3\x2\x2\x2\x445\x443\x3"+
		"\x2\x2\x2\x445\x446\x3\x2\x2\x2\x446\x448\x3\x2\x2\x2\x447\x445\x3\x2"+
		"\x2\x2\x448\x44A\a\x63\x2\x2\x449\x440\x3\x2\x2\x2\x449\x441\x3\x2\x2"+
		"\x2\x44A\x459\x3\x2\x2\x2\x44B\x459\x5\x42\"\x2\x44C\x459\aV\x2\x2\x44D"+
		"\x459\a\x15\x2\x2\x44E\x459\aT\x2\x2\x44F\x459\aU\x2\x2\x450\x459\a\x16"+
		"\x2\x2\x451\x459\aW\x2\x2\x452\x459\aX\x2\x2\x453\x454\a>\x2\x2\x454\x455"+
		"\ah\x2\x2\x455\x456\x5X-\x2\x456\x457\ai\x2\x2\x457\x459\x3\x2\x2\x2\x458"+
		"\x400\x3\x2\x2\x2\x458\x403\x3\x2\x2\x2\x458\x405\x3\x2\x2\x2\x458\x407"+
		"\x3\x2\x2\x2\x458\x40B\x3\x2\x2\x2\x458\x40F\x3\x2\x2\x2\x458\x41E\x3"+
		"\x2\x2\x2\x458\x426\x3\x2\x2\x2\x458\x436\x3\x2\x2\x2\x458\x43D\x3\x2"+
		"\x2\x2\x458\x44B\x3\x2\x2\x2\x458\x44C\x3\x2\x2\x2\x458\x44D\x3\x2\x2"+
		"\x2\x458\x44E\x3\x2\x2\x2\x458\x44F\x3\x2\x2\x2\x458\x450\x3\x2\x2\x2"+
		"\x458\x451\x3\x2\x2\x2\x458\x452\x3\x2\x2\x2\x458\x453\x3\x2\x2\x2\x459"+
		"\x49B\x3\x2\x2\x2\x45A\x45B\f$\x2\x2\x45B\x45C\a\\\x2\x2\x45C\x49A\x5"+
		"X-%\x45D\x45E\f#\x2\x2\x45E\x45F\a]\x2\x2\x45F\x49A\x5X-$\x460\x461\f"+
		"\x1D\x2\x2\x461\x462\t\r\x2\x2\x462\x49A\x5X-\x1E\x463\x464\f\x1C\x2\x2"+
		"\x464\x465\t\xE\x2\x2\x465\x49A\x5X-\x1D\x466\x467\f\x1B\x2\x2\x467\x468"+
		"\t\t\x2\x2\x468\x49A\x5X-\x1C\x469\x46A\f\x1A\x2\x2\x46A\x46B\t\xF\x2"+
		"\x2\x46B\x49A\x5X-\x1B\x46C\x46D\f\x19\x2\x2\x46D\x46E\ax\x2\x2\x46E\x49A"+
		"\x5X-\x1A\x46F\x470\f\x18\x2\x2\x470\x471\ay\x2\x2\x471\x49A\x5X-\x19"+
		"\x472\x473\f\x17\x2\x2\x473\x474\az\x2\x2\x474\x49A\x5X-\x18\x475\x476"+
		"\f\x16\x2\x2\x476\x477\am\x2\x2\x477\x49A\x5X-\x17\x478\x479\f\x15\x2"+
		"\x2\x479\x47A\a(\x2\x2\x47A\x49A\x5X-\x16\x47B\x47C\f\xE\x2\x2\x47C\x47D"+
		"\an\x2\x2\x47D\x47E\x5X-\x2\x47E\x47F\aZ\x2\x2\x47F\x480\x5X-\xE\x480"+
		"\x49A\x3\x2\x2\x2\x481\x482\f\r\x2\x2\x482\x483\t\x10\x2\x2\x483\x49A"+
		"\x5X-\r\x484\x485\f&\x2\x2\x485\x486\a[\x2\x2\x486\x49A\x5\x6\x4\x2\x487"+
		"\x488\f%\x2\x2\x488\x489\a[\x2\x2\x489\x49A\a\x14\x2\x2\x48A\x48B\f\""+
		"\x2\x2\x48B\x48C\ah\x2\x2\x48C\x48D\x5\x38\x1D\x2\x48D\x48E\ai\x2\x2\x48E"+
		"\x49A\x3\x2\x2\x2\x48F\x490\f!\x2\x2\x490\x491\a\x66\x2\x2\x491\x492\x5"+
		"\x38\x1D\x2\x492\x493\ag\x2\x2\x493\x49A\x3\x2\x2\x2\x494\x495\f\x1F\x2"+
		"\x2\x495\x49A\an\x2\x2\x496\x497\f\x10\x2\x2\x497\x498\t\x11\x2\x2\x498"+
		"\x49A\x5\x46$\x2\x499\x45A\x3\x2\x2\x2\x499\x45D\x3\x2\x2\x2\x499\x460"+
		"\x3\x2\x2\x2\x499\x463\x3\x2\x2\x2\x499\x466\x3\x2\x2\x2\x499\x469\x3"+
		"\x2\x2\x2\x499\x46C\x3\x2\x2\x2\x499\x46F\x3\x2\x2\x2\x499\x472\x3\x2"+
		"\x2\x2\x499\x475\x3\x2\x2\x2\x499\x478\x3\x2\x2\x2\x499\x47B\x3\x2\x2"+
		"\x2\x499\x481\x3\x2\x2\x2\x499\x484\x3\x2\x2\x2\x499\x487\x3\x2\x2\x2"+
		"\x499\x48A\x3\x2\x2\x2\x499\x48F\x3\x2\x2\x2\x499\x494\x3\x2\x2\x2\x499"+
		"\x496\x3\x2\x2\x2\x49A\x49D\x3\x2\x2\x2\x49B\x499\x3\x2\x2\x2\x49B\x49C"+
		"\x3\x2\x2\x2\x49CY\x3\x2\x2\x2\x49D\x49B\x3\x2\x2\x2\xA4]\x63s|\x80\x88"+
		"\x8B\x98\xA4\xAB\xAF\xB2\xBA\xC8\xCC\xD0\xD8\xE0\xE3\xEA\xF2\xFA\xFD\x10B"+
		"\x114\x121\x124\x132\x138\x143\x149\x151\x156\x159\x15C\x161\x164\x169"+
		"\x170\x178\x17D\x180\x185\x188\x18D\x194\x19C\x1A4\x1A8\x1AF\x1B4\x1B7"+
		"\x1BB\x1C3\x1C9\x1D3\x1D7\x1DD\x1E3\x1ED\x1F3\x1FD\x204\x20A\x210\x214"+
		"\x217\x21C\x21F\x222\x22C\x234\x23B\x240\x245\x249\x24E\x253\x257\x25C"+
		"\x264\x269\x271\x276\x27A\x27F\x287\x28C\x295\x29A\x29F\x2A7\x2AD\x2B5"+
		"\x2BB\x2C0\x2C4\x2CB\x2D0\x2D3\x2D6\x2DB\x2E3\x2E9\x2F1\x2F6\x2F9\x2FC"+
		"\x302\x30A\x310\x318\x31D\x320\x323\x327\x32F\x335\x33D\x342\x345\x348"+
		"\x352\x358\x360\x365\x368\x36D\x370\x375\x37C\x381\x384\x389\x38D\x392"+
		"\x395\x398\x39E\x3A3\x3AD\x3B8\x3C4\x3CB\x3D0\x3E0\x3E5\x3EB\x3F4\x3FC"+
		"\x3FE\x414\x418\x420\x428\x431\x43D\x445\x449\x458\x499\x49B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Syntax.Antlr
