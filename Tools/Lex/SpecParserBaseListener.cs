//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SpecParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Tools.Lex {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISpecParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SpecParserBaseListener : ISpecParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.spec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSpec([NotNull] SpecParser.SpecContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.spec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSpec([NotNull] SpecParser.SpecContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.NameDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNameDirective([NotNull] SpecParser.NameDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.NameDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNameDirective([NotNull] SpecParser.NameDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.NamespaceDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespaceDirective([NotNull] SpecParser.NamespaceDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.NamespaceDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespaceDirective([NotNull] SpecParser.NamespaceDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ImportDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportDirective([NotNull] SpecParser.ImportDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ImportDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportDirective([NotNull] SpecParser.ImportDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.StartModeDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStartModeDirective([NotNull] SpecParser.StartModeDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.StartModeDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStartModeDirective([NotNull] SpecParser.StartModeDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ChannelsDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChannelsDirective([NotNull] SpecParser.ChannelsDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ChannelsDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChannelsDirective([NotNull] SpecParser.ChannelsDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.IncludeDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIncludeDirective([NotNull] SpecParser.IncludeDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.IncludeDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIncludeDirective([NotNull] SpecParser.IncludeDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ModesDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModesDirective([NotNull] SpecParser.ModesDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ModesDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModesDirective([NotNull] SpecParser.ModesDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.parseRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParseRule([NotNull] SpecParser.ParseRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.parseRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParseRule([NotNull] SpecParser.ParseRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.LiteralPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralPattern([NotNull] SpecParser.LiteralPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.LiteralPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralPattern([NotNull] SpecParser.LiteralPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.DifferencePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDifferencePattern([NotNull] SpecParser.DifferencePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.DifferencePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDifferencePattern([NotNull] SpecParser.DifferencePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.OptionalPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOptionalPattern([NotNull] SpecParser.OptionalPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.OptionalPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOptionalPattern([NotNull] SpecParser.OptionalPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ZeroOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterZeroOrMorePattern([NotNull] SpecParser.ZeroOrMorePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ZeroOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitZeroOrMorePattern([NotNull] SpecParser.ZeroOrMorePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.UpToPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUpToPattern([NotNull] SpecParser.UpToPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.UpToPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUpToPattern([NotNull] SpecParser.UpToPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.IntersectionPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntersectionPattern([NotNull] SpecParser.IntersectionPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.IntersectionPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntersectionPattern([NotNull] SpecParser.IntersectionPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.PredefinedClassPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefinedClassPattern([NotNull] SpecParser.PredefinedClassPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.PredefinedClassPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefinedClassPattern([NotNull] SpecParser.PredefinedClassPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.AnyPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnyPattern([NotNull] SpecParser.AnyPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.AnyPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnyPattern([NotNull] SpecParser.AnyPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.NegatePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegatePattern([NotNull] SpecParser.NegatePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.NegatePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegatePattern([NotNull] SpecParser.NegatePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.OneOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOneOrMorePattern([NotNull] SpecParser.OneOrMorePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.OneOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOneOrMorePattern([NotNull] SpecParser.OneOrMorePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.RepeatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeatPattern([NotNull] SpecParser.RepeatPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.RepeatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeatPattern([NotNull] SpecParser.RepeatPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.RulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRulePattern([NotNull] SpecParser.RulePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.RulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRulePattern([NotNull] SpecParser.RulePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.AlternationPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAlternationPattern([NotNull] SpecParser.AlternationPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.AlternationPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAlternationPattern([NotNull] SpecParser.AlternationPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.GroupingPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupingPattern([NotNull] SpecParser.GroupingPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.GroupingPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupingPattern([NotNull] SpecParser.GroupingPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ImportedRulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportedRulePattern([NotNull] SpecParser.ImportedRulePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ImportedRulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportedRulePattern([NotNull] SpecParser.ImportedRulePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.CharClassPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharClassPattern([NotNull] SpecParser.CharClassPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.CharClassPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharClassPattern([NotNull] SpecParser.CharClassPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ConcatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConcatPattern([NotNull] SpecParser.ConcatPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ConcatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConcatPattern([NotNull] SpecParser.ConcatPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.CharRange"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharRange([NotNull] SpecParser.CharRangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.CharRange"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharRange([NotNull] SpecParser.CharRangeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.SingleChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSingleChar([NotNull] SpecParser.SingleCharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.SingleChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSingleChar([NotNull] SpecParser.SingleCharContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.PredefinedClassChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefinedClassChar([NotNull] SpecParser.PredefinedClassCharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.PredefinedClassChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefinedClassChar([NotNull] SpecParser.PredefinedClassCharContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.DashChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDashChar([NotNull] SpecParser.DashCharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.DashChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDashChar([NotNull] SpecParser.DashCharContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.@char"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChar([NotNull] SpecParser.CharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.@char"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChar([NotNull] SpecParser.CharContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ModeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModeCommand([NotNull] SpecParser.ModeCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ModeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModeCommand([NotNull] SpecParser.ModeCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.PushModeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPushModeCommand([NotNull] SpecParser.PushModeCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.PushModeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPushModeCommand([NotNull] SpecParser.PushModeCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.PopModeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPopModeCommand([NotNull] SpecParser.PopModeCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.PopModeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPopModeCommand([NotNull] SpecParser.PopModeCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.SkipCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSkipCommand([NotNull] SpecParser.SkipCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.SkipCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSkipCommand([NotNull] SpecParser.SkipCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.TypeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeCommand([NotNull] SpecParser.TypeCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.TypeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeCommand([NotNull] SpecParser.TypeCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ChannelCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChannelCommand([NotNull] SpecParser.ChannelCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ChannelCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChannelCommand([NotNull] SpecParser.ChannelCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ErrorCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterErrorCommand([NotNull] SpecParser.ErrorCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ErrorCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitErrorCommand([NotNull] SpecParser.ErrorCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.CaptureCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaptureCommand([NotNull] SpecParser.CaptureCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.CaptureCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaptureCommand([NotNull] SpecParser.CaptureCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.DecodeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecodeCommand([NotNull] SpecParser.DecodeCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.DecodeCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecodeCommand([NotNull] SpecParser.DecodeCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.TextCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTextCommand([NotNull] SpecParser.TextCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.TextCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTextCommand([NotNull] SpecParser.TextCommandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ActionCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActionCommand([NotNull] SpecParser.ActionCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ActionCommand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActionCommand([NotNull] SpecParser.ActionCommandContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace PreAdamant.Compiler.Tools.Lex
