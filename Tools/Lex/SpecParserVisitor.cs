//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SpecParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Tools.Lex {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="SpecParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface ISpecParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="SpecParser.spec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpec([NotNull] SpecParser.SpecContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NameDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNameDirective([NotNull] SpecParser.NameDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NamespaceDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamespaceDirective([NotNull] SpecParser.NamespaceDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ImportDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImportDirective([NotNull] SpecParser.ImportDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StartModeDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStartModeDirective([NotNull] SpecParser.StartModeDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ChannelsDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChannelsDirective([NotNull] SpecParser.ChannelsDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IncludeDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncludeDirective([NotNull] SpecParser.IncludeDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ModesDirective</c>
	/// labeled alternative in <see cref="SpecParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModesDirective([NotNull] SpecParser.ModesDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SpecParser.parseRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParseRule([NotNull] SpecParser.ParseRuleContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralPattern([NotNull] SpecParser.LiteralPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DifferencePattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDifferencePattern([NotNull] SpecParser.DifferencePatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OptionalPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOptionalPattern([NotNull] SpecParser.OptionalPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ZeroOrMorePattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitZeroOrMorePattern([NotNull] SpecParser.ZeroOrMorePatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UpToPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUpToPattern([NotNull] SpecParser.UpToPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IntersectionPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntersectionPattern([NotNull] SpecParser.IntersectionPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PredefinedClassPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredefinedClassPattern([NotNull] SpecParser.PredefinedClassPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AnyPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAnyPattern([NotNull] SpecParser.AnyPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NegatePattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegatePattern([NotNull] SpecParser.NegatePatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OneOrMorePattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOneOrMorePattern([NotNull] SpecParser.OneOrMorePatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RepeatPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRepeatPattern([NotNull] SpecParser.RepeatPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RulePattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRulePattern([NotNull] SpecParser.RulePatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AlternationPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAlternationPattern([NotNull] SpecParser.AlternationPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GroupingPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGroupingPattern([NotNull] SpecParser.GroupingPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ImportedRulePattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImportedRulePattern([NotNull] SpecParser.ImportedRulePatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CharClassPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharClassPattern([NotNull] SpecParser.CharClassPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConcatPattern</c>
	/// labeled alternative in <see cref="SpecParser.pattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatPattern([NotNull] SpecParser.ConcatPatternContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CharRange</c>
	/// labeled alternative in <see cref="SpecParser.charSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharRange([NotNull] SpecParser.CharRangeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SingleChar</c>
	/// labeled alternative in <see cref="SpecParser.charSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSingleChar([NotNull] SpecParser.SingleCharContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PredefinedClassChar</c>
	/// labeled alternative in <see cref="SpecParser.charSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredefinedClassChar([NotNull] SpecParser.PredefinedClassCharContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DashChar</c>
	/// labeled alternative in <see cref="SpecParser.charSet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDashChar([NotNull] SpecParser.DashCharContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SpecParser.char"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChar([NotNull] SpecParser.CharContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ModeCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModeCommand([NotNull] SpecParser.ModeCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PushModeCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPushModeCommand([NotNull] SpecParser.PushModeCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PopModeCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPopModeCommand([NotNull] SpecParser.PopModeCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SkipCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSkipCommand([NotNull] SpecParser.SkipCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypeCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeCommand([NotNull] SpecParser.TypeCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ChannelCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChannelCommand([NotNull] SpecParser.ChannelCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ErrorCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitErrorCommand([NotNull] SpecParser.ErrorCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CaptureCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaptureCommand([NotNull] SpecParser.CaptureCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DecodeCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecodeCommand([NotNull] SpecParser.DecodeCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TextCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTextCommand([NotNull] SpecParser.TextCommandContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ActionCommand</c>
	/// labeled alternative in <see cref="SpecParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitActionCommand([NotNull] SpecParser.ActionCommandContext context);
}
} // namespace PreAdamant.Compiler.Tools.Lex
