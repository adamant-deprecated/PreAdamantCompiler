//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SpecParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Tools.Lex {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SpecParser : Parser {
	public const int
		Comment=1, Whitespace=2, Lexer=3, Namespace=4, Modes=5, Channels=6, Import=7, 
		StartMode=8, Include=9, ModeCmd=10, PushModeCmd=11, PopModeCmd=12, SkipCmd=13, 
		MoreCmd=14, TypeCmd=15, ChannelCmd=16, ErrorCmd=17, CaptureCmd=18, DecodeCmd=19, 
		TextCmd=20, ActionCmd=21, OfType=22, Scope=23, Definition=24, Alternation=25, 
		BeginCharClass=26, AnyChar=27, Optional=28, Complement=29, Repetition=30, 
		OneOrMore=31, Intersection=32, Subtraction=33, Upto=34, BeginGroup=35, 
		EndGroup=36, BeginningOfLine=37, EndOfLine=38, LeftBrace=39, RightBrace=40, 
		BeginCommands=41, Terminator=42, Comma=43, PredefinedClass=44, Number=45, 
		Identifier=46, Literal=47, InvalidKeyword=48, UnexpectedChar=49, Char=50, 
		Caret=51, EscapedChar=52, InvalidEscapedChar=53, EscapedDash=54, EscapedRightBracket=55, 
		Dash=56, EndCharClass=57;
	public const int
		RULE_spec = 0, RULE_directive = 1, RULE_parseRule = 2, RULE_pattern = 3, 
		RULE_charSet = 4, RULE_char = 5, RULE_command = 6;
	public static readonly string[] ruleNames = {
		"spec", "directive", "parseRule", "pattern", "charSet", "char", "command"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'@lexer'", "'@namespace'", "'@modes'", "'@channels'", 
		"'@import'", "'@startMode'", "'@include'", "'@mode'", "'@pushMode'", "'@popMode'", 
		"'@skip'", "'@more'", "'@type'", "'@channel'", "'@error'", "'@capture'", 
		"'@decode'", "'@text'", null, "':'", "'::'", "'='", "'|'", "'['", "'.'", 
		"'?'", "'!'", "'*'", "'+'", "'&'", null, "'~'", "'('", "')'", null, "'$'", 
		"'{'", "'}'", "'->'", "';'", "','", null, null, null, null, null, null, 
		null, null, null, null, "'\\-'", "'\\]'", null, "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Comment", "Whitespace", "Lexer", "Namespace", "Modes", "Channels", 
		"Import", "StartMode", "Include", "ModeCmd", "PushModeCmd", "PopModeCmd", 
		"SkipCmd", "MoreCmd", "TypeCmd", "ChannelCmd", "ErrorCmd", "CaptureCmd", 
		"DecodeCmd", "TextCmd", "ActionCmd", "OfType", "Scope", "Definition", 
		"Alternation", "BeginCharClass", "AnyChar", "Optional", "Complement", 
		"Repetition", "OneOrMore", "Intersection", "Subtraction", "Upto", "BeginGroup", 
		"EndGroup", "BeginningOfLine", "EndOfLine", "LeftBrace", "RightBrace", 
		"BeginCommands", "Terminator", "Comma", "PredefinedClass", "Number", "Identifier", 
		"Literal", "InvalidKeyword", "UnexpectedChar", "Char", "Caret", "EscapedChar", 
		"InvalidEscapedChar", "EscapedDash", "EscapedRightBracket", "Dash", "EndCharClass"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpecParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SpecParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class SpecContext : ParserRuleContext {
		public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public ParseRuleContext[] parseRule() {
			return GetRuleContexts<ParseRuleContext>();
		}
		public ParseRuleContext parseRule(int i) {
			return GetRuleContext<ParseRuleContext>(i);
		}
		public SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecContext spec() {
		SpecContext _localctx = new SpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Lexer) | (1L << Namespace) | (1L << Modes) | (1L << Channels) | (1L << Import) | (1L << StartMode) | (1L << Include) | (1L << Identifier))) != 0)) {
				{
				State = 16;
				switch (TokenStream.La(1)) {
				case Lexer:
				case Namespace:
				case Modes:
				case Channels:
				case Import:
				case StartMode:
				case Include:
					{
					State = 14; directive();
					}
					break;
				case Identifier:
					{
					State = 15; parseRule();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	 
		public DirectiveContext() { }
		public virtual void CopyFrom(DirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImportDirectiveContext : DirectiveContext {
		public IToken alias;
		public IToken lexerName;
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public ImportDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameDirectiveContext : DirectiveContext {
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public NameDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterNameDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitNameDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StartModeDirectiveContext : DirectiveContext {
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public StartModeDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterStartModeDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitStartModeDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartModeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDirectiveContext : DirectiveContext {
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public NamespaceDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelsDirectiveContext : DirectiveContext {
		public IToken _Identifier;
		public IList<IToken> _channels = new List<IToken>();
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public ChannelsDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterChannelsDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitChannelsDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeDirectiveContext : DirectiveContext {
		public IToken lexerName;
		public IToken ruleName;
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public IncludeDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterIncludeDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitIncludeDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModesDirectiveContext : DirectiveContext {
		public IToken _Identifier;
		public IList<IToken> _modes = new List<IToken>();
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public ParseRuleContext[] parseRule() {
			return GetRuleContexts<ParseRuleContext>();
		}
		public ParseRuleContext parseRule(int i) {
			return GetRuleContext<ParseRuleContext>(i);
		}
		public ModesDirectiveContext(DirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterModesDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitModesDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModesDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_directive);
		int _la;
		try {
			State = 77;
			switch (TokenStream.La(1)) {
			case Lexer:
				_localctx = new NameDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; Match(Lexer);
				State = 22; Match(Identifier);
				State = 23; Match(Terminator);
				}
				break;
			case Namespace:
				_localctx = new NamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; Match(Namespace);
				State = 25; Match(Identifier);
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AnyChar) {
					{
					{
					State = 26; Match(AnyChar);
					State = 27; Match(Identifier);
					}
					}
					State = 32;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 33; Match(Terminator);
				}
				break;
			case Import:
				_localctx = new ImportDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 34; Match(Import);
				State = 37;
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 35; ((ImportDirectiveContext)_localctx).alias = Match(Identifier);
					State = 36; Match(Definition);
					}
					break;
				}
				State = 39; ((ImportDirectiveContext)_localctx).lexerName = Match(Identifier);
				State = 40; Match(Terminator);
				}
				break;
			case StartMode:
				_localctx = new StartModeDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; Match(StartMode);
				State = 42; Match(Identifier);
				State = 43; Match(Terminator);
				}
				break;
			case Channels:
				_localctx = new ChannelsDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 44; Match(Channels);
				State = 45; ((ChannelsDirectiveContext)_localctx)._Identifier = Match(Identifier);
				((ChannelsDirectiveContext)_localctx)._channels.Add(((ChannelsDirectiveContext)_localctx)._Identifier);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 46; Match(Comma);
					State = 47; ((ChannelsDirectiveContext)_localctx)._Identifier = Match(Identifier);
					((ChannelsDirectiveContext)_localctx)._channels.Add(((ChannelsDirectiveContext)_localctx)._Identifier);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 53; Match(Terminator);
				}
				break;
			case Include:
				_localctx = new IncludeDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 54; Match(Include);
				State = 55; ((IncludeDirectiveContext)_localctx).lexerName = Match(Identifier);
				State = 56; Match(Scope);
				State = 57; ((IncludeDirectiveContext)_localctx).ruleName = Match(Identifier);
				State = 58; Match(Terminator);
				}
				break;
			case Modes:
				_localctx = new ModesDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 59; Match(Modes);
				State = 60; ((ModesDirectiveContext)_localctx)._Identifier = Match(Identifier);
				((ModesDirectiveContext)_localctx)._modes.Add(((ModesDirectiveContext)_localctx)._Identifier);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 61; Match(Comma);
					State = 62; ((ModesDirectiveContext)_localctx)._Identifier = Match(Identifier);
					((ModesDirectiveContext)_localctx)._modes.Add(((ModesDirectiveContext)_localctx)._Identifier);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 68; Match(LeftBrace);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Lexer) | (1L << Namespace) | (1L << Modes) | (1L << Channels) | (1L << Import) | (1L << StartMode) | (1L << Include) | (1L << Identifier))) != 0)) {
					{
					State = 71;
					switch (TokenStream.La(1)) {
					case Lexer:
					case Namespace:
					case Modes:
					case Channels:
					case Import:
					case StartMode:
					case Include:
						{
						State = 69; directive();
						}
						break;
					case Identifier:
						{
						State = 70; parseRule();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 76; Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseRuleContext : ParserRuleContext {
		public IToken name;
		public IToken @base;
		public CommandContext _command;
		public IList<CommandContext> _commands = new List<CommandContext>();
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ParseRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parseRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterParseRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitParseRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParseRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseRuleContext parseRule() {
		ParseRuleContext _localctx = new ParseRuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_parseRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; _localctx.name = Match(Identifier);
			State = 82;
			_la = TokenStream.La(1);
			if (_la==OfType) {
				{
				State = 80; Match(OfType);
				State = 81; _localctx.@base = Match(Identifier);
				}
			}

			State = 97;
			_la = TokenStream.La(1);
			if (_la==Definition) {
				{
				State = 84; Match(Definition);
				State = 85; pattern(0);
				State = 95;
				_la = TokenStream.La(1);
				if (_la==BeginCommands) {
					{
					State = 86; Match(BeginCommands);
					State = 87; _localctx._command = command();
					_localctx._commands.Add(_localctx._command);
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 88; Match(Comma);
						State = 89; _localctx._command = command();
						_localctx._commands.Add(_localctx._command);
						}
						}
						State = 94;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				}
			}

			State = 99; Match(Terminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
	 
		public PatternContext() { }
		public virtual void CopyFrom(PatternContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralPatternContext : PatternContext {
		public ITerminalNode Literal() { return GetToken(SpecParser.Literal, 0); }
		public LiteralPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterLiteralPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitLiteralPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DifferencePatternContext : PatternContext {
		public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public ITerminalNode Subtraction() { return GetToken(SpecParser.Subtraction, 0); }
		public DifferencePatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterDifferencePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitDifferencePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferencePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionalPatternContext : PatternContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public OptionalPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterOptionalPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitOptionalPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZeroOrMorePatternContext : PatternContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ZeroOrMorePatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterZeroOrMorePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitZeroOrMorePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZeroOrMorePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpToPatternContext : PatternContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public UpToPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterUpToPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitUpToPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpToPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntersectionPatternContext : PatternContext {
		public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public IntersectionPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterIntersectionPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitIntersectionPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersectionPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedClassPatternContext : PatternContext {
		public ITerminalNode PredefinedClass() { return GetToken(SpecParser.PredefinedClass, 0); }
		public PredefinedClassPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPredefinedClassPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPredefinedClassPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedClassPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnyPatternContext : PatternContext {
		public AnyPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterAnyPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitAnyPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegatePatternContext : PatternContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public NegatePatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterNegatePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitNegatePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OneOrMorePatternContext : PatternContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public OneOrMorePatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterOneOrMorePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitOneOrMorePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneOrMorePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatPatternContext : PatternContext {
		public IToken min;
		public IToken range;
		public IToken max;
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ITerminalNode[] Number() { return GetTokens(SpecParser.Number); }
		public ITerminalNode Number(int i) {
			return GetToken(SpecParser.Number, i);
		}
		public RepeatPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterRepeatPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitRepeatPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RulePatternContext : PatternContext {
		public IToken ruleName;
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public RulePatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterRulePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitRulePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlternationPatternContext : PatternContext {
		public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public AlternationPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterAlternationPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitAlternationPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternationPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupingPatternContext : PatternContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public GroupingPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterGroupingPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitGroupingPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportedRulePatternContext : PatternContext {
		public IToken lexerName;
		public IToken ruleName;
		public ITerminalNode[] Identifier() { return GetTokens(SpecParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SpecParser.Identifier, i);
		}
		public ImportedRulePatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterImportedRulePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitImportedRulePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedRulePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharClassPatternContext : PatternContext {
		public IToken negate;
		public CharSetContext[] charSet() {
			return GetRuleContexts<CharSetContext>();
		}
		public CharSetContext charSet(int i) {
			return GetRuleContext<CharSetContext>(i);
		}
		public ITerminalNode Caret() { return GetToken(SpecParser.Caret, 0); }
		public CharClassPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCharClassPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCharClassPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharClassPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatPatternContext : PatternContext {
		public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public ConcatPatternContext(PatternContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterConcatPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitConcatPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		return pattern(0);
	}

	private PatternContext pattern(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PatternContext _localctx = new PatternContext(Context, _parentState);
		PatternContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_pattern, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				_localctx = new NegatePatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 102; Match(Complement);
				State = 103; pattern(10);
				}
				break;
			case 2:
				{
				_localctx = new UpToPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; Match(Upto);
				State = 105; pattern(9);
				}
				break;
			case 3:
				{
				_localctx = new CharClassPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106; Match(BeginCharClass);
				State = 108;
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 107; ((CharClassPatternContext)_localctx).negate = Match(Caret);
					}
					break;
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PredefinedClass) | (1L << Char) | (1L << Caret) | (1L << EscapedChar) | (1L << InvalidEscapedChar) | (1L << EscapedDash) | (1L << Dash))) != 0)) {
					{
					{
					State = 110; charSet();
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 116; Match(EndCharClass);
				}
				break;
			case 4:
				{
				_localctx = new GroupingPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117; Match(BeginGroup);
				State = 118; pattern(0);
				State = 119; Match(EndGroup);
				}
				break;
			case 5:
				{
				_localctx = new ImportedRulePatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; ((ImportedRulePatternContext)_localctx).lexerName = Match(Identifier);
				State = 122; Match(Scope);
				State = 123; ((ImportedRulePatternContext)_localctx).ruleName = Match(Identifier);
				}
				break;
			case 6:
				{
				_localctx = new RulePatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124; ((RulePatternContext)_localctx).ruleName = Match(Identifier);
				}
				break;
			case 7:
				{
				_localctx = new AnyPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125; Match(AnyChar);
				}
				break;
			case 8:
				{
				_localctx = new LiteralPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126; Match(Literal);
				}
				break;
			case 9:
				{
				_localctx = new PredefinedClassPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127; Match(PredefinedClass);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 157;
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ConcatPatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 130;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 131; pattern(9);
						}
						break;
					case 2:
						{
						_localctx = new IntersectionPatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 132;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 133; Match(Intersection);
						State = 134; pattern(8);
						}
						break;
					case 3:
						{
						_localctx = new DifferencePatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 135;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 136; Match(Subtraction);
						State = 137; pattern(7);
						}
						break;
					case 4:
						{
						_localctx = new AlternationPatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 138;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 139; Match(Alternation);
						State = 140; pattern(6);
						}
						break;
					case 5:
						{
						_localctx = new OptionalPatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 141;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 142; Match(Optional);
						}
						break;
					case 6:
						{
						_localctx = new ZeroOrMorePatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 143;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 144; Match(Repetition);
						}
						break;
					case 7:
						{
						_localctx = new OneOrMorePatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 145;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 146; Match(OneOrMore);
						}
						break;
					case 8:
						{
						_localctx = new RepeatPatternContext(new PatternContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pattern);
						State = 147;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 148; Match(LeftBrace);
						State = 149; ((RepeatPatternContext)_localctx).min = Match(Number);
						State = 154;
						_la = TokenStream.La(1);
						if (_la==Comma) {
							{
							State = 150; ((RepeatPatternContext)_localctx).range = Match(Comma);
							State = 152;
							_la = TokenStream.La(1);
							if (_la==Number) {
								{
								State = 151; ((RepeatPatternContext)_localctx).max = Match(Number);
								}
							}

							}
						}

						State = 156; Match(RightBrace);
						}
						break;
					}
					} 
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CharSetContext : ParserRuleContext {
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
	 
		public CharSetContext() { }
		public virtual void CopyFrom(CharSetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleCharContext : CharSetContext {
		public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		public SingleCharContext(CharSetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSingleChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSingleChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DashCharContext : CharSetContext {
		public ITerminalNode Dash() { return GetToken(SpecParser.Dash, 0); }
		public DashCharContext(CharSetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterDashChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitDashChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDashChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharRangeContext : CharSetContext {
		public CharContext[] @char() {
			return GetRuleContexts<CharContext>();
		}
		public CharContext @char(int i) {
			return GetRuleContext<CharContext>(i);
		}
		public ITerminalNode Dash() { return GetToken(SpecParser.Dash, 0); }
		public CharRangeContext(CharSetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCharRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCharRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedClassCharContext : CharSetContext {
		public ITerminalNode PredefinedClass() { return GetToken(SpecParser.PredefinedClass, 0); }
		public PredefinedClassCharContext(CharSetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPredefinedClassChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPredefinedClassChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedClassChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 8, RULE_charSet);
		try {
			State = 169;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new CharRangeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; @char();
				State = 163; Match(Dash);
				State = 164; @char();
				}
				break;
			case 2:
				_localctx = new SingleCharContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; @char();
				}
				break;
			case 3:
				_localctx = new PredefinedClassCharContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 167; Match(PredefinedClass);
				}
				break;
			case 4:
				_localctx = new DashCharContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 168; Match(Dash);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		public ITerminalNode Char() { return GetToken(SpecParser.Char, 0); }
		public ITerminalNode EscapedChar() { return GetToken(SpecParser.EscapedChar, 0); }
		public ITerminalNode EscapedDash() { return GetToken(SpecParser.EscapedDash, 0); }
		public ITerminalNode Caret() { return GetToken(SpecParser.Caret, 0); }
		public ITerminalNode InvalidEscapedChar() { return GetToken(SpecParser.InvalidEscapedChar, 0); }
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(Context, State);
		EnterRule(_localctx, 10, RULE_char);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Char) | (1L << Caret) | (1L << EscapedChar) | (1L << InvalidEscapedChar) | (1L << EscapedDash))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecodeCommandContext : CommandContext {
		public IToken @base;
		public ITerminalNode Number() { return GetToken(SpecParser.Number, 0); }
		public DecodeCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterDecodeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitDecodeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecodeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextCommandContext : CommandContext {
		public IToken text;
		public ITerminalNode Literal() { return GetToken(SpecParser.Literal, 0); }
		public TextCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterTextCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitTextCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ActionCommandContext : CommandContext {
		public ITerminalNode ActionCmd() { return GetToken(SpecParser.ActionCmd, 0); }
		public ActionCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterActionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitActionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SkipCommandContext : CommandContext {
		public SkipCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterSkipCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitSkipCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCommandContext : CommandContext {
		public IToken type;
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public TypeCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterTypeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitTypeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PushModeCommandContext : CommandContext {
		public IToken modeName;
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public PushModeCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPushModeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPushModeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushModeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModeCommandContext : CommandContext {
		public IToken modeName;
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public ModeCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterModeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitModeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaptureCommandContext : CommandContext {
		public CaptureCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterCaptureCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitCaptureCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorCommandContext : CommandContext {
		public ErrorCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterErrorCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitErrorCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopModeCommandContext : CommandContext {
		public PopModeCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterPopModeCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitPopModeCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopModeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelCommandContext : CommandContext {
		public IToken channel;
		public ITerminalNode Identifier() { return GetToken(SpecParser.Identifier, 0); }
		public ChannelCommandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.EnterChannelCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpecParserListener typedListener = listener as ISpecParserListener;
			if (typedListener != null) typedListener.ExitChannelCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpecParserVisitor<TResult> typedVisitor = visitor as ISpecParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		try {
			State = 203;
			switch (TokenStream.La(1)) {
			case ModeCmd:
				_localctx = new ModeCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; Match(ModeCmd);
				State = 174; Match(BeginGroup);
				State = 175; ((ModeCommandContext)_localctx).modeName = Match(Identifier);
				State = 176; Match(EndGroup);
				}
				break;
			case PushModeCmd:
				_localctx = new PushModeCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; Match(PushModeCmd);
				State = 178; Match(BeginGroup);
				State = 179; ((PushModeCommandContext)_localctx).modeName = Match(Identifier);
				State = 180; Match(EndGroup);
				}
				break;
			case PopModeCmd:
				_localctx = new PopModeCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; Match(PopModeCmd);
				}
				break;
			case SkipCmd:
				_localctx = new SkipCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; Match(SkipCmd);
				}
				break;
			case MoreCmd:
				_localctx = new ModeCommandContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 183; Match(MoreCmd);
				}
				break;
			case TypeCmd:
				_localctx = new TypeCommandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 184; Match(TypeCmd);
				State = 185; Match(BeginGroup);
				State = 186; ((TypeCommandContext)_localctx).type = Match(Identifier);
				State = 187; Match(EndGroup);
				}
				break;
			case ChannelCmd:
				_localctx = new ChannelCommandContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 188; Match(ChannelCmd);
				State = 189; Match(BeginGroup);
				State = 190; ((ChannelCommandContext)_localctx).channel = Match(Identifier);
				State = 191; Match(EndGroup);
				}
				break;
			case ErrorCmd:
				_localctx = new ErrorCommandContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 192; Match(ErrorCmd);
				}
				break;
			case CaptureCmd:
				_localctx = new CaptureCommandContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 193; Match(CaptureCmd);
				}
				break;
			case DecodeCmd:
				_localctx = new DecodeCommandContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 194; Match(DecodeCmd);
				State = 195; Match(BeginGroup);
				State = 196; ((DecodeCommandContext)_localctx).@base = Match(Number);
				State = 197; Match(EndGroup);
				}
				break;
			case TextCmd:
				_localctx = new TextCommandContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 198; Match(TextCmd);
				State = 199; Match(BeginGroup);
				State = 200; ((TextCommandContext)_localctx).text = Match(Literal);
				State = 201; Match(EndGroup);
				}
				break;
			case ActionCmd:
				_localctx = new ActionCommandContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 202; Match(ActionCmd);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return pattern_sempred((PatternContext)_localctx, predIndex);
		}
		return true;
	}
	private bool pattern_sempred(PatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3;\xD0\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3"+
		"\x2\a\x2\x13\n\x2\f\x2\xE\x2\x16\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\a\x3\x1F\n\x3\f\x3\xE\x3\"\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"(\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x33"+
		"\n\x3\f\x3\xE\x3\x36\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\a\x3\x42\n\x3\f\x3\xE\x3\x45\v\x3\x3\x3\x3\x3\x3\x3\a"+
		"\x3J\n\x3\f\x3\xE\x3M\v\x3\x3\x3\x5\x3P\n\x3\x3\x4\x3\x4\x3\x4\x5\x4U"+
		"\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4]\n\x4\f\x4\xE\x4`\v\x4"+
		"\x5\x4\x62\n\x4\x5\x4\x64\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5o\n\x5\x3\x5\a\x5r\n\x5\f\x5\xE\x5u\v\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5"+
		"\x83\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\x9B\n\x5\x5\x5\x9D\n\x5\x3\x5\a\x5\xA0\n\x5\f\x5\xE\x5\xA3\v"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xAC\n\x6\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b\xCE\n\b\x3\b\x2\x3\b\t\x2\x4\x6\b\n\f\xE\x2\x3\x3\x2\x34"+
		"\x38\xFC\x2\x14\x3\x2\x2\x2\x4O\x3\x2\x2\x2\x6Q\x3\x2\x2\x2\b\x82\x3\x2"+
		"\x2\x2\n\xAB\x3\x2\x2\x2\f\xAD\x3\x2\x2\x2\xE\xCD\x3\x2\x2\x2\x10\x13"+
		"\x5\x4\x3\x2\x11\x13\x5\x6\x4\x2\x12\x10\x3\x2\x2\x2\x12\x11\x3\x2\x2"+
		"\x2\x13\x16\x3\x2\x2\x2\x14\x12\x3\x2\x2\x2\x14\x15\x3\x2\x2\x2\x15\x3"+
		"\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x17\x18\a\x5\x2\x2\x18\x19\a\x30\x2\x2"+
		"\x19P\a,\x2\x2\x1A\x1B\a\x6\x2\x2\x1B \a\x30\x2\x2\x1C\x1D\a\x1D\x2\x2"+
		"\x1D\x1F\a\x30\x2\x2\x1E\x1C\x3\x2\x2\x2\x1F\"\x3\x2\x2\x2 \x1E\x3\x2"+
		"\x2\x2 !\x3\x2\x2\x2!#\x3\x2\x2\x2\" \x3\x2\x2\x2#P\a,\x2\x2$\'\a\t\x2"+
		"\x2%&\a\x30\x2\x2&(\a\x1A\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2()\x3\x2"+
		"\x2\x2)*\a\x30\x2\x2*P\a,\x2\x2+,\a\n\x2\x2,-\a\x30\x2\x2-P\a,\x2\x2."+
		"/\a\b\x2\x2/\x34\a\x30\x2\x2\x30\x31\a-\x2\x2\x31\x33\a\x30\x2\x2\x32"+
		"\x30\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2"+
		"\x2\x2\x35\x37\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37P\a,\x2\x2\x38\x39\a"+
		"\v\x2\x2\x39:\a\x30\x2\x2:;\a\x19\x2\x2;<\a\x30\x2\x2<P\a,\x2\x2=>\a\a"+
		"\x2\x2>\x43\a\x30\x2\x2?@\a-\x2\x2@\x42\a\x30\x2\x2\x41?\x3\x2\x2\x2\x42"+
		"\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x46\x3\x2"+
		"\x2\x2\x45\x43\x3\x2\x2\x2\x46K\a)\x2\x2GJ\x5\x4\x3\x2HJ\x5\x6\x4\x2I"+
		"G\x3\x2\x2\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2"+
		"LN\x3\x2\x2\x2MK\x3\x2\x2\x2NP\a*\x2\x2O\x17\x3\x2\x2\x2O\x1A\x3\x2\x2"+
		"\x2O$\x3\x2\x2\x2O+\x3\x2\x2\x2O.\x3\x2\x2\x2O\x38\x3\x2\x2\x2O=\x3\x2"+
		"\x2\x2P\x5\x3\x2\x2\x2QT\a\x30\x2\x2RS\a\x18\x2\x2SU\a\x30\x2\x2TR\x3"+
		"\x2\x2\x2TU\x3\x2\x2\x2U\x63\x3\x2\x2\x2VW\a\x1A\x2\x2W\x61\x5\b\x5\x2"+
		"XY\a+\x2\x2Y^\x5\xE\b\x2Z[\a-\x2\x2[]\x5\xE\b\x2\\Z\x3\x2\x2\x2]`\x3\x2"+
		"\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2\x61"+
		"X\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x64\x3\x2\x2\x2\x63V\x3\x2\x2\x2"+
		"\x63\x64\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\a,\x2\x2\x66\a\x3\x2"+
		"\x2\x2gh\b\x5\x1\x2hi\a\x1F\x2\x2i\x83\x5\b\x5\fjk\a$\x2\x2k\x83\x5\b"+
		"\x5\vln\a\x1C\x2\x2mo\a\x35\x2\x2nm\x3\x2\x2\x2no\x3\x2\x2\x2os\x3\x2"+
		"\x2\x2pr\x5\n\x6\x2qp\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2"+
		"\x2\x2tv\x3\x2\x2\x2us\x3\x2\x2\x2v\x83\a;\x2\x2wx\a%\x2\x2xy\x5\b\x5"+
		"\x2yz\a&\x2\x2z\x83\x3\x2\x2\x2{|\a\x30\x2\x2|}\a\x19\x2\x2}\x83\a\x30"+
		"\x2\x2~\x83\a\x30\x2\x2\x7F\x83\a\x1D\x2\x2\x80\x83\a\x31\x2\x2\x81\x83"+
		"\a.\x2\x2\x82g\x3\x2\x2\x2\x82j\x3\x2\x2\x2\x82l\x3\x2\x2\x2\x82w\x3\x2"+
		"\x2\x2\x82{\x3\x2\x2\x2\x82~\x3\x2\x2\x2\x82\x7F\x3\x2\x2\x2\x82\x80\x3"+
		"\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83\xA1\x3\x2\x2\x2\x84\x85\f\n\x2\x2\x85"+
		"\xA0\x5\b\x5\v\x86\x87\f\t\x2\x2\x87\x88\a\"\x2\x2\x88\xA0\x5\b\x5\n\x89"+
		"\x8A\f\b\x2\x2\x8A\x8B\a#\x2\x2\x8B\xA0\x5\b\x5\t\x8C\x8D\f\a\x2\x2\x8D"+
		"\x8E\a\x1B\x2\x2\x8E\xA0\x5\b\x5\b\x8F\x90\f\x10\x2\x2\x90\xA0\a\x1E\x2"+
		"\x2\x91\x92\f\xF\x2\x2\x92\xA0\a \x2\x2\x93\x94\f\xE\x2\x2\x94\xA0\a!"+
		"\x2\x2\x95\x96\f\r\x2\x2\x96\x97\a)\x2\x2\x97\x9C\a/\x2\x2\x98\x9A\a-"+
		"\x2\x2\x99\x9B\a/\x2\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9D"+
		"\x3\x2\x2\x2\x9C\x98\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x3\x2\x2"+
		"\x2\x9E\xA0\a*\x2\x2\x9F\x84\x3\x2\x2\x2\x9F\x86\x3\x2\x2\x2\x9F\x89\x3"+
		"\x2\x2\x2\x9F\x8C\x3\x2\x2\x2\x9F\x8F\x3\x2\x2\x2\x9F\x91\x3\x2\x2\x2"+
		"\x9F\x93\x3\x2\x2\x2\x9F\x95\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F\x3"+
		"\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\t\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4"+
		"\xA5\x5\f\a\x2\xA5\xA6\a:\x2\x2\xA6\xA7\x5\f\a\x2\xA7\xAC\x3\x2\x2\x2"+
		"\xA8\xAC\x5\f\a\x2\xA9\xAC\a.\x2\x2\xAA\xAC\a:\x2\x2\xAB\xA4\x3\x2\x2"+
		"\x2\xAB\xA8\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\v"+
		"\x3\x2\x2\x2\xAD\xAE\t\x2\x2\x2\xAE\r\x3\x2\x2\x2\xAF\xB0\a\f\x2\x2\xB0"+
		"\xB1\a%\x2\x2\xB1\xB2\a\x30\x2\x2\xB2\xCE\a&\x2\x2\xB3\xB4\a\r\x2\x2\xB4"+
		"\xB5\a%\x2\x2\xB5\xB6\a\x30\x2\x2\xB6\xCE\a&\x2\x2\xB7\xCE\a\xE\x2\x2"+
		"\xB8\xCE\a\xF\x2\x2\xB9\xCE\a\x10\x2\x2\xBA\xBB\a\x11\x2\x2\xBB\xBC\a"+
		"%\x2\x2\xBC\xBD\a\x30\x2\x2\xBD\xCE\a&\x2\x2\xBE\xBF\a\x12\x2\x2\xBF\xC0"+
		"\a%\x2\x2\xC0\xC1\a\x30\x2\x2\xC1\xCE\a&\x2\x2\xC2\xCE\a\x13\x2\x2\xC3"+
		"\xCE\a\x14\x2\x2\xC4\xC5\a\x15\x2\x2\xC5\xC6\a%\x2\x2\xC6\xC7\a/\x2\x2"+
		"\xC7\xCE\a&\x2\x2\xC8\xC9\a\x16\x2\x2\xC9\xCA\a%\x2\x2\xCA\xCB\a\x31\x2"+
		"\x2\xCB\xCE\a&\x2\x2\xCC\xCE\a\x17\x2\x2\xCD\xAF\x3\x2\x2\x2\xCD\xB3\x3"+
		"\x2\x2\x2\xCD\xB7\x3\x2\x2\x2\xCD\xB8\x3\x2\x2\x2\xCD\xB9\x3\x2\x2\x2"+
		"\xCD\xBA\x3\x2\x2\x2\xCD\xBE\x3\x2\x2\x2\xCD\xC2\x3\x2\x2\x2\xCD\xC3\x3"+
		"\x2\x2\x2\xCD\xC4\x3\x2\x2\x2\xCD\xC8\x3\x2\x2\x2\xCD\xCC\x3\x2\x2\x2"+
		"\xCE\xF\x3\x2\x2\x2\x18\x12\x14 \'\x34\x43IKOT^\x61\x63ns\x82\x9A\x9C"+
		"\x9F\xA1\xAB\xCD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Tools.Lex
