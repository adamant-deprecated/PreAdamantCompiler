//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SpecParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Tools.Parse {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISpecParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class SpecParserBaseListener : ISpecParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.spec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSpec([NotNull] SpecParser.SpecContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.spec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSpec([NotNull] SpecParser.SpecContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.NameDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNameDirective([NotNull] SpecParser.NameDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.NameDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNameDirective([NotNull] SpecParser.NameDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.NamespaceDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespaceDirective([NotNull] SpecParser.NamespaceDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.NamespaceDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespaceDirective([NotNull] SpecParser.NamespaceDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ImportDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportDirective([NotNull] SpecParser.ImportDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ImportDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportDirective([NotNull] SpecParser.ImportDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.StartRuleDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStartRuleDirective([NotNull] SpecParser.StartRuleDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.StartRuleDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStartRuleDirective([NotNull] SpecParser.StartRuleDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.parseRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParseRule([NotNull] SpecParser.ParseRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.parseRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParseRule([NotNull] SpecParser.ParseRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.LiteralPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralPattern([NotNull] SpecParser.LiteralPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.LiteralPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralPattern([NotNull] SpecParser.LiteralPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.OptionalPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOptionalPattern([NotNull] SpecParser.OptionalPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.OptionalPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOptionalPattern([NotNull] SpecParser.OptionalPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.RepeatWithSeparatorPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeatWithSeparatorPattern([NotNull] SpecParser.RepeatWithSeparatorPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.RepeatWithSeparatorPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeatWithSeparatorPattern([NotNull] SpecParser.RepeatWithSeparatorPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ZeroOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterZeroOrMorePattern([NotNull] SpecParser.ZeroOrMorePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ZeroOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitZeroOrMorePattern([NotNull] SpecParser.ZeroOrMorePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.GroupingPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupingPattern([NotNull] SpecParser.GroupingPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.GroupingPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupingPattern([NotNull] SpecParser.GroupingPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ImportedRulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportedRulePattern([NotNull] SpecParser.ImportedRulePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ImportedRulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportedRulePattern([NotNull] SpecParser.ImportedRulePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.ConcatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConcatPattern([NotNull] SpecParser.ConcatPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.ConcatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConcatPattern([NotNull] SpecParser.ConcatPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.OneOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOneOrMorePattern([NotNull] SpecParser.OneOrMorePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.OneOrMorePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOneOrMorePattern([NotNull] SpecParser.OneOrMorePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.RepeatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeatPattern([NotNull] SpecParser.RepeatPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.RepeatPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeatPattern([NotNull] SpecParser.RepeatPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.RulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRulePattern([NotNull] SpecParser.RulePatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.RulePattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRulePattern([NotNull] SpecParser.RulePatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpecParser.AlternationPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAlternationPattern([NotNull] SpecParser.AlternationPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpecParser.AlternationPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAlternationPattern([NotNull] SpecParser.AlternationPatternContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace PreAdamant.Compiler.Tools.Parse
