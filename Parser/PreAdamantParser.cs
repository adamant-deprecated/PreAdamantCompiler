//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Struct=11, Enum=12, New=13, NewPanic=14, NewResult=15, NewPointer=16, 
		NewPointerPanic=17, NewNullablePointer=18, Delete=19, Self=20, Uninitialized=21, 
		Where=22, Base=23, Operator=24, External=25, Var=26, Let=27, Get=28, Set=29, 
		Sealed=30, Override=31, Abstract=32, Params=33, Loop=34, While=35, If=36, 
		Else=37, For=38, In=39, Switch=40, Break=41, Continue=42, Return=43, Try=44, 
		TryPanic=45, TryResult=46, Catch=47, Finally=48, Throw=49, Implicit=50, 
		Explicit=51, Conversion=52, As=53, AsPanic=54, AsResult=55, Public=56, 
		Private=57, Protected=58, Internal=59, Safe=60, Unsafe=61, Own=62, Mutable=63, 
		Immutable=64, Copy=65, Move=66, Ref=67, Async=68, Await=69, Requires=70, 
		Ensures=71, Void=72, String=73, ByteType=74, IntType=75, UIntType=76, 
		FloatType=77, SizeType=78, OffsetType=79, UnsafeArrayType=80, Panic=81, 
		ReservedWord=82, BooleanLiteral=83, IntLiteral=84, NullLiteral=85, StringLiteral=86, 
		CharLiteral=87, Semicolon=88, Colon=89, Dot=90, DotDot=91, To=92, ColonColon=93, 
		Tilde=94, Comma=95, Lambda=96, LeftBrace=97, RightBrace=98, LeftAngle=99, 
		RightAngle=100, LeftBracket=101, RightBracket=102, LeftParen=103, RightParen=104, 
		Asterisk=105, AtSign=106, AddressOf=107, Coalesce=108, IsNull=109, Equal=110, 
		NotEqual=111, LessThanOrEqual=112, GreaterThanOrEqual=113, TypeList=114, 
		Plus=115, Minus=116, Divide=117, Pipe=118, And=119, Xor=120, Or=121, Not=122, 
		Assign=123, AddAssign=124, SubtractAssign=125, MultiplyAssign=126, DivideAssign=127, 
		AndAssign=128, XorAssign=129, OrAssign=130, PlaceHolder=131, Identifier=132, 
		EscapedIdentifier=133, Unknown=134;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_contract = 5, RULE_attribute = 6, 
		RULE_baseTypes = 7, RULE_accessModifier = 8, RULE_safetyModifier = 9, 
		RULE_classInheritanceModifier = 10, RULE_methodInheritanceModifier = 11, 
		RULE_explicitModifier = 12, RULE_asyncModifier = 13, RULE_typeParameters = 14, 
		RULE_typeParameter = 15, RULE_typeArguments = 16, RULE_identifierOrPredefinedType = 17, 
		RULE_simpleName = 18, RULE_name = 19, RULE_typeName = 20, RULE_valueType = 21, 
		RULE_type = 22, RULE_returnType = 23, RULE_lifetime = 24, RULE_funcTypeParameterList = 25, 
		RULE_funcTypeParameter = 26, RULE_constExpression = 27, RULE_typeParameterConstraintClause = 28, 
		RULE_typeParameterConstraint = 29, RULE_member = 30, RULE_parameterList = 31, 
		RULE_parameter = 32, RULE_parameterModifier = 33, RULE_whereClause = 34, 
		RULE_genericConstraint = 35, RULE_constructorInitializer = 36, RULE_argumentList = 37, 
		RULE_methodBody = 38, RULE_overloadableOperator = 39, RULE_statement = 40, 
		RULE_localVariableDeclaration = 41, RULE_expression = 42;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"contract", "attribute", "baseTypes", "accessModifier", "safetyModifier", 
		"classInheritanceModifier", "methodInheritanceModifier", "explicitModifier", 
		"asyncModifier", "typeParameters", "typeParameter", "typeArguments", "identifierOrPredefinedType", 
		"simpleName", "name", "typeName", "valueType", "type", "returnType", "lifetime", 
		"funcTypeParameterList", "funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"whereClause", "genericConstraint", "constructorInitializer", "argumentList", 
		"methodBody", "overloadableOperator", "statement", "localVariableDeclaration", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'struct'", "'enum'", "'new'", "'new!'", "'new?'", "'new*'", 
		"'new*!'", "'new*?'", "'delete'", "'self'", "'uninitialized'", "'where'", 
		"'base'", "'operator'", "'external'", "'var'", "'let'", "'get'", "'set'", 
		"'sealed'", "'override'", "'abstract'", "'params'", "'loop'", "'while'", 
		"'if'", "'else'", "'for'", "'in'", "'switch'", "'break'", "'continue'", 
		"'return'", "'try'", "'try!'", "'try?'", "'catch'", "'finally'", "'throw'", 
		"'implicit'", "'explicit'", "'conversion'", "'as'", "'as!'", "'as?'", 
		"'public'", "'private'", "'protected'", "'internal'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", "'immut'", "'copy'", "'move'", "'ref'", "'async'", "'await'", 
		"'requires'", "'ensures'", "'void'", "'string'", "'byte'", null, null, 
		null, "'size'", "'offset'", "'UnsafeArray'", "'!'", null, null, null, 
		"'null'", null, null, "';'", "':'", "'.'", "'..'", "'to'", "'::'", "'~'", 
		"','", "'->'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", 
		"'*'", "'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", 
		"'+'", "'-'", "'/'", "'|'", "'and'", "'xor'", "'or'", "'not'", "'='", 
		"'+='", "'-='", "'*='", "'/='", "'and='", "'xor='", "'or='", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Struct", "Enum", "New", "NewPanic", "NewResult", "NewPointer", 
		"NewPointerPanic", "NewNullablePointer", "Delete", "Self", "Uninitialized", 
		"Where", "Base", "Operator", "External", "Var", "Let", "Get", "Set", "Sealed", 
		"Override", "Abstract", "Params", "Loop", "While", "If", "Else", "For", 
		"In", "Switch", "Break", "Continue", "Return", "Try", "TryPanic", "TryResult", 
		"Catch", "Finally", "Throw", "Implicit", "Explicit", "Conversion", "As", 
		"AsPanic", "AsResult", "Public", "Private", "Protected", "Internal", "Safe", 
		"Unsafe", "Own", "Mutable", "Immutable", "Copy", "Move", "Ref", "Async", 
		"Await", "Requires", "Ensures", "Void", "String", "ByteType", "IntType", 
		"UIntType", "FloatType", "SizeType", "OffsetType", "UnsafeArrayType", 
		"Panic", "ReservedWord", "BooleanLiteral", "IntLiteral", "NullLiteral", 
		"StringLiteral", "CharLiteral", "Semicolon", "Colon", "Dot", "DotDot", 
		"To", "ColonColon", "Tilde", "Comma", "Lambda", "LeftBrace", "RightBrace", 
		"LeftAngle", "RightAngle", "LeftBracket", "RightBracket", "LeftParen", 
		"RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", "IsNull", 
		"Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", "TypeList", 
		"Plus", "Minus", "Divide", "Pipe", "And", "Xor", "Or", "Not", "Assign", 
		"AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", "AndAssign", 
		"XorAssign", "OrAssign", "PlaceHolder", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 86; usingDirective();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==AtSign) {
				{
				{
				State = 92; declaration();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 98; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(Using);
			State = 101; namespaceName();
			State = 102; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 106;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; identifier();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 109; Match(Dot);
				State = 110; identifier();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalDeclarationContext : DeclarationContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ExternalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public StructDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 270;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; Match(Namespace);
				State = 117; namespaceName();
				State = 118; Match(LeftBrace);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 119; usingDirective();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==AtSign) {
					{
					{
					State = 125; declaration();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 133; attribute();
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 139; accessModifier();
				State = 141;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 140; safetyModifier();
					}
				}

				State = 144;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 143; classInheritanceModifier();
					}
				}

				State = 147;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 146; Match(Mutable);
					}
				}

				State = 149; Match(Class);
				State = 150; identifier();
				State = 152;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 151; typeParameters();
					}
				}

				State = 155;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 154; baseTypes();
					}
				}

				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 157; typeParameterConstraintClause();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 163; Match(LeftBrace);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (Public - 56)) | (1L << (Private - 56)) | (1L << (Protected - 56)) | (1L << (Internal - 56)) | (1L << (AtSign - 56)))) != 0)) {
					{
					{
					State = 164; member();
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 170; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new StructDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 172; attribute();
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 178; accessModifier();
				State = 180;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 179; safetyModifier();
					}
				}

				State = 183;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 182; Match(Mutable);
					}
				}

				State = 185; Match(Struct);
				State = 186; identifier();
				State = 188;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 187; typeParameters();
					}
				}

				State = 191;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 190; baseTypes();
					}
				}

				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 193; typeParameterConstraintClause();
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 199; Match(LeftBrace);
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (Public - 56)) | (1L << (Private - 56)) | (1L << (Protected - 56)) | (1L << (Internal - 56)) | (1L << (AtSign - 56)))) != 0)) {
					{
					{
					State = 200; member();
					}
					}
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 206; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 208; attribute();
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 214; accessModifier();
				State = 215;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 216; identifier();
				State = 219;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 217; Match(Colon);
					State = 218; valueType();
					}
				}

				State = 223;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 221; Match(Assign);
					State = 222; expression(0);
					}
				}

				State = 225; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 227; attribute();
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 233; accessModifier();
				State = 235;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 234; safetyModifier();
					}
				}

				State = 238;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 237; asyncModifier();
					}
				}

				State = 240; identifier();
				State = 242;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 241; typeArguments();
					}
				}

				State = 244; parameterList();
				State = 245; Match(Lambda);
				State = 246; returnType();
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 247; typeParameterConstraintClause();
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 253; contract();
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 259; methodBody();
				}
				break;
			case 6:
				_localctx = new ExternalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 261; Match(External);
				State = 262; Match(LeftBrace);
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==AtSign) {
					{
					{
					State = 263; declaration();
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 269; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 10, RULE_contract);
		try {
			State = 276;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(Requires);
				State = 273; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; Match(Ensures);
				State = 275; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(AtSign);
			State = 279; identifier();
			State = 284;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 280; Match(LeftParen);
				State = 281; argumentList();
				State = 282; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 286; Match(Colon);
			State = 288;
			_la = TokenStream.La(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
				{
				State = 287; _localctx.baseType = name(0);
				}
			}

			State = 299;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 290; Match(Colon);
				State = 291; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 292; Match(Comma);
					State = 293; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public IToken token;
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_accessModifier);
		try {
			State = 305;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303; _localctx.token = Match(Protected);
				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 304; _localctx.token = Match(Internal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafetyModifierContext : ParserRuleContext {
		public IToken token;
		public SafetyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safetyModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSafetyModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSafetyModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafetyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafetyModifierContext safetyModifier() {
		SafetyModifierContext _localctx = new SafetyModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_safetyModifier);
		try {
			State = 309;
			switch (TokenStream.La(1)) {
			case Safe:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; _localctx.token = Match(Unsafe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public ClassInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritanceModifierContext classInheritanceModifier() {
		ClassInheritanceModifierContext _localctx = new ClassInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_classInheritanceModifier);
		try {
			State = 313;
			switch (TokenStream.La(1)) {
			case Abstract:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; _localctx.token = Match(Abstract);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; _localctx.token = Match(Sealed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public MethodInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInheritanceModifierContext methodInheritanceModifier() {
		MethodInheritanceModifierContext _localctx = new MethodInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodInheritanceModifier);
		try {
			State = 320;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; _localctx.token = Match(Abstract);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; _localctx.token = Match(Override);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317; _localctx.token = Match(Sealed);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 318; _localctx.token = Match(Sealed);
				State = 319; _localctx.token = Match(Override);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitModifierContext : ParserRuleContext {
		public IToken token;
		public ExplicitModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExplicitModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExplicitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitModifierContext explicitModifier() {
		ExplicitModifierContext _localctx = new ExplicitModifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_explicitModifier);
		try {
			State = 324;
			switch (TokenStream.La(1)) {
			case Implicit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; _localctx.token = Match(Explicit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsyncModifierContext : ParserRuleContext {
		public IToken token;
		public AsyncModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asyncModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAsyncModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAsyncModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsyncModifierContext asyncModifier() {
		AsyncModifierContext _localctx = new AsyncModifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_asyncModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; _localctx.token = Match(Async);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(LeftAngle);
			State = 329; typeParameter();
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 330; Match(Comma);
				State = 331; typeParameter();
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 337; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public TypeNameContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeParameter);
		int _la;
		try {
			State = 348;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; identifier();
				State = 341;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 340; _localctx.isList = Match(TypeList);
					}
				}

				State = 345;
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 343; Match(Colon);
					State = 344; _localctx.baseType = typeName(0);
					}
					break;
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(LeftAngle);
			State = 351; type();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 352; Match(Comma);
				State = 353; type();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 359; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifierOrPredefinedType);
		try {
			State = 370;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; identifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 3);
				{
				State = 363; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 364; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 365; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 366; _localctx.token = Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 367; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 368; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 369; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleName);
		try {
			State = 376;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; identifierOrPredefinedType();
				State = 374; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnqualifiedNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public UnqualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnqualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnqualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnqualifiedNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 379; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 381;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 382; Match(Dot);
					State = 383; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
	 
		public TypeNameContext() { }
		public virtual void CopyFrom(TypeNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : TypeNameContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : TypeNameContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : TypeNameContext {
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _types = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public TupleTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : TypeNameContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MaybeTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : TypeNameContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PointerTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			switch (TokenStream.La(1)) {
			case Asterisk:
				{
				_localctx = new PointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 390; Match(Asterisk);
				State = 392;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 391; ((PointerTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 394; typeName(3);
				}
				break;
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 395; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 409;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 396; Match(LeftBracket);
					State = 397; ((TupleTypeContext)_localctx)._typeName = typeName(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._typeName);
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 398; Match(Comma);
						State = 399; ((TupleTypeContext)_localctx)._typeName = typeName(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._typeName);
						}
						}
						State = 404;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 405; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 407; Match(LeftBracket);
					State = 408; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 411; funcTypeParameterList();
				State = 412; Match(Lambda);
				State = 413; returnType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 421;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MaybeTypeContext(new TypeNameContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 417;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 418; Match(IsNull);
					}
					} 
				}
				State = 423;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RefTypeContext : ValueTypeContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public RefTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterRefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitRefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LifetimeTypeContext : ValueTypeContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public LifetimeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetimeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetimeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_valueType);
		int _la;
		try {
			State = 439;
			switch (TokenStream.La(1)) {
			case Mutable:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new LifetimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 425;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 424; lifetime();
					}
				}

				State = 428;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 427; ((LifetimeTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 430; typeName(0);
				}
				break;
			case Ref:
				_localctx = new RefTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; Match(Ref);
				State = 433;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 432; Match(Var);
					}
				}

				State = 436;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 435; ((RefTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 438; typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_type);
		try {
			State = 443;
			switch (TokenStream.La(1)) {
			case Mutable:
			case Ref:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441; valueType();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442; Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_returnType);
		try {
			State = 447;
			switch (TokenStream.La(1)) {
			case Mutable:
			case Ref:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; type();
				}
				break;
			case Panic:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446; Match(Panic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 48, RULE_lifetime);
		try {
			State = 455;
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 449; Match(Tilde);
				State = 450; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451; Match(Tilde);
				State = 452; Match(Self);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 453; Match(Tilde);
				State = 454; Match(Own);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 470;
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457; Match(LeftParen);
				State = 458; funcTypeParameter();
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 459; Match(Comma);
					State = 460; funcTypeParameter();
					}
					}
					State = 465;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 466; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; Match(LeftParen);
				State = 469; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 472; parameterModifier();
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 478; valueType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_constExpression);
		try {
			State = 483;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 482; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 501;
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; Match(Where);
				State = 486; typeParameter();
				State = 487; Match(Colon);
				State = 488; typeParameterConstraint();
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 489; Match(Comma);
					State = 490; typeParameterConstraint();
					}
					}
					State = 495;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496; Match(Where);
				State = 497; typeParameter();
				State = 498;
				_la = TokenStream.La(1);
				if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (LeftAngle - 99)) | (1L << (RightAngle - 99)) | (1L << (LessThanOrEqual - 99)) | (1L << (GreaterThanOrEqual - 99)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 499; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeParameterConstraint);
		try {
			State = 508;
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 503; Match(New);
				State = 504; Match(LeftParen);
				State = 505; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 506; typeName(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 507; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CopyConstructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ExplicitModifierContext explicitModifier() {
			return GetRuleContext<ExplicitModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public WhereClauseContext[] whereClause() {
			return GetRuleContexts<WhereClauseContext>();
		}
		public WhereClauseContext whereClause(int i) {
			return GetRuleContext<WhereClauseContext>(i);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public CopyConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCopyConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCopyConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ExplicitModifierContext explicitModifier() {
			return GetRuleContext<ExplicitModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 60, RULE_member);
		int _la;
		try {
			State = 834;
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 510; attribute();
					}
					}
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 516; accessModifier();
				State = 518;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 517; safetyModifier();
					}
				}

				State = 520; Match(New);
				State = 522;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 521; identifier();
					}
				}

				State = 524; parameterList();
				State = 527;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 525; Match(Lambda);
					State = 526; returnType();
					}
				}

				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 529; whereClause();
					}
					}
					State = 534;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 536;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 535; constructorInitializer();
					}
				}

				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 538; contract();
					}
					}
					State = 543;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 544; methodBody();
				}
				break;
			case 2:
				_localctx = new CopyConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 546; attribute();
					}
					}
					State = 551;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 552; accessModifier();
				State = 554;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 553; safetyModifier();
					}
				}

				State = 556; explicitModifier();
				State = 557; Match(New);
				State = 558; Match(Copy);
				State = 559; parameterList();
				State = 562;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 560; Match(Lambda);
					State = 561; returnType();
					}
				}

				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 564; whereClause();
					}
					}
					State = 569;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 571;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 570; constructorInitializer();
					}
				}

				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 573; contract();
					}
					}
					State = 578;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 579; methodBody();
				}
				break;
			case 3:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 581; attribute();
					}
					}
					State = 586;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 587; accessModifier();
				State = 589;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 588; safetyModifier();
					}
				}

				State = 591; Match(Delete);
				State = 592; parameterList();
				State = 593; methodBody();
				}
				break;
			case 4:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 595; attribute();
					}
					}
					State = 600;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 601; accessModifier();
				State = 603;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 602; safetyModifier();
					}
				}

				State = 605; explicitModifier();
				State = 606; Match(Conversion);
				State = 608;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 607; typeArguments();
					}
				}

				State = 610; parameterList();
				State = 611; Match(Lambda);
				State = 612; returnType();
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 613; typeParameterConstraintClause();
					}
					}
					State = 618;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 619; contract();
					}
					}
					State = 624;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 625; methodBody();
				}
				break;
			case 5:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 627; attribute();
					}
					}
					State = 632;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 633; accessModifier();
				State = 634;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 636;
				_la = TokenStream.La(1);
				if (_la==Unsafe) {
					{
					State = 635; Match(Unsafe);
					}
				}

				State = 638; identifier();
				State = 641;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 639; Match(Colon);
					State = 640; valueType();
					}
				}

				State = 645;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 643; Match(Assign);
					State = 644; expression(0);
					}
				}

				State = 647; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 649; attribute();
					}
					}
					State = 654;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 655; accessModifier();
				State = 657;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 656; methodInheritanceModifier();
					}
				}

				State = 660;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 659; safetyModifier();
					}
				}

				State = 663;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 662; asyncModifier();
					}
				}

				State = 665;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 666; identifier();
				State = 668;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 667; typeArguments();
					}
				}

				State = 670; parameterList();
				State = 671; Match(Lambda);
				State = 672; returnType();
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 673; typeParameterConstraintClause();
					}
					}
					State = 678;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 679; contract();
					}
					}
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 685; methodBody();
				}
				break;
			case 7:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 687; attribute();
					}
					}
					State = 692;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 693; accessModifier();
				State = 695;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 694; methodInheritanceModifier();
					}
				}

				State = 698;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 697; safetyModifier();
					}
				}

				State = 701;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 700; asyncModifier();
					}
				}

				State = 703;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 704; Match(LeftBracket);
				State = 705; Match(RightBracket);
				State = 707;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 706; typeArguments();
					}
				}

				State = 709; parameterList();
				State = 710; Match(Lambda);
				State = 711; returnType();
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 712; typeParameterConstraintClause();
					}
					}
					State = 717;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 718; contract();
					}
					}
					State = 723;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 724; methodBody();
				}
				break;
			case 8:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 726; attribute();
					}
					}
					State = 731;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 732; accessModifier();
				State = 734;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 733; methodInheritanceModifier();
					}
				}

				State = 737;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 736; safetyModifier();
					}
				}

				State = 740;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 739; asyncModifier();
					}
				}

				State = 742; identifier();
				State = 744;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 743; typeArguments();
					}
				}

				State = 746; parameterList();
				State = 747; Match(Lambda);
				State = 748; returnType();
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 749; typeParameterConstraintClause();
					}
					}
					State = 754;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 758;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 755; contract();
					}
					}
					State = 760;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 761; methodBody();
				}
				break;
			case 9:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 763; attribute();
					}
					}
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 769; accessModifier();
				State = 771;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 770; methodInheritanceModifier();
					}
				}

				State = 774;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 773; safetyModifier();
					}
				}

				State = 777;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 776; asyncModifier();
					}
				}

				State = 779; Match(Operator);
				State = 780; overloadableOperator();
				State = 781; parameterList();
				State = 782; Match(Lambda);
				State = 783; returnType();
				State = 787;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 784; typeParameterConstraintClause();
					}
					}
					State = 789;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 790; contract();
					}
					}
					State = 795;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 796; methodBody();
				}
				break;
			case 10:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AtSign) {
					{
					{
					State = 798; attribute();
					}
					}
					State = 803;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 804; accessModifier();
				State = 806;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 805; safetyModifier();
					}
				}

				State = 809;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 808; classInheritanceModifier();
					}
				}

				State = 811; Match(Class);
				State = 812; identifier();
				State = 814;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 813; typeParameters();
					}
				}

				State = 817;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 816; baseTypes();
					}
				}

				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 819; typeParameterConstraintClause();
					}
					}
					State = 824;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 825; Match(LeftBrace);
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (Public - 56)) | (1L << (Private - 56)) | (1L << (Protected - 56)) | (1L << (Internal - 56)) | (1L << (AtSign - 56)))) != 0)) {
					{
					{
					State = 826; member();
					}
					}
					State = 831;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 832; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 62, RULE_parameterList);
		int _la;
		try {
			State = 849;
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 836; Match(LeftParen);
				State = 837; parameter();
				State = 842;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 838; Match(Comma);
					State = 839; parameter();
					}
					}
					State = 844;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 845; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 847; Match(LeftParen);
				State = 848; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public IToken isVar;
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public IToken isRef;
		public IToken isMut;
		public IToken token;
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameter);
		int _la;
		try {
			State = 872;
			switch (TokenStream.La(1)) {
			case Var:
			case Params:
			case Colon:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 852;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 851; ((NamedParameterContext)_localctx).isVar = Match(Var);
					}
				}

				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 854; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 859;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 861;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 860; identifier();
					}
				}

				State = 863; Match(Colon);
				State = 864; valueType();
				}
				break;
			case Self:
			case Mutable:
			case Ref:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				_la = TokenStream.La(1);
				if (_la==Ref) {
					{
					State = 865; ((SelfParameterContext)_localctx).isRef = Match(Ref);
					}
				}

				State = 869;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 868; ((SelfParameterContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 871; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public GenericConstraintContext _genericConstraint;
		public IList<GenericConstraintContext> _constraints = new List<GenericConstraintContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public GenericConstraintContext[] genericConstraint() {
			return GetRuleContexts<GenericConstraintContext>();
		}
		public GenericConstraintContext genericConstraint(int i) {
			return GetRuleContext<GenericConstraintContext>(i);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; Match(Where);
			State = 877; typeName(0);
			State = 878; Match(Colon);
			State = 879; _localctx._genericConstraint = genericConstraint();
			_localctx._constraints.Add(_localctx._genericConstraint);
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 880; Match(Comma);
				State = 881; _localctx._genericConstraint = genericConstraint();
				_localctx._constraints.Add(_localctx._genericConstraint);
				}
				}
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public GenericConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintContext genericConstraint() {
		GenericConstraintContext _localctx = new GenericConstraintContext(Context, State);
		EnterRule(_localctx, 70, RULE_genericConstraint);
		try {
			State = 893;
			switch (TokenStream.La(1)) {
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887; typeName(0);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888; Match(Class);
				}
				break;
			case Struct:
				EnterOuterAlt(_localctx, 3);
				{
				State = 889; Match(Struct);
				}
				break;
			case Copy:
				EnterOuterAlt(_localctx, 4);
				{
				State = 890; Match(Copy);
				State = 891; Match(LeftParen);
				State = 892; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 72, RULE_constructorInitializer);
		try {
			State = 907;
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895; Match(Colon);
				State = 896; Match(Base);
				State = 897; Match(LeftParen);
				State = 898; argumentList();
				State = 899; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 901; Match(Colon);
				State = 902; Match(Self);
				State = 903; Match(LeftParen);
				State = 904; argumentList();
				State = 905; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 74, RULE_argumentList);
		int _la;
		try {
			State = 918;
			switch (TokenStream.La(1)) {
			case New:
			case Delete:
			case Self:
			case Uninitialized:
			case Try:
			case TryPanic:
			case TryResult:
			case Unsafe:
			case Await:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case CharLiteral:
			case LeftParen:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 909; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 914;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 910; Match(Comma);
					State = 911; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 916;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
	 
		public MethodBodyContext() { }
		public virtual void CopyFrom(MethodBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockMethodBodyContext : MethodBodyContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoMethodBodyContext : MethodBodyContext {
		public NoMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNoMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNoMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 76, RULE_methodBody);
		int _la;
		try {
			State = 929;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				_localctx = new BlockMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 920; Match(LeftBrace);
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (New - 13)) | (1L << (Delete - 13)) | (1L << (Self - 13)) | (1L << (Uninitialized - 13)) | (1L << (Var - 13)) | (1L << (Let - 13)) | (1L << (While - 13)) | (1L << (If - 13)) | (1L << (For - 13)) | (1L << (Continue - 13)) | (1L << (Return - 13)) | (1L << (Try - 13)) | (1L << (TryPanic - 13)) | (1L << (TryResult - 13)) | (1L << (Throw - 13)) | (1L << (Unsafe - 13)) | (1L << (Await - 13)) | (1L << (String - 13)) | (1L << (ByteType - 13)) | (1L << (IntType - 13)) | (1L << (UIntType - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FloatType - 77)) | (1L << (SizeType - 77)) | (1L << (OffsetType - 77)) | (1L << (UnsafeArrayType - 77)) | (1L << (BooleanLiteral - 77)) | (1L << (IntLiteral - 77)) | (1L << (NullLiteral - 77)) | (1L << (StringLiteral - 77)) | (1L << (CharLiteral - 77)) | (1L << (Semicolon - 77)) | (1L << (LeftBrace - 77)) | (1L << (LeftParen - 77)) | (1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Pipe - 77)) | (1L << (Not - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					{
					State = 921; ((BlockMethodBodyContext)_localctx)._statement = statement();
					((BlockMethodBodyContext)_localctx)._statements.Add(((BlockMethodBodyContext)_localctx)._statement);
					}
					}
					State = 926;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 927; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new NoMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 928; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_overloadableOperator);
		try {
			State = 943;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 933; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 934; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 935; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 936; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 937; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 938; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 939; Match(LeftBracket);
				State = 940; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 941; Match(Pipe);
				State = 942; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public StatementContext then;
		public StatementContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_statement);
		int _la;
		try {
			State = 1019;
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 945; localVariableDeclaration();
				State = 946; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 948; Match(Unsafe);
				State = 949; Match(LeftBrace);
				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (New - 13)) | (1L << (Delete - 13)) | (1L << (Self - 13)) | (1L << (Uninitialized - 13)) | (1L << (Var - 13)) | (1L << (Let - 13)) | (1L << (While - 13)) | (1L << (If - 13)) | (1L << (For - 13)) | (1L << (Continue - 13)) | (1L << (Return - 13)) | (1L << (Try - 13)) | (1L << (TryPanic - 13)) | (1L << (TryResult - 13)) | (1L << (Throw - 13)) | (1L << (Unsafe - 13)) | (1L << (Await - 13)) | (1L << (String - 13)) | (1L << (ByteType - 13)) | (1L << (IntType - 13)) | (1L << (UIntType - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FloatType - 77)) | (1L << (SizeType - 77)) | (1L << (OffsetType - 77)) | (1L << (UnsafeArrayType - 77)) | (1L << (BooleanLiteral - 77)) | (1L << (IntLiteral - 77)) | (1L << (NullLiteral - 77)) | (1L << (StringLiteral - 77)) | (1L << (CharLiteral - 77)) | (1L << (Semicolon - 77)) | (1L << (LeftBrace - 77)) | (1L << (LeftParen - 77)) | (1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Pipe - 77)) | (1L << (Not - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					{
					State = 950; statement();
					}
					}
					State = 955;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 956; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 957; Match(LeftBrace);
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (New - 13)) | (1L << (Delete - 13)) | (1L << (Self - 13)) | (1L << (Uninitialized - 13)) | (1L << (Var - 13)) | (1L << (Let - 13)) | (1L << (While - 13)) | (1L << (If - 13)) | (1L << (For - 13)) | (1L << (Continue - 13)) | (1L << (Return - 13)) | (1L << (Try - 13)) | (1L << (TryPanic - 13)) | (1L << (TryResult - 13)) | (1L << (Throw - 13)) | (1L << (Unsafe - 13)) | (1L << (Await - 13)) | (1L << (String - 13)) | (1L << (ByteType - 13)) | (1L << (IntType - 13)) | (1L << (UIntType - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FloatType - 77)) | (1L << (SizeType - 77)) | (1L << (OffsetType - 77)) | (1L << (UnsafeArrayType - 77)) | (1L << (BooleanLiteral - 77)) | (1L << (IntLiteral - 77)) | (1L << (NullLiteral - 77)) | (1L << (StringLiteral - 77)) | (1L << (CharLiteral - 77)) | (1L << (Semicolon - 77)) | (1L << (LeftBrace - 77)) | (1L << (LeftParen - 77)) | (1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Pipe - 77)) | (1L << (Not - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					{
					State = 958; statement();
					}
					}
					State = 963;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 964; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 965; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 966; expression(0);
				State = 967; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 969; Match(Return);
				State = 971;
				_la = TokenStream.La(1);
				if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (New - 13)) | (1L << (Delete - 13)) | (1L << (Self - 13)) | (1L << (Uninitialized - 13)) | (1L << (Try - 13)) | (1L << (TryPanic - 13)) | (1L << (TryResult - 13)) | (1L << (Unsafe - 13)) | (1L << (Await - 13)) | (1L << (String - 13)) | (1L << (ByteType - 13)) | (1L << (IntType - 13)) | (1L << (UIntType - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FloatType - 77)) | (1L << (SizeType - 77)) | (1L << (OffsetType - 77)) | (1L << (UnsafeArrayType - 77)) | (1L << (BooleanLiteral - 77)) | (1L << (IntLiteral - 77)) | (1L << (NullLiteral - 77)) | (1L << (StringLiteral - 77)) | (1L << (CharLiteral - 77)) | (1L << (LeftParen - 77)) | (1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Pipe - 77)) | (1L << (Not - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
					{
					State = 970; expression(0);
					}
				}

				State = 973; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 974; Match(Throw);
				State = 975; expression(0);
				State = 976; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 978; Match(If);
				State = 979; Match(LeftParen);
				State = 980; ((IfStatementContext)_localctx).condition = expression(0);
				State = 981; Match(RightParen);
				State = 982; ((IfStatementContext)_localctx).then = statement();
				State = 985;
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 983; Match(Else);
					State = 984; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 987; Match(If);
				State = 988; Match(LeftParen);
				State = 989; localVariableDeclaration();
				State = 990; Match(RightParen);
				State = 991; ((LetIfStatementContext)_localctx).then = statement();
				State = 994;
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 992; Match(Else);
					State = 993; ((LetIfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 996; Match(For);
				State = 997; Match(LeftParen);
				State = 1000;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 998; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 999; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1002; Match(In);
				State = 1003; expression(0);
				State = 1004; Match(RightParen);
				State = 1005; statement();
				}
				break;
			case 11:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1007; Match(While);
				State = 1008; Match(LeftParen);
				State = 1009; expression(0);
				State = 1010; Match(RightParen);
				State = 1011; statement();
				}
				break;
			case 12:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1013; Match(Delete);
				State = 1014; expression(0);
				State = 1015; Match(Semicolon);
				}
				break;
			case 13:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1017; Match(Continue);
				State = 1018; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_localVariableDeclaration);
		int _la;
		try {
			State = 1049;
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1021;
				_localctx.kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					_localctx.kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1022; identifier();
				State = 1024;
				_la = TokenStream.La(1);
				if (_la==IsNull) {
					{
					State = 1023; Match(IsNull);
					}
				}

				State = 1026; Match(Colon);
				State = 1027; valueType();
				State = 1030;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 1028; Match(Assign);
					State = 1029; expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1032;
				_localctx.kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					_localctx.kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1033; Match(LeftBracket);
				State = 1034; identifier();
				State = 1039;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 1035; Match(Comma);
					State = 1036; identifier();
					}
					}
					State = 1041;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1042; Match(RightBracket);
				State = 1043; Match(Colon);
				State = 1044; valueType();
				State = 1047;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 1045; Match(Assign);
					State = 1046; expression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewMemoryExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public NewMemoryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewMemoryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewMemoryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewMemoryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteMemoryExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DeleteMemoryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteMemoryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteMemoryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteMemoryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ToExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterToExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitToExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public ArgumentListContext placementArguments;
		public ArgumentListContext constructorArguments;
		public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnsafeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlacementDeleteExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PlacementDeleteExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPlacementDeleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPlacementDeleteExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlacementDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1052; Match(Await);
				State = 1053; expression(30);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1054;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Asterisk - 105)) | (1L << (AddressOf - 105)) | (1L << (Plus - 105)) | (1L << (Minus - 105)) | (1L << (Not - 105)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1055; expression(28);
				}
				break;
			case 3:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1056;
				((TryExpressionContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1057; expression(13);
				}
				break;
			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1058; Match(LeftParen);
				State = 1059; expression(0);
				State = 1060; Match(RightParen);
				}
				break;
			case 5:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1062; Match(Pipe);
				State = 1063; expression(0);
				State = 1064; Match(Pipe);
				}
				break;
			case 6:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1066; Match(New);
				State = 1071;
				_la = TokenStream.La(1);
				if (_la==LeftParen) {
					{
					State = 1067; Match(LeftParen);
					State = 1068; ((NewExpressionContext)_localctx).placementArguments = argumentList();
					State = 1069; Match(RightParen);
					}
				}

				State = 1075;
				switch (TokenStream.La(1)) {
				case String:
				case ByteType:
				case IntType:
				case UIntType:
				case FloatType:
				case SizeType:
				case OffsetType:
				case UnsafeArrayType:
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1073; name(0);
					}
					break;
				case Copy:
					{
					State = 1074; Match(Copy);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1077; Match(LeftParen);
				State = 1078; ((NewExpressionContext)_localctx).constructorArguments = argumentList();
				State = 1079; Match(RightParen);
				}
				break;
			case 7:
				{
				_localctx = new NewMemoryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1081; Match(New);
				State = 1083;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 1082; typeArguments();
					}
				}

				State = 1085; Match(LeftParen);
				State = 1086; argumentList();
				State = 1087; Match(RightParen);
				}
				break;
			case 8:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1089; Match(New);
				State = 1091;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1090; baseTypes();
					}
				}

				State = 1093; Match(LeftParen);
				State = 1094; argumentList();
				State = 1095; Match(RightParen);
				State = 1096; Match(LeftBrace);
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (Public - 56)) | (1L << (Private - 56)) | (1L << (Protected - 56)) | (1L << (Internal - 56)) | (1L << (AtSign - 56)))) != 0)) {
					{
					{
					State = 1097; member();
					}
					}
					State = 1102;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1103; Match(RightBrace);
				}
				break;
			case 9:
				{
				_localctx = new DeleteMemoryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1105; Match(Delete);
				State = 1106; Match(LeftParen);
				State = 1107; argumentList();
				State = 1108; Match(RightParen);
				}
				break;
			case 10:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 1112;
				switch (TokenStream.La(1)) {
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1110; identifier();
					}
					break;
				case LeftParen:
					{
					State = 1111; parameterList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1114; Match(Lambda);
				State = 1124;
				switch (TokenStream.La(1)) {
				case New:
				case Delete:
				case Self:
				case Uninitialized:
				case Try:
				case TryPanic:
				case TryResult:
				case Unsafe:
				case Await:
				case String:
				case ByteType:
				case IntType:
				case UIntType:
				case FloatType:
				case SizeType:
				case OffsetType:
				case UnsafeArrayType:
				case BooleanLiteral:
				case IntLiteral:
				case NullLiteral:
				case StringLiteral:
				case CharLiteral:
				case LeftParen:
				case Asterisk:
				case AddressOf:
				case Plus:
				case Minus:
				case Pipe:
				case Not:
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1115; expression(0);
					}
					break;
				case LeftBrace:
					{
					State = 1116; Match(LeftBrace);
					State = 1120;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (New - 13)) | (1L << (Delete - 13)) | (1L << (Self - 13)) | (1L << (Uninitialized - 13)) | (1L << (Var - 13)) | (1L << (Let - 13)) | (1L << (While - 13)) | (1L << (If - 13)) | (1L << (For - 13)) | (1L << (Continue - 13)) | (1L << (Return - 13)) | (1L << (Try - 13)) | (1L << (TryPanic - 13)) | (1L << (TryResult - 13)) | (1L << (Throw - 13)) | (1L << (Unsafe - 13)) | (1L << (Await - 13)) | (1L << (String - 13)) | (1L << (ByteType - 13)) | (1L << (IntType - 13)) | (1L << (UIntType - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FloatType - 77)) | (1L << (SizeType - 77)) | (1L << (OffsetType - 77)) | (1L << (UnsafeArrayType - 77)) | (1L << (BooleanLiteral - 77)) | (1L << (IntLiteral - 77)) | (1L << (NullLiteral - 77)) | (1L << (StringLiteral - 77)) | (1L << (CharLiteral - 77)) | (1L << (Semicolon - 77)) | (1L << (LeftBrace - 77)) | (1L << (LeftParen - 77)) | (1L << (Asterisk - 77)) | (1L << (AddressOf - 77)) | (1L << (Plus - 77)) | (1L << (Minus - 77)) | (1L << (Pipe - 77)) | (1L << (Not - 77)) | (1L << (Identifier - 77)) | (1L << (EscapedIdentifier - 77)))) != 0)) {
						{
						{
						State = 1117; ((LambdaExpressionContext)_localctx)._statement = statement();
						((LambdaExpressionContext)_localctx)._statements.Add(((LambdaExpressionContext)_localctx)._statement);
						}
						}
						State = 1122;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 1123; Match(RightBrace);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 11:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1126; simpleName();
				}
				break;
			case 12:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1127; Match(NullLiteral);
				}
				break;
			case 13:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1128; Match(Self);
				}
				break;
			case 14:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1129; Match(BooleanLiteral);
				}
				break;
			case 15:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1130; Match(IntLiteral);
				}
				break;
			case 16:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1131; Match(Uninitialized);
				}
				break;
			case 17:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1132; Match(StringLiteral);
				}
				break;
			case 18:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1133; Match(CharLiteral);
				}
				break;
			case 19:
				{
				_localctx = new UnsafeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1134; Match(Unsafe);
				State = 1135; Match(LeftParen);
				State = 1136; expression(0);
				State = 1137; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1206;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1204;
					switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1141;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 1142; Match(DotDot);
						State = 1143; expression(35);
						}
						break;
					case 2:
						{
						_localctx = new ToExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1144;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 1145; Match(To);
						State = 1146; expression(34);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1147;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1148;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1149; expression(28);
						}
						break;
					case 4:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1150;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1151;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1152; expression(27);
						}
						break;
					case 5:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1153;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1154;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (LeftAngle - 99)) | (1L << (RightAngle - 99)) | (1L << (LessThanOrEqual - 99)) | (1L << (GreaterThanOrEqual - 99)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1155; expression(26);
						}
						break;
					case 6:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1156;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1157;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1158; ((EqualityExpressionContext)_localctx).rhs = expression(25);
						}
						break;
					case 7:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1159;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1160; Match(And);
						State = 1161; expression(24);
						}
						break;
					case 8:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1162;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1163; Match(Xor);
						State = 1164; expression(23);
						}
						break;
					case 9:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1165;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1166; Match(Or);
						State = 1167; expression(22);
						}
						break;
					case 10:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1168;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1169; Match(Coalesce);
						State = 1170; expression(21);
						}
						break;
					case 11:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1171;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1172; Match(In);
						State = 1173; expression(20);
						}
						break;
					case 12:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1174;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1175; Match(IsNull);
						State = 1176; ((IfExpressionContext)_localctx).then = expression(0);
						State = 1177; Match(Colon);
						State = 1178; ((IfExpressionContext)_localctx).@else = expression(12);
						}
						break;
					case 13:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1180;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1181;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (Assign - 123)) | (1L << (AddAssign - 123)) | (1L << (SubtractAssign - 123)) | (1L << (MultiplyAssign - 123)) | (1L << (DivideAssign - 123)) | (1L << (AndAssign - 123)) | (1L << (XorAssign - 123)) | (1L << (OrAssign - 123)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1182; ((AssignmentExpressionContext)_localctx).rvalue = expression(11);
						}
						break;
					case 14:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1183;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 1184; Match(Dot);
						State = 1185; identifier();
						}
						break;
					case 15:
						{
						_localctx = new PlacementDeleteExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1186;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 1187; Match(Dot);
						State = 1188; Match(Delete);
						}
						break;
					case 16:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1189;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1190; Match(LeftParen);
						State = 1191; argumentList();
						State = 1192; Match(RightParen);
						}
						break;
					case 17:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1194;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1195; Match(LeftBracket);
						State = 1196; argumentList();
						State = 1197; Match(RightBracket);
						}
						break;
					case 18:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1199;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1200; Match(IsNull);
						}
						break;
					case 19:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1201;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1202;
						((CastExpressionContext)_localctx).kind = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1203; typeName(0);
						}
						break;
					}
					} 
				}
				State = 1208;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return name_sempred((NameContext)_localctx, predIndex);
		case 20: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 42: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 34);
		case 3: return Precpred(Context, 33);
		case 4: return Precpred(Context, 27);
		case 5: return Precpred(Context, 26);
		case 6: return Precpred(Context, 25);
		case 7: return Precpred(Context, 24);
		case 8: return Precpred(Context, 23);
		case 9: return Precpred(Context, 22);
		case 10: return Precpred(Context, 21);
		case 11: return Precpred(Context, 20);
		case 12: return Precpred(Context, 19);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 36);
		case 16: return Precpred(Context, 35);
		case 17: return Precpred(Context, 32);
		case 18: return Precpred(Context, 31);
		case 19: return Precpred(Context, 29);
		case 20: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x88\x4BC\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\a\x2Z\n\x2\f\x2\xE\x2]\v\x2\x3\x2\a\x2`\n\x2\f\x2"+
		"\xE\x2\x63\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4"+
		"m\n\x4\x3\x5\x3\x5\x3\x5\a\x5r\n\x5\f\x5\xE\x5u\v\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\a\x6{\n\x6\f\x6\xE\x6~\v\x6\x3\x6\a\x6\x81\n\x6\f\x6\xE\x6\x84"+
		"\v\x6\x3\x6\x3\x6\x3\x6\a\x6\x89\n\x6\f\x6\xE\x6\x8C\v\x6\x3\x6\x3\x6"+
		"\x5\x6\x90\n\x6\x3\x6\x5\x6\x93\n\x6\x3\x6\x5\x6\x96\n\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6\x9B\n\x6\x3\x6\x5\x6\x9E\n\x6\x3\x6\a\x6\xA1\n\x6\f\x6\xE"+
		"\x6\xA4\v\x6\x3\x6\x3\x6\a\x6\xA8\n\x6\f\x6\xE\x6\xAB\v\x6\x3\x6\x3\x6"+
		"\x3\x6\a\x6\xB0\n\x6\f\x6\xE\x6\xB3\v\x6\x3\x6\x3\x6\x5\x6\xB7\n\x6\x3"+
		"\x6\x5\x6\xBA\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\xBF\n\x6\x3\x6\x5\x6\xC2\n"+
		"\x6\x3\x6\a\x6\xC5\n\x6\f\x6\xE\x6\xC8\v\x6\x3\x6\x3\x6\a\x6\xCC\n\x6"+
		"\f\x6\xE\x6\xCF\v\x6\x3\x6\x3\x6\x3\x6\a\x6\xD4\n\x6\f\x6\xE\x6\xD7\v"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xDE\n\x6\x3\x6\x3\x6\x5\x6\xE2"+
		"\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xE7\n\x6\f\x6\xE\x6\xEA\v\x6\x3\x6\x3\x6"+
		"\x5\x6\xEE\n\x6\x3\x6\x5\x6\xF1\n\x6\x3\x6\x3\x6\x5\x6\xF5\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\xFB\n\x6\f\x6\xE\x6\xFE\v\x6\x3\x6\a\x6\x101\n"+
		"\x6\f\x6\xE\x6\x104\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x10B\n\x6"+
		"\f\x6\xE\x6\x10E\v\x6\x3\x6\x5\x6\x111\n\x6\x3\a\x3\a\x3\a\x3\a\x5\a\x117"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x11F\n\b\x3\t\x3\t\x5\t\x123\n"+
		"\t\x3\t\x3\t\x3\t\x3\t\a\t\x129\n\t\f\t\xE\t\x12C\v\t\x5\t\x12E\n\t\x3"+
		"\n\x3\n\x3\n\x3\n\x5\n\x134\n\n\x3\v\x3\v\x5\v\x138\n\v\x3\f\x3\f\x5\f"+
		"\x13C\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x143\n\r\x3\xE\x3\xE\x5\xE\x147"+
		"\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x14F\n\x10\f\x10\xE"+
		"\x10\x152\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\x158\n\x11\x3\x11\x3"+
		"\x11\x5\x11\x15C\n\x11\x3\x11\x5\x11\x15F\n\x11\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\a\x12\x165\n\x12\f\x12\xE\x12\x168\v\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x175\n\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x17B\n\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\a\x15\x183\n\x15\f\x15\xE\x15\x186\v\x15\x3\x16\x3"+
		"\x16\x3\x16\x5\x16\x18B\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\a\x16\x193\n\x16\f\x16\xE\x16\x196\v\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x5\x16\x19C\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x1A2\n\x16\x3\x16"+
		"\x3\x16\a\x16\x1A6\n\x16\f\x16\xE\x16\x1A9\v\x16\x3\x17\x5\x17\x1AC\n"+
		"\x17\x3\x17\x5\x17\x1AF\n\x17\x3\x17\x3\x17\x3\x17\x5\x17\x1B4\n\x17\x3"+
		"\x17\x5\x17\x1B7\n\x17\x3\x17\x5\x17\x1BA\n\x17\x3\x18\x3\x18\x5\x18\x1BE"+
		"\n\x18\x3\x19\x3\x19\x5\x19\x1C2\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x1CA\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x1D0\n"+
		"\x1B\f\x1B\xE\x1B\x1D3\v\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1D9\n"+
		"\x1B\x3\x1C\a\x1C\x1DC\n\x1C\f\x1C\xE\x1C\x1DF\v\x1C\x3\x1C\x3\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x5\x1D\x1E6\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\a\x1E\x1EE\n\x1E\f\x1E\xE\x1E\x1F1\v\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x1F8\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x1FF\n\x1F\x3 \a \x202\n \f \xE \x205\v \x3 \x3 \x5 \x209\n \x3 "+
		"\x3 \x5 \x20D\n \x3 \x3 \x3 \x5 \x212\n \x3 \a \x215\n \f \xE \x218\v"+
		" \x3 \x5 \x21B\n \x3 \a \x21E\n \f \xE \x221\v \x3 \x3 \x3 \a \x226\n"+
		" \f \xE \x229\v \x3 \x3 \x5 \x22D\n \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x235"+
		"\n \x3 \a \x238\n \f \xE \x23B\v \x3 \x5 \x23E\n \x3 \a \x241\n \f \xE"+
		" \x244\v \x3 \x3 \x3 \a \x249\n \f \xE \x24C\v \x3 \x3 \x5 \x250\n \x3"+
		" \x3 \x3 \x3 \x3 \a \x257\n \f \xE \x25A\v \x3 \x3 \x5 \x25E\n \x3 \x3"+
		" \x3 \x5 \x263\n \x3 \x3 \x3 \x3 \a \x269\n \f \xE \x26C\v \x3 \a \x26F"+
		"\n \f \xE \x272\v \x3 \x3 \x3 \a \x277\n \f \xE \x27A\v \x3 \x3 \x3 \x5"+
		" \x27F\n \x3 \x3 \x3 \x5 \x284\n \x3 \x3 \x5 \x288\n \x3 \x3 \x3 \a \x28D"+
		"\n \f \xE \x290\v \x3 \x3 \x5 \x294\n \x3 \x5 \x297\n \x3 \x5 \x29A\n"+
		" \x3 \x3 \x3 \x5 \x29F\n \x3 \x3 \x3 \x3 \a \x2A5\n \f \xE \x2A8\v \x3"+
		" \a \x2AB\n \f \xE \x2AE\v \x3 \x3 \x3 \a \x2B3\n \f \xE \x2B6\v \x3 "+
		"\x3 \x5 \x2BA\n \x3 \x5 \x2BD\n \x3 \x5 \x2C0\n \x3 \x3 \x3 \x3 \x5 \x2C6"+
		"\n \x3 \x3 \x3 \x3 \a \x2CC\n \f \xE \x2CF\v \x3 \a \x2D2\n \f \xE \x2D5"+
		"\v \x3 \x3 \x3 \a \x2DA\n \f \xE \x2DD\v \x3 \x3 \x5 \x2E1\n \x3 \x5 "+
		"\x2E4\n \x3 \x5 \x2E7\n \x3 \x3 \x5 \x2EB\n \x3 \x3 \x3 \x3 \a \x2F1\n"+
		" \f \xE \x2F4\v \x3 \a \x2F7\n \f \xE \x2FA\v \x3 \x3 \x3 \a \x2FF\n "+
		"\f \xE \x302\v \x3 \x3 \x5 \x306\n \x3 \x5 \x309\n \x3 \x5 \x30C\n \x3"+
		" \x3 \x3 \x3 \x3 \x3 \a \x314\n \f \xE \x317\v \x3 \a \x31A\n \f \xE "+
		"\x31D\v \x3 \x3 \x3 \a \x322\n \f \xE \x325\v \x3 \x3 \x5 \x329\n \x3"+
		" \x5 \x32C\n \x3 \x3 \x3 \x5 \x331\n \x3 \x5 \x334\n \x3 \a \x337\n \f"+
		" \xE \x33A\v \x3 \x3 \a \x33E\n \f \xE \x341\v \x3 \x3 \x5 \x345\n \x3"+
		"!\x3!\x3!\x3!\a!\x34B\n!\f!\xE!\x34E\v!\x3!\x3!\x3!\x3!\x5!\x354\n!\x3"+
		"\"\x5\"\x357\n\"\x3\"\a\"\x35A\n\"\f\"\xE\"\x35D\v\"\x3\"\x5\"\x360\n"+
		"\"\x3\"\x3\"\x3\"\x5\"\x365\n\"\x3\"\x5\"\x368\n\"\x3\"\x5\"\x36B\n\""+
		"\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\a$\x375\n$\f$\xE$\x378\v$\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x5%\x380\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x5&\x38E\n&\x3\'\x3\'\x3\'\a\'\x393\n\'\f\'\xE\'\x396\v\'\x3\'\x5"+
		"\'\x399\n\'\x3(\x3(\a(\x39D\n(\f(\xE(\x3A0\v(\x3(\x3(\x5(\x3A4\n(\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x3B2\n)\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\a*\x3BA\n*\f*\xE*\x3BD\v*\x3*\x3*\x3*\a*\x3C2\n*\f*\xE*\x3C5"+
		"\v*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3CE\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x5*\x3DC\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3E5"+
		"\n*\x3*\x3*\x3*\x3*\x5*\x3EB\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3FE\n*\x3+\x3+\x3+\x5+\x403\n+\x3+"+
		"\x3+\x3+\x3+\x5+\x409\n+\x3+\x3+\x3+\x3+\x3+\a+\x410\n+\f+\xE+\x413\v"+
		"+\x3+\x3+\x3+\x3+\x3+\x5+\x41A\n+\x5+\x41C\n+\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x432\n,\x3"+
		",\x3,\x5,\x436\n,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x43E\n,\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x5,\x446\n,\x3,\x3,\x3,\x3,\x3,\a,\x44D\n,\f,\xE,\x450\v,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x45B\n,\x3,\x3,\x3,\x3,\a,\x461"+
		"\n,\f,\xE,\x464\v,\x3,\x5,\x467\n,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x5,\x476\n,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\a,\x4B7\n,\f,\xE,\x4BA\v,\x3,\x2\x5(*V-\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTV\x2\f\x3\x2\x1C\x1D\x4\x2\x65\x66rs\x3\x2\x1E\x1F\x6\x2kkmmuv||\x3"+
		"\x2.\x30\x4\x2kkww\x3\x2uv\x3\x2pq\x3\x2}\x84\x3\x2\x37\x39\x58B\x2[\x3"+
		"\x2\x2\x2\x4\x66\x3\x2\x2\x2\x6l\x3\x2\x2\x2\bn\x3\x2\x2\x2\n\x110\x3"+
		"\x2\x2\x2\f\x116\x3\x2\x2\x2\xE\x118\x3\x2\x2\x2\x10\x120\x3\x2\x2\x2"+
		"\x12\x133\x3\x2\x2\x2\x14\x137\x3\x2\x2\x2\x16\x13B\x3\x2\x2\x2\x18\x142"+
		"\x3\x2\x2\x2\x1A\x146\x3\x2\x2\x2\x1C\x148\x3\x2\x2\x2\x1E\x14A\x3\x2"+
		"\x2\x2 \x15E\x3\x2\x2\x2\"\x160\x3\x2\x2\x2$\x174\x3\x2\x2\x2&\x17A\x3"+
		"\x2\x2\x2(\x17C\x3\x2\x2\x2*\x1A1\x3\x2\x2\x2,\x1B9\x3\x2\x2\x2.\x1BD"+
		"\x3\x2\x2\x2\x30\x1C1\x3\x2\x2\x2\x32\x1C9\x3\x2\x2\x2\x34\x1D8\x3\x2"+
		"\x2\x2\x36\x1DD\x3\x2\x2\x2\x38\x1E5\x3\x2\x2\x2:\x1F7\x3\x2\x2\x2<\x1FE"+
		"\x3\x2\x2\x2>\x344\x3\x2\x2\x2@\x353\x3\x2\x2\x2\x42\x36A\x3\x2\x2\x2"+
		"\x44\x36C\x3\x2\x2\x2\x46\x36E\x3\x2\x2\x2H\x37F\x3\x2\x2\x2J\x38D\x3"+
		"\x2\x2\x2L\x398\x3\x2\x2\x2N\x3A3\x3\x2\x2\x2P\x3B1\x3\x2\x2\x2R\x3FD"+
		"\x3\x2\x2\x2T\x41B\x3\x2\x2\x2V\x475\x3\x2\x2\x2XZ\x5\x4\x3\x2YX\x3\x2"+
		"\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\x61\x3\x2\x2\x2]["+
		"\x3\x2\x2\x2^`\x5\n\x6\x2_^\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2"+
		"\x2\x61\x62\x3\x2\x2\x2\x62\x64\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x64\x65"+
		"\a\x2\x2\x3\x65\x3\x3\x2\x2\x2\x66g\a\n\x2\x2gh\x5\b\x5\x2hi\aZ\x2\x2"+
		"i\x5\x3\x2\x2\x2jm\a\x86\x2\x2km\a\x87\x2\x2lj\x3\x2\x2\x2lk\x3\x2\x2"+
		"\x2m\a\x3\x2\x2\x2ns\x5\x6\x4\x2op\a\\\x2\x2pr\x5\x6\x4\x2qo\x3\x2\x2"+
		"\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2t\t\x3\x2\x2\x2us\x3\x2\x2"+
		"\x2vw\a\v\x2\x2wx\x5\b\x5\x2x|\a\x63\x2\x2y{\x5\x4\x3\x2zy\x3\x2\x2\x2"+
		"{~\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x82\x3\x2\x2\x2~|\x3\x2\x2"+
		"\x2\x7F\x81\x5\n\x6\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80"+
		"\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2"+
		"\x2\x85\x86\a\x64\x2\x2\x86\x111\x3\x2\x2\x2\x87\x89\x5\xE\b\x2\x88\x87"+
		"\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2"+
		"\x2\x8B\x8D\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x8F\x5\x12\n\x2\x8E\x90"+
		"\x5\x14\v\x2\x8F\x8E\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x92\x3\x2\x2"+
		"\x2\x91\x93\x5\x16\f\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x95"+
		"\x3\x2\x2\x2\x94\x96\a\x41\x2\x2\x95\x94\x3\x2\x2\x2\x95\x96\x3\x2\x2"+
		"\x2\x96\x97\x3\x2\x2\x2\x97\x98\a\f\x2\x2\x98\x9A\x5\x6\x4\x2\x99\x9B"+
		"\x5\x1E\x10\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9D\x3\x2\x2"+
		"\x2\x9C\x9E\x5\x10\t\x2\x9D\x9C\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA2"+
		"\x3\x2\x2\x2\x9F\xA1\x5:\x1E\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2"+
		"\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3"+
		"\x2\x2\x2\xA5\xA9\a\x63\x2\x2\xA6\xA8\x5> \x2\xA7\xA6\x3\x2\x2\x2\xA8"+
		"\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAC\x3\x2"+
		"\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAD\a\x64\x2\x2\xAD\x111\x3\x2\x2\x2\xAE"+
		"\xB0\x5\xE\b\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2"+
		"\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4"+
		"\xB6\x5\x12\n\x2\xB5\xB7\x5\x14\v\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2"+
		"\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8\xBA\a\x41\x2\x2\xB9\xB8\x3\x2\x2\x2\xB9"+
		"\xBA\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\a\r\x2\x2\xBC\xBE\x5\x6\x4"+
		"\x2\xBD\xBF\x5\x1E\x10\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF"+
		"\xC1\x3\x2\x2\x2\xC0\xC2\x5\x10\t\x2\xC1\xC0\x3\x2\x2\x2\xC1\xC2\x3\x2"+
		"\x2\x2\xC2\xC6\x3\x2\x2\x2\xC3\xC5\x5:\x1E\x2\xC4\xC3\x3\x2\x2\x2\xC5"+
		"\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC9\x3\x2"+
		"\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCD\a\x63\x2\x2\xCA\xCC\x5> \x2\xCB\xCA"+
		"\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2"+
		"\x2\xCE\xD0\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD1\a\x64\x2\x2\xD1\x111"+
		"\x3\x2\x2\x2\xD2\xD4\x5\xE\b\x2\xD3\xD2\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2"+
		"\xD5\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD8\x3\x2\x2\x2\xD7\xD5\x3"+
		"\x2\x2\x2\xD8\xD9\x5\x12\n\x2\xD9\xDA\t\x2\x2\x2\xDA\xDD\x5\x6\x4\x2\xDB"+
		"\xDC\a[\x2\x2\xDC\xDE\x5,\x17\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2"+
		"\x2\xDE\xE1\x3\x2\x2\x2\xDF\xE0\a}\x2\x2\xE0\xE2\x5V,\x2\xE1\xDF\x3\x2"+
		"\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\aZ\x2\x2\xE4\x111"+
		"\x3\x2\x2\x2\xE5\xE7\x5\xE\b\x2\xE6\xE5\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2"+
		"\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEB\x3\x2\x2\x2\xEA\xE8\x3"+
		"\x2\x2\x2\xEB\xED\x5\x12\n\x2\xEC\xEE\x5\x14\v\x2\xED\xEC\x3\x2\x2\x2"+
		"\xED\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF\xF1\x5\x1C\xF\x2\xF0\xEF"+
		"\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x5\x6\x4"+
		"\x2\xF3\xF5\x5\"\x12\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6"+
		"\x3\x2\x2\x2\xF6\xF7\x5@!\x2\xF7\xF8\a\x62\x2\x2\xF8\xFC\x5\x30\x19\x2"+
		"\xF9\xFB\x5:\x1E\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC\xFA\x3"+
		"\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\x102\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2"+
		"\xFF\x101\x5\f\a\x2\x100\xFF\x3\x2\x2\x2\x101\x104\x3\x2\x2\x2\x102\x100"+
		"\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2\x2\x2\x104\x102\x3"+
		"\x2\x2\x2\x105\x106\x5N(\x2\x106\x111\x3\x2\x2\x2\x107\x108\a\x1B\x2\x2"+
		"\x108\x10C\a\x63\x2\x2\x109\x10B\x5\n\x6\x2\x10A\x109\x3\x2\x2\x2\x10B"+
		"\x10E\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10F"+
		"\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10F\x111\a\x64\x2\x2\x110v\x3\x2\x2"+
		"\x2\x110\x8A\x3\x2\x2\x2\x110\xB1\x3\x2\x2\x2\x110\xD5\x3\x2\x2\x2\x110"+
		"\xE8\x3\x2\x2\x2\x110\x107\x3\x2\x2\x2\x111\v\x3\x2\x2\x2\x112\x113\a"+
		"H\x2\x2\x113\x117\x5V,\x2\x114\x115\aI\x2\x2\x115\x117\x5V,\x2\x116\x112"+
		"\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x117\r\x3\x2\x2\x2\x118\x119\al\x2"+
		"\x2\x119\x11E\x5\x6\x4\x2\x11A\x11B\ai\x2\x2\x11B\x11C\x5L\'\x2\x11C\x11D"+
		"\aj\x2\x2\x11D\x11F\x3\x2\x2\x2\x11E\x11A\x3\x2\x2\x2\x11E\x11F\x3\x2"+
		"\x2\x2\x11F\xF\x3\x2\x2\x2\x120\x122\a[\x2\x2\x121\x123\x5(\x15\x2\x122"+
		"\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x12D\x3\x2\x2\x2\x124\x125"+
		"\a[\x2\x2\x125\x12A\x5(\x15\x2\x126\x127\a\x61\x2\x2\x127\x129\x5(\x15"+
		"\x2\x128\x126\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2"+
		"\x12A\x12B\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D"+
		"\x124\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x11\x3\x2\x2\x2\x12F\x134"+
		"\a:\x2\x2\x130\x134\a;\x2\x2\x131\x134\a<\x2\x2\x132\x134\a=\x2\x2\x133"+
		"\x12F\x3\x2\x2\x2\x133\x130\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x133\x132"+
		"\x3\x2\x2\x2\x134\x13\x3\x2\x2\x2\x135\x138\a>\x2\x2\x136\x138\a?\x2\x2"+
		"\x137\x135\x3\x2\x2\x2\x137\x136\x3\x2\x2\x2\x138\x15\x3\x2\x2\x2\x139"+
		"\x13C\a\"\x2\x2\x13A\x13C\a \x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13A\x3"+
		"\x2\x2\x2\x13C\x17\x3\x2\x2\x2\x13D\x143\a\"\x2\x2\x13E\x143\a!\x2\x2"+
		"\x13F\x143\a \x2\x2\x140\x141\a \x2\x2\x141\x143\a!\x2\x2\x142\x13D\x3"+
		"\x2\x2\x2\x142\x13E\x3\x2\x2\x2\x142\x13F\x3\x2\x2\x2\x142\x140\x3\x2"+
		"\x2\x2\x143\x19\x3\x2\x2\x2\x144\x147\a\x34\x2\x2\x145\x147\a\x35\x2\x2"+
		"\x146\x144\x3\x2\x2\x2\x146\x145\x3\x2\x2\x2\x147\x1B\x3\x2\x2\x2\x148"+
		"\x149\a\x46\x2\x2\x149\x1D\x3\x2\x2\x2\x14A\x14B\a\x65\x2\x2\x14B\x150"+
		"\x5 \x11\x2\x14C\x14D\a\x61\x2\x2\x14D\x14F\x5 \x11\x2\x14E\x14C\x3\x2"+
		"\x2\x2\x14F\x152\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2"+
		"\x2\x151\x153\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x153\x154\a\x66\x2\x2"+
		"\x154\x1F\x3\x2\x2\x2\x155\x157\x5\x6\x4\x2\x156\x158\at\x2\x2\x157\x156"+
		"\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15B\x3\x2\x2\x2\x159\x15A\a["+
		"\x2\x2\x15A\x15C\x5*\x16\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2"+
		"\x15C\x15F\x3\x2\x2\x2\x15D\x15F\x5\x32\x1A\x2\x15E\x155\x3\x2\x2\x2\x15E"+
		"\x15D\x3\x2\x2\x2\x15F!\x3\x2\x2\x2\x160\x161\a\x65\x2\x2\x161\x166\x5"+
		".\x18\x2\x162\x163\a\x61\x2\x2\x163\x165\x5.\x18\x2\x164\x162\x3\x2\x2"+
		"\x2\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2"+
		"\x167\x169\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x169\x16A\a\x66\x2\x2\x16A"+
		"#\x3\x2\x2\x2\x16B\x175\x5\x6\x4\x2\x16C\x175\aK\x2\x2\x16D\x175\aL\x2"+
		"\x2\x16E\x175\aM\x2\x2\x16F\x175\aN\x2\x2\x170\x175\aO\x2\x2\x171\x175"+
		"\aP\x2\x2\x172\x175\aQ\x2\x2\x173\x175\aR\x2\x2\x174\x16B\x3\x2\x2\x2"+
		"\x174\x16C\x3\x2\x2\x2\x174\x16D\x3\x2\x2\x2\x174\x16E\x3\x2\x2\x2\x174"+
		"\x16F\x3\x2\x2\x2\x174\x170\x3\x2\x2\x2\x174\x171\x3\x2\x2\x2\x174\x172"+
		"\x3\x2\x2\x2\x174\x173\x3\x2\x2\x2\x175%\x3\x2\x2\x2\x176\x17B\x5$\x13"+
		"\x2\x177\x178\x5$\x13\x2\x178\x179\x5\"\x12\x2\x179\x17B\x3\x2\x2\x2\x17A"+
		"\x176\x3\x2\x2\x2\x17A\x177\x3\x2\x2\x2\x17B\'\x3\x2\x2\x2\x17C\x17D\b"+
		"\x15\x1\x2\x17D\x17E\x5&\x14\x2\x17E\x184\x3\x2\x2\x2\x17F\x180\f\x3\x2"+
		"\x2\x180\x181\a\\\x2\x2\x181\x183\x5&\x14\x2\x182\x17F\x3\x2\x2\x2\x183"+
		"\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185)\x3"+
		"\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187\x188\b\x16\x1\x2\x188\x18A\ak\x2"+
		"\x2\x189\x18B\a\x41\x2\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2"+
		"\x18B\x18C\x3\x2\x2\x2\x18C\x1A2\x5*\x16\x5\x18D\x1A2\x5(\x15\x2\x18E"+
		"\x18F\ag\x2\x2\x18F\x194\x5*\x16\x2\x190\x191\a\x61\x2\x2\x191\x193\x5"+
		"*\x16\x2\x192\x190\x3\x2\x2\x2\x193\x196\x3\x2\x2\x2\x194\x192\x3\x2\x2"+
		"\x2\x194\x195\x3\x2\x2\x2\x195\x197\x3\x2\x2\x2\x196\x194\x3\x2\x2\x2"+
		"\x197\x198\ah\x2\x2\x198\x19C\x3\x2\x2\x2\x199\x19A\ag\x2\x2\x19A\x19C"+
		"\ah\x2\x2\x19B\x18E\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19C\x1A2\x3\x2"+
		"\x2\x2\x19D\x19E\x5\x34\x1B\x2\x19E\x19F\a\x62\x2\x2\x19F\x1A0\x5\x30"+
		"\x19\x2\x1A0\x1A2\x3\x2\x2\x2\x1A1\x187\x3\x2\x2\x2\x1A1\x18D\x3\x2\x2"+
		"\x2\x1A1\x19B\x3\x2\x2\x2\x1A1\x19D\x3\x2\x2\x2\x1A2\x1A7\x3\x2\x2\x2"+
		"\x1A3\x1A4\f\x6\x2\x2\x1A4\x1A6\ao\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A6\x1A9"+
		"\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8+\x3\x2\x2"+
		"\x2\x1A9\x1A7\x3\x2\x2\x2\x1AA\x1AC\x5\x32\x1A\x2\x1AB\x1AA\x3\x2\x2\x2"+
		"\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AE\x3\x2\x2\x2\x1AD\x1AF\a\x41\x2\x2\x1AE"+
		"\x1AD\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1BA"+
		"\x5*\x16\x2\x1B1\x1B3\a\x45\x2\x2\x1B2\x1B4\a\x1C\x2\x2\x1B3\x1B2\x3\x2"+
		"\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B6\x3\x2\x2\x2\x1B5\x1B7\a\x41\x2"+
		"\x2\x1B6\x1B5\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2"+
		"\x1B8\x1BA\x5*\x16\x2\x1B9\x1AB\x3\x2\x2\x2\x1B9\x1B1\x3\x2\x2\x2\x1BA"+
		"-\x3\x2\x2\x2\x1BB\x1BE\x5,\x17\x2\x1BC\x1BE\aJ\x2\x2\x1BD\x1BB\x3\x2"+
		"\x2\x2\x1BD\x1BC\x3\x2\x2\x2\x1BE/\x3\x2\x2\x2\x1BF\x1C2\x5.\x18\x2\x1C0"+
		"\x1C2\aS\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x31\x3"+
		"\x2\x2\x2\x1C3\x1C4\a`\x2\x2\x1C4\x1CA\x5\x6\x4\x2\x1C5\x1C6\a`\x2\x2"+
		"\x1C6\x1CA\a\x16\x2\x2\x1C7\x1C8\a`\x2\x2\x1C8\x1CA\a@\x2\x2\x1C9\x1C3"+
		"\x3\x2\x2\x2\x1C9\x1C5\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1CA\x33\x3\x2"+
		"\x2\x2\x1CB\x1CC\ai\x2\x2\x1CC\x1D1\x5\x36\x1C\x2\x1CD\x1CE\a\x61\x2\x2"+
		"\x1CE\x1D0\x5\x36\x1C\x2\x1CF\x1CD\x3\x2\x2\x2\x1D0\x1D3\x3\x2\x2\x2\x1D1"+
		"\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D1"+
		"\x3\x2\x2\x2\x1D4\x1D5\aj\x2\x2\x1D5\x1D9\x3\x2\x2\x2\x1D6\x1D7\ai\x2"+
		"\x2\x1D7\x1D9\aj\x2\x2\x1D8\x1CB\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9"+
		"\x35\x3\x2\x2\x2\x1DA\x1DC\x5\x44#\x2\x1DB\x1DA\x3\x2\x2\x2\x1DC\x1DF"+
		"\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E0\x3"+
		"\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1E0\x1E1\x5,\x17\x2\x1E1\x37\x3\x2\x2"+
		"\x2\x1E2\x1E6\aV\x2\x2\x1E3\x1E6\aX\x2\x2\x1E4\x1E6\x5\x6\x4\x2\x1E5\x1E2"+
		"\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E6\x39\x3\x2"+
		"\x2\x2\x1E7\x1E8\a\x18\x2\x2\x1E8\x1E9\x5 \x11\x2\x1E9\x1EA\a[\x2\x2\x1EA"+
		"\x1EF\x5<\x1F\x2\x1EB\x1EC\a\x61\x2\x2\x1EC\x1EE\x5<\x1F\x2\x1ED\x1EB"+
		"\x3\x2\x2\x2\x1EE\x1F1\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3"+
		"\x2\x2\x2\x1F0\x1F8\x3\x2\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F2\x1F3\a\x18"+
		"\x2\x2\x1F3\x1F4\x5 \x11\x2\x1F4\x1F5\t\x3\x2\x2\x1F5\x1F6\aV\x2\x2\x1F6"+
		"\x1F8\x3\x2\x2\x2\x1F7\x1E7\x3\x2\x2\x2\x1F7\x1F2\x3\x2\x2\x2\x1F8;\x3"+
		"\x2\x2\x2\x1F9\x1FA\a\xF\x2\x2\x1FA\x1FB\ai\x2\x2\x1FB\x1FF\aj\x2\x2\x1FC"+
		"\x1FF\x5*\x16\x2\x1FD\x1FF\x5 \x11\x2\x1FE\x1F9\x3\x2\x2\x2\x1FE\x1FC"+
		"\x3\x2\x2\x2\x1FE\x1FD\x3\x2\x2\x2\x1FF=\x3\x2\x2\x2\x200\x202\x5\xE\b"+
		"\x2\x201\x200\x3\x2\x2\x2\x202\x205\x3\x2\x2\x2\x203\x201\x3\x2\x2\x2"+
		"\x203\x204\x3\x2\x2\x2\x204\x206\x3\x2\x2\x2\x205\x203\x3\x2\x2\x2\x206"+
		"\x208\x5\x12\n\x2\x207\x209\x5\x14\v\x2\x208\x207\x3\x2\x2\x2\x208\x209"+
		"\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20C\a\xF\x2\x2\x20B\x20D\x5\x6"+
		"\x4\x2\x20C\x20B\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20E\x3\x2\x2"+
		"\x2\x20E\x211\x5@!\x2\x20F\x210\a\x62\x2\x2\x210\x212\x5\x30\x19\x2\x211"+
		"\x20F\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x216\x3\x2\x2\x2\x213\x215"+
		"\x5\x46$\x2\x214\x213\x3\x2\x2\x2\x215\x218\x3\x2\x2\x2\x216\x214\x3\x2"+
		"\x2\x2\x216\x217\x3\x2\x2\x2\x217\x21A\x3\x2\x2\x2\x218\x216\x3\x2\x2"+
		"\x2\x219\x21B\x5J&\x2\x21A\x219\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B"+
		"\x21F\x3\x2\x2\x2\x21C\x21E\x5\f\a\x2\x21D\x21C\x3\x2\x2\x2\x21E\x221"+
		"\x3\x2\x2\x2\x21F\x21D\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x222\x3"+
		"\x2\x2\x2\x221\x21F\x3\x2\x2\x2\x222\x223\x5N(\x2\x223\x345\x3\x2\x2\x2"+
		"\x224\x226\x5\xE\b\x2\x225\x224\x3\x2\x2\x2\x226\x229\x3\x2\x2\x2\x227"+
		"\x225\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x22A\x3\x2\x2\x2\x229\x227"+
		"\x3\x2\x2\x2\x22A\x22C\x5\x12\n\x2\x22B\x22D\x5\x14\v\x2\x22C\x22B\x3"+
		"\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x22F\x5\x1A"+
		"\xE\x2\x22F\x230\a\xF\x2\x2\x230\x231\a\x43\x2\x2\x231\x234\x5@!\x2\x232"+
		"\x233\a\x62\x2\x2\x233\x235\x5\x30\x19\x2\x234\x232\x3\x2\x2\x2\x234\x235"+
		"\x3\x2\x2\x2\x235\x239\x3\x2\x2\x2\x236\x238\x5\x46$\x2\x237\x236\x3\x2"+
		"\x2\x2\x238\x23B\x3\x2\x2\x2\x239\x237\x3\x2\x2\x2\x239\x23A\x3\x2\x2"+
		"\x2\x23A\x23D\x3\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23C\x23E\x5J&\x2\x23D"+
		"\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x242\x3\x2\x2\x2\x23F\x241"+
		"\x5\f\a\x2\x240\x23F\x3\x2\x2\x2\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2"+
		"\x2\x2\x242\x243\x3\x2\x2\x2\x243\x245\x3\x2\x2\x2\x244\x242\x3\x2\x2"+
		"\x2\x245\x246\x5N(\x2\x246\x345\x3\x2\x2\x2\x247\x249\x5\xE\b\x2\x248"+
		"\x247\x3\x2\x2\x2\x249\x24C\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24A\x24B"+
		"\x3\x2\x2\x2\x24B\x24D\x3\x2\x2\x2\x24C\x24A\x3\x2\x2\x2\x24D\x24F\x5"+
		"\x12\n\x2\x24E\x250\x5\x14\v\x2\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3\x2"+
		"\x2\x2\x250\x251\x3\x2\x2\x2\x251\x252\a\x15\x2\x2\x252\x253\x5@!\x2\x253"+
		"\x254\x5N(\x2\x254\x345\x3\x2\x2\x2\x255\x257\x5\xE\b\x2\x256\x255\x3"+
		"\x2\x2\x2\x257\x25A\x3\x2\x2\x2\x258\x256\x3\x2\x2\x2\x258\x259\x3\x2"+
		"\x2\x2\x259\x25B\x3\x2\x2\x2\x25A\x258\x3\x2\x2\x2\x25B\x25D\x5\x12\n"+
		"\x2\x25C\x25E\x5\x14\v\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2"+
		"\x25E\x25F\x3\x2\x2\x2\x25F\x260\x5\x1A\xE\x2\x260\x262\a\x36\x2\x2\x261"+
		"\x263\x5\"\x12\x2\x262\x261\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264"+
		"\x3\x2\x2\x2\x264\x265\x5@!\x2\x265\x266\a\x62\x2\x2\x266\x26A\x5\x30"+
		"\x19\x2\x267\x269\x5:\x1E\x2\x268\x267\x3\x2\x2\x2\x269\x26C\x3\x2\x2"+
		"\x2\x26A\x268\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x270\x3\x2\x2\x2"+
		"\x26C\x26A\x3\x2\x2\x2\x26D\x26F\x5\f\a\x2\x26E\x26D\x3\x2\x2\x2\x26F"+
		"\x272\x3\x2\x2\x2\x270\x26E\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x273"+
		"\x3\x2\x2\x2\x272\x270\x3\x2\x2\x2\x273\x274\x5N(\x2\x274\x345\x3\x2\x2"+
		"\x2\x275\x277\x5\xE\b\x2\x276\x275\x3\x2\x2\x2\x277\x27A\x3\x2\x2\x2\x278"+
		"\x276\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27B\x3\x2\x2\x2\x27A\x278"+
		"\x3\x2\x2\x2\x27B\x27C\x5\x12\n\x2\x27C\x27E\t\x2\x2\x2\x27D\x27F\a?\x2"+
		"\x2\x27E\x27D\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2"+
		"\x280\x283\x5\x6\x4\x2\x281\x282\a[\x2\x2\x282\x284\x5,\x17\x2\x283\x281"+
		"\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x287\x3\x2\x2\x2\x285\x286\a}"+
		"\x2\x2\x286\x288\x5V,\x2\x287\x285\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288"+
		"\x289\x3\x2\x2\x2\x289\x28A\aZ\x2\x2\x28A\x345\x3\x2\x2\x2\x28B\x28D\x5"+
		"\xE\b\x2\x28C\x28B\x3\x2\x2\x2\x28D\x290\x3\x2\x2\x2\x28E\x28C\x3\x2\x2"+
		"\x2\x28E\x28F\x3\x2\x2\x2\x28F\x291\x3\x2\x2\x2\x290\x28E\x3\x2\x2\x2"+
		"\x291\x293\x5\x12\n\x2\x292\x294\x5\x18\r\x2\x293\x292\x3\x2\x2\x2\x293"+
		"\x294\x3\x2\x2\x2\x294\x296\x3\x2\x2\x2\x295\x297\x5\x14\v\x2\x296\x295"+
		"\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x299\x3\x2\x2\x2\x298\x29A\x5"+
		"\x1C\xF\x2\x299\x298\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B\x3\x2"+
		"\x2\x2\x29B\x29C\t\x4\x2\x2\x29C\x29E\x5\x6\x4\x2\x29D\x29F\x5\"\x12\x2"+
		"\x29E\x29D\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0"+
		"\x2A1\x5@!\x2\x2A1\x2A2\a\x62\x2\x2\x2A2\x2A6\x5\x30\x19\x2\x2A3\x2A5"+
		"\x5:\x1E\x2\x2A4\x2A3\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2\x2\x2A6\x2A4\x3\x2"+
		"\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2AC\x3\x2\x2\x2\x2A8\x2A6\x3\x2\x2"+
		"\x2\x2A9\x2AB\x5\f\a\x2\x2AA\x2A9\x3\x2\x2\x2\x2AB\x2AE\x3\x2\x2\x2\x2AC"+
		"\x2AA\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AF\x3\x2\x2\x2\x2AE\x2AC"+
		"\x3\x2\x2\x2\x2AF\x2B0\x5N(\x2\x2B0\x345\x3\x2\x2\x2\x2B1\x2B3\x5\xE\b"+
		"\x2\x2B2\x2B1\x3\x2\x2\x2\x2B3\x2B6\x3\x2\x2\x2\x2B4\x2B2\x3\x2\x2\x2"+
		"\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B7\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2\x2\x2B7"+
		"\x2B9\x5\x12\n\x2\x2B8\x2BA\x5\x18\r\x2\x2B9\x2B8\x3\x2\x2\x2\x2B9\x2BA"+
		"\x3\x2\x2\x2\x2BA\x2BC\x3\x2\x2\x2\x2BB\x2BD\x5\x14\v\x2\x2BC\x2BB\x3"+
		"\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2BF\x3\x2\x2\x2\x2BE\x2C0\x5\x1C"+
		"\xF\x2\x2BF\x2BE\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2"+
		"\x2\x2C1\x2C2\t\x4\x2\x2\x2C2\x2C3\ag\x2\x2\x2C3\x2C5\ah\x2\x2\x2C4\x2C6"+
		"\x5\"\x12\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C7\x3"+
		"\x2\x2\x2\x2C7\x2C8\x5@!\x2\x2C8\x2C9\a\x62\x2\x2\x2C9\x2CD\x5\x30\x19"+
		"\x2\x2CA\x2CC\x5:\x1E\x2\x2CB\x2CA\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2\x2\x2CD"+
		"\x2CB\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2D3\x3\x2\x2\x2\x2CF\x2CD"+
		"\x3\x2\x2\x2\x2D0\x2D2\x5\f\a\x2\x2D1\x2D0\x3\x2\x2\x2\x2D2\x2D5\x3\x2"+
		"\x2\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D6\x3\x2\x2"+
		"\x2\x2D5\x2D3\x3\x2\x2\x2\x2D6\x2D7\x5N(\x2\x2D7\x345\x3\x2\x2\x2\x2D8"+
		"\x2DA\x5\xE\b\x2\x2D9\x2D8\x3\x2\x2\x2\x2DA\x2DD\x3\x2\x2\x2\x2DB\x2D9"+
		"\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DE\x3\x2\x2\x2\x2DD\x2DB\x3"+
		"\x2\x2\x2\x2DE\x2E0\x5\x12\n\x2\x2DF\x2E1\x5\x18\r\x2\x2E0\x2DF\x3\x2"+
		"\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2E3\x3\x2\x2\x2\x2E2\x2E4\x5\x14\v"+
		"\x2\x2E3\x2E2\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E6\x3\x2\x2\x2"+
		"\x2E5\x2E7\x5\x1C\xF\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7"+
		"\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\x6\x4\x2\x2E9\x2EB\x5\"\x12\x2\x2EA\x2E9"+
		"\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2ED\x5"+
		"@!\x2\x2ED\x2EE\a\x62\x2\x2\x2EE\x2F2\x5\x30\x19\x2\x2EF\x2F1\x5:\x1E"+
		"\x2\x2F0\x2EF\x3\x2\x2\x2\x2F1\x2F4\x3\x2\x2\x2\x2F2\x2F0\x3\x2\x2\x2"+
		"\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F8\x3\x2\x2\x2\x2F4\x2F2\x3\x2\x2\x2\x2F5"+
		"\x2F7\x5\f\a\x2\x2F6\x2F5\x3\x2\x2\x2\x2F7\x2FA\x3\x2\x2\x2\x2F8\x2F6"+
		"\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x2FB\x3\x2\x2\x2\x2FA\x2F8\x3"+
		"\x2\x2\x2\x2FB\x2FC\x5N(\x2\x2FC\x345\x3\x2\x2\x2\x2FD\x2FF\x5\xE\b\x2"+
		"\x2FE\x2FD\x3\x2\x2\x2\x2FF\x302\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2\x300"+
		"\x301\x3\x2\x2\x2\x301\x303\x3\x2\x2\x2\x302\x300\x3\x2\x2\x2\x303\x305"+
		"\x5\x12\n\x2\x304\x306\x5\x18\r\x2\x305\x304\x3\x2\x2\x2\x305\x306\x3"+
		"\x2\x2\x2\x306\x308\x3\x2\x2\x2\x307\x309\x5\x14\v\x2\x308\x307\x3\x2"+
		"\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30B\x3\x2\x2\x2\x30A\x30C\x5\x1C\xF"+
		"\x2\x30B\x30A\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2"+
		"\x30D\x30E\a\x1A\x2\x2\x30E\x30F\x5P)\x2\x30F\x310\x5@!\x2\x310\x311\a"+
		"\x62\x2\x2\x311\x315\x5\x30\x19\x2\x312\x314\x5:\x1E\x2\x313\x312\x3\x2"+
		"\x2\x2\x314\x317\x3\x2\x2\x2\x315\x313\x3\x2\x2\x2\x315\x316\x3\x2\x2"+
		"\x2\x316\x31B\x3\x2\x2\x2\x317\x315\x3\x2\x2\x2\x318\x31A\x5\f\a\x2\x319"+
		"\x318\x3\x2\x2\x2\x31A\x31D\x3\x2\x2\x2\x31B\x319\x3\x2\x2\x2\x31B\x31C"+
		"\x3\x2\x2\x2\x31C\x31E\x3\x2\x2\x2\x31D\x31B\x3\x2\x2\x2\x31E\x31F\x5"+
		"N(\x2\x31F\x345\x3\x2\x2\x2\x320\x322\x5\xE\b\x2\x321\x320\x3\x2\x2\x2"+
		"\x322\x325\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324"+
		"\x326\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x326\x328\x5\x12\n\x2\x327\x329"+
		"\x5\x14\v\x2\x328\x327\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32B\x3"+
		"\x2\x2\x2\x32A\x32C\x5\x16\f\x2\x32B\x32A\x3\x2\x2\x2\x32B\x32C\x3\x2"+
		"\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32E\a\f\x2\x2\x32E\x330\x5\x6\x4\x2"+
		"\x32F\x331\x5\x1E\x10\x2\x330\x32F\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331"+
		"\x333\x3\x2\x2\x2\x332\x334\x5\x10\t\x2\x333\x332\x3\x2\x2\x2\x333\x334"+
		"\x3\x2\x2\x2\x334\x338\x3\x2\x2\x2\x335\x337\x5:\x1E\x2\x336\x335\x3\x2"+
		"\x2\x2\x337\x33A\x3\x2\x2\x2\x338\x336\x3\x2\x2\x2\x338\x339\x3\x2\x2"+
		"\x2\x339\x33B\x3\x2\x2\x2\x33A\x338\x3\x2\x2\x2\x33B\x33F\a\x63\x2\x2"+
		"\x33C\x33E\x5> \x2\x33D\x33C\x3\x2\x2\x2\x33E\x341\x3\x2\x2\x2\x33F\x33D"+
		"\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x342\x3\x2\x2\x2\x341\x33F\x3"+
		"\x2\x2\x2\x342\x343\a\x64\x2\x2\x343\x345\x3\x2\x2\x2\x344\x203\x3\x2"+
		"\x2\x2\x344\x227\x3\x2\x2\x2\x344\x24A\x3\x2\x2\x2\x344\x258\x3\x2\x2"+
		"\x2\x344\x278\x3\x2\x2\x2\x344\x28E\x3\x2\x2\x2\x344\x2B4\x3\x2\x2\x2"+
		"\x344\x2DB\x3\x2\x2\x2\x344\x300\x3\x2\x2\x2\x344\x323\x3\x2\x2\x2\x345"+
		"?\x3\x2\x2\x2\x346\x347\ai\x2\x2\x347\x34C\x5\x42\"\x2\x348\x349\a\x61"+
		"\x2\x2\x349\x34B\x5\x42\"\x2\x34A\x348\x3\x2\x2\x2\x34B\x34E\x3\x2\x2"+
		"\x2\x34C\x34A\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D\x34F\x3\x2\x2\x2"+
		"\x34E\x34C\x3\x2\x2\x2\x34F\x350\aj\x2\x2\x350\x354\x3\x2\x2\x2\x351\x352"+
		"\ai\x2\x2\x352\x354\aj\x2\x2\x353\x346\x3\x2\x2\x2\x353\x351\x3\x2\x2"+
		"\x2\x354\x41\x3\x2\x2\x2\x355\x357\a\x1C\x2\x2\x356\x355\x3\x2\x2\x2\x356"+
		"\x357\x3\x2\x2\x2\x357\x35B\x3\x2\x2\x2\x358\x35A\x5\x44#\x2\x359\x358"+
		"\x3\x2\x2\x2\x35A\x35D\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2\x35B\x35C\x3"+
		"\x2\x2\x2\x35C\x35F\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35E\x360\x5\x6"+
		"\x4\x2\x35F\x35E\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x361\x3\x2\x2"+
		"\x2\x361\x362\a[\x2\x2\x362\x36B\x5,\x17\x2\x363\x365\a\x45\x2\x2\x364"+
		"\x363\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365\x367\x3\x2\x2\x2\x366\x368"+
		"\a\x41\x2\x2\x367\x366\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x369\x3"+
		"\x2\x2\x2\x369\x36B\a\x16\x2\x2\x36A\x356\x3\x2\x2\x2\x36A\x364\x3\x2"+
		"\x2\x2\x36B\x43\x3\x2\x2\x2\x36C\x36D\a#\x2\x2\x36D\x45\x3\x2\x2\x2\x36E"+
		"\x36F\a\x18\x2\x2\x36F\x370\x5*\x16\x2\x370\x371\a[\x2\x2\x371\x376\x5"+
		"H%\x2\x372\x373\a\x61\x2\x2\x373\x375\x5H%\x2\x374\x372\x3\x2\x2\x2\x375"+
		"\x378\x3\x2\x2\x2\x376\x374\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377G\x3"+
		"\x2\x2\x2\x378\x376\x3\x2\x2\x2\x379\x380\x5*\x16\x2\x37A\x380\a\f\x2"+
		"\x2\x37B\x380\a\r\x2\x2\x37C\x37D\a\x43\x2\x2\x37D\x37E\ai\x2\x2\x37E"+
		"\x380\aj\x2\x2\x37F\x379\x3\x2\x2\x2\x37F\x37A\x3\x2\x2\x2\x37F\x37B\x3"+
		"\x2\x2\x2\x37F\x37C\x3\x2\x2\x2\x380I\x3\x2\x2\x2\x381\x382\a[\x2\x2\x382"+
		"\x383\a\x19\x2\x2\x383\x384\ai\x2\x2\x384\x385\x5L\'\x2\x385\x386\aj\x2"+
		"\x2\x386\x38E\x3\x2\x2\x2\x387\x388\a[\x2\x2\x388\x389\a\x16\x2\x2\x389"+
		"\x38A\ai\x2\x2\x38A\x38B\x5L\'\x2\x38B\x38C\aj\x2\x2\x38C\x38E\x3\x2\x2"+
		"\x2\x38D\x381\x3\x2\x2\x2\x38D\x387\x3\x2\x2\x2\x38EK\x3\x2\x2\x2\x38F"+
		"\x394\x5V,\x2\x390\x391\a\x61\x2\x2\x391\x393\x5V,\x2\x392\x390\x3\x2"+
		"\x2\x2\x393\x396\x3\x2\x2\x2\x394\x392\x3\x2\x2\x2\x394\x395\x3\x2\x2"+
		"\x2\x395\x399\x3\x2\x2\x2\x396\x394\x3\x2\x2\x2\x397\x399\x3\x2\x2\x2"+
		"\x398\x38F\x3\x2\x2\x2\x398\x397\x3\x2\x2\x2\x399M\x3\x2\x2\x2\x39A\x39E"+
		"\a\x63\x2\x2\x39B\x39D\x5R*\x2\x39C\x39B\x3\x2\x2\x2\x39D\x3A0\x3\x2\x2"+
		"\x2\x39E\x39C\x3\x2\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F\x3A1\x3\x2\x2\x2"+
		"\x3A0\x39E\x3\x2\x2\x2\x3A1\x3A4\a\x64\x2\x2\x3A2\x3A4\aZ\x2\x2\x3A3\x39A"+
		"\x3\x2\x2\x2\x3A3\x3A2\x3\x2\x2\x2\x3A4O\x3\x2\x2\x2\x3A5\x3B2\ak\x2\x2"+
		"\x3A6\x3B2\am\x2\x2\x3A7\x3B2\a{\x2\x2\x3A8\x3B2\ay\x2\x2\x3A9\x3B2\a"+
		"z\x2\x2\x3AA\x3B2\ao\x2\x2\x3AB\x3B2\an\x2\x2\x3AC\x3B2\a\\\x2\x2\x3AD"+
		"\x3AE\ag\x2\x2\x3AE\x3B2\ah\x2\x2\x3AF\x3B0\ax\x2\x2\x3B0\x3B2\ax\x2\x2"+
		"\x3B1\x3A5\x3\x2\x2\x2\x3B1\x3A6\x3\x2\x2\x2\x3B1\x3A7\x3\x2\x2\x2\x3B1"+
		"\x3A8\x3\x2\x2\x2\x3B1\x3A9\x3\x2\x2\x2\x3B1\x3AA\x3\x2\x2\x2\x3B1\x3AB"+
		"\x3\x2\x2\x2\x3B1\x3AC\x3\x2\x2\x2\x3B1\x3AD\x3\x2\x2\x2\x3B1\x3AF\x3"+
		"\x2\x2\x2\x3B2Q\x3\x2\x2\x2\x3B3\x3B4\x5T+\x2\x3B4\x3B5\aZ\x2\x2\x3B5"+
		"\x3FE\x3\x2\x2\x2\x3B6\x3B7\a?\x2\x2\x3B7\x3BB\a\x63\x2\x2\x3B8\x3BA\x5"+
		"R*\x2\x3B9\x3B8\x3\x2\x2\x2\x3BA\x3BD\x3\x2\x2\x2\x3BB\x3B9\x3\x2\x2\x2"+
		"\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BE\x3\x2\x2\x2\x3BD\x3BB\x3\x2\x2\x2\x3BE"+
		"\x3FE\a\x64\x2\x2\x3BF\x3C3\a\x63\x2\x2\x3C0\x3C2\x5R*\x2\x3C1\x3C0\x3"+
		"\x2\x2\x2\x3C2\x3C5\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3\x3C4\x3\x2"+
		"\x2\x2\x3C4\x3C6\x3\x2\x2\x2\x3C5\x3C3\x3\x2\x2\x2\x3C6\x3FE\a\x64\x2"+
		"\x2\x3C7\x3FE\aZ\x2\x2\x3C8\x3C9\x5V,\x2\x3C9\x3CA\aZ\x2\x2\x3CA\x3FE"+
		"\x3\x2\x2\x2\x3CB\x3CD\a-\x2\x2\x3CC\x3CE\x5V,\x2\x3CD\x3CC\x3\x2\x2\x2"+
		"\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3FE\aZ\x2\x2\x3D0\x3D1"+
		"\a\x33\x2\x2\x3D1\x3D2\x5V,\x2\x3D2\x3D3\aZ\x2\x2\x3D3\x3FE\x3\x2\x2\x2"+
		"\x3D4\x3D5\a&\x2\x2\x3D5\x3D6\ai\x2\x2\x3D6\x3D7\x5V,\x2\x3D7\x3D8\aj"+
		"\x2\x2\x3D8\x3DB\x5R*\x2\x3D9\x3DA\a\'\x2\x2\x3DA\x3DC\x5R*\x2\x3DB\x3D9"+
		"\x3\x2\x2\x2\x3DB\x3DC\x3\x2\x2\x2\x3DC\x3FE\x3\x2\x2\x2\x3DD\x3DE\a&"+
		"\x2\x2\x3DE\x3DF\ai\x2\x2\x3DF\x3E0\x5T+\x2\x3E0\x3E1\aj\x2\x2\x3E1\x3E4"+
		"\x5R*\x2\x3E2\x3E3\a\'\x2\x2\x3E3\x3E5\x5R*\x2\x3E4\x3E2\x3\x2\x2\x2\x3E4"+
		"\x3E5\x3\x2\x2\x2\x3E5\x3FE\x3\x2\x2\x2\x3E6\x3E7\a(\x2\x2\x3E7\x3EA\a"+
		"i\x2\x2\x3E8\x3EB\x5T+\x2\x3E9\x3EB\a\x85\x2\x2\x3EA\x3E8\x3\x2\x2\x2"+
		"\x3EA\x3E9\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC\x3ED\a)\x2\x2\x3ED\x3EE"+
		"\x5V,\x2\x3EE\x3EF\aj\x2\x2\x3EF\x3F0\x5R*\x2\x3F0\x3FE\x3\x2\x2\x2\x3F1"+
		"\x3F2\a%\x2\x2\x3F2\x3F3\ai\x2\x2\x3F3\x3F4\x5V,\x2\x3F4\x3F5\aj\x2\x2"+
		"\x3F5\x3F6\x5R*\x2\x3F6\x3FE\x3\x2\x2\x2\x3F7\x3F8\a\x15\x2\x2\x3F8\x3F9"+
		"\x5V,\x2\x3F9\x3FA\aZ\x2\x2\x3FA\x3FE\x3\x2\x2\x2\x3FB\x3FC\a,\x2\x2\x3FC"+
		"\x3FE\aZ\x2\x2\x3FD\x3B3\x3\x2\x2\x2\x3FD\x3B6\x3\x2\x2\x2\x3FD\x3BF\x3"+
		"\x2\x2\x2\x3FD\x3C7\x3\x2\x2\x2\x3FD\x3C8\x3\x2\x2\x2\x3FD\x3CB\x3\x2"+
		"\x2\x2\x3FD\x3D0\x3\x2\x2\x2\x3FD\x3D4\x3\x2\x2\x2\x3FD\x3DD\x3\x2\x2"+
		"\x2\x3FD\x3E6\x3\x2\x2\x2\x3FD\x3F1\x3\x2\x2\x2\x3FD\x3F7\x3\x2\x2\x2"+
		"\x3FD\x3FB\x3\x2\x2\x2\x3FES\x3\x2\x2\x2\x3FF\x400\t\x2\x2\x2\x400\x402"+
		"\x5\x6\x4\x2\x401\x403\ao\x2\x2\x402\x401\x3\x2\x2\x2\x402\x403\x3\x2"+
		"\x2\x2\x403\x404\x3\x2\x2\x2\x404\x405\a[\x2\x2\x405\x408\x5,\x17\x2\x406"+
		"\x407\a}\x2\x2\x407\x409\x5V,\x2\x408\x406\x3\x2\x2\x2\x408\x409\x3\x2"+
		"\x2\x2\x409\x41C\x3\x2\x2\x2\x40A\x40B\t\x2\x2\x2\x40B\x40C\ag\x2\x2\x40C"+
		"\x411\x5\x6\x4\x2\x40D\x40E\a\x61\x2\x2\x40E\x410\x5\x6\x4\x2\x40F\x40D"+
		"\x3\x2\x2\x2\x410\x413\x3\x2\x2\x2\x411\x40F\x3\x2\x2\x2\x411\x412\x3"+
		"\x2\x2\x2\x412\x414\x3\x2\x2\x2\x413\x411\x3\x2\x2\x2\x414\x415\ah\x2"+
		"\x2\x415\x416\a[\x2\x2\x416\x419\x5,\x17\x2\x417\x418\a}\x2\x2\x418\x41A"+
		"\x5V,\x2\x419\x417\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41C\x3\x2\x2"+
		"\x2\x41B\x3FF\x3\x2\x2\x2\x41B\x40A\x3\x2\x2\x2\x41CU\x3\x2\x2\x2\x41D"+
		"\x41E\b,\x1\x2\x41E\x41F\aG\x2\x2\x41F\x476\x5V, \x420\x421\t\x5\x2\x2"+
		"\x421\x476\x5V,\x1E\x422\x423\t\x6\x2\x2\x423\x476\x5V,\xF\x424\x425\a"+
		"i\x2\x2\x425\x426\x5V,\x2\x426\x427\aj\x2\x2\x427\x476\x3\x2\x2\x2\x428"+
		"\x429\ax\x2\x2\x429\x42A\x5V,\x2\x42A\x42B\ax\x2\x2\x42B\x476\x3\x2\x2"+
		"\x2\x42C\x431\a\xF\x2\x2\x42D\x42E\ai\x2\x2\x42E\x42F\x5L\'\x2\x42F\x430"+
		"\aj\x2\x2\x430\x432\x3\x2\x2\x2\x431\x42D\x3\x2\x2\x2\x431\x432\x3\x2"+
		"\x2\x2\x432\x435\x3\x2\x2\x2\x433\x436\x5(\x15\x2\x434\x436\a\x43\x2\x2"+
		"\x435\x433\x3\x2\x2\x2\x435\x434\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437"+
		"\x438\ai\x2\x2\x438\x439\x5L\'\x2\x439\x43A\aj\x2\x2\x43A\x476\x3\x2\x2"+
		"\x2\x43B\x43D\a\xF\x2\x2\x43C\x43E\x5\"\x12\x2\x43D\x43C\x3\x2\x2\x2\x43D"+
		"\x43E\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x440\ai\x2\x2\x440\x441\x5"+
		"L\'\x2\x441\x442\aj\x2\x2\x442\x476\x3\x2\x2\x2\x443\x445\a\xF\x2\x2\x444"+
		"\x446\x5\x10\t\x2\x445\x444\x3\x2\x2\x2\x445\x446\x3\x2\x2\x2\x446\x447"+
		"\x3\x2\x2\x2\x447\x448\ai\x2\x2\x448\x449\x5L\'\x2\x449\x44A\aj\x2\x2"+
		"\x44A\x44E\a\x63\x2\x2\x44B\x44D\x5> \x2\x44C\x44B\x3\x2\x2\x2\x44D\x450"+
		"\x3\x2\x2\x2\x44E\x44C\x3\x2\x2\x2\x44E\x44F\x3\x2\x2\x2\x44F\x451\x3"+
		"\x2\x2\x2\x450\x44E\x3\x2\x2\x2\x451\x452\a\x64\x2\x2\x452\x476\x3\x2"+
		"\x2\x2\x453\x454\a\x15\x2\x2\x454\x455\ai\x2\x2\x455\x456\x5L\'\x2\x456"+
		"\x457\aj\x2\x2\x457\x476\x3\x2\x2\x2\x458\x45B\x5\x6\x4\x2\x459\x45B\x5"+
		"@!\x2\x45A\x458\x3\x2\x2\x2\x45A\x459\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2"+
		"\x45C\x466\a\x62\x2\x2\x45D\x467\x5V,\x2\x45E\x462\a\x63\x2\x2\x45F\x461"+
		"\x5R*\x2\x460\x45F\x3\x2\x2\x2\x461\x464\x3\x2\x2\x2\x462\x460\x3\x2\x2"+
		"\x2\x462\x463\x3\x2\x2\x2\x463\x465\x3\x2\x2\x2\x464\x462\x3\x2\x2\x2"+
		"\x465\x467\a\x64\x2\x2\x466\x45D\x3\x2\x2\x2\x466\x45E\x3\x2\x2\x2\x467"+
		"\x476\x3\x2\x2\x2\x468\x476\x5&\x14\x2\x469\x476\aW\x2\x2\x46A\x476\a"+
		"\x16\x2\x2\x46B\x476\aU\x2\x2\x46C\x476\aV\x2\x2\x46D\x476\a\x17\x2\x2"+
		"\x46E\x476\aX\x2\x2\x46F\x476\aY\x2\x2\x470\x471\a?\x2\x2\x471\x472\a"+
		"i\x2\x2\x472\x473\x5V,\x2\x473\x474\aj\x2\x2\x474\x476\x3\x2\x2\x2\x475"+
		"\x41D\x3\x2\x2\x2\x475\x420\x3\x2\x2\x2\x475\x422\x3\x2\x2\x2\x475\x424"+
		"\x3\x2\x2\x2\x475\x428\x3\x2\x2\x2\x475\x42C\x3\x2\x2\x2\x475\x43B\x3"+
		"\x2\x2\x2\x475\x443\x3\x2\x2\x2\x475\x453\x3\x2\x2\x2\x475\x45A\x3\x2"+
		"\x2\x2\x475\x468\x3\x2\x2\x2\x475\x469\x3\x2\x2\x2\x475\x46A\x3\x2\x2"+
		"\x2\x475\x46B\x3\x2\x2\x2\x475\x46C\x3\x2\x2\x2\x475\x46D\x3\x2\x2\x2"+
		"\x475\x46E\x3\x2\x2\x2\x475\x46F\x3\x2\x2\x2\x475\x470\x3\x2\x2\x2\x476"+
		"\x4B8\x3\x2\x2\x2\x477\x478\f$\x2\x2\x478\x479\a]\x2\x2\x479\x4B7\x5V"+
		",%\x47A\x47B\f#\x2\x2\x47B\x47C\a^\x2\x2\x47C\x4B7\x5V,$\x47D\x47E\f\x1D"+
		"\x2\x2\x47E\x47F\t\a\x2\x2\x47F\x4B7\x5V,\x1E\x480\x481\f\x1C\x2\x2\x481"+
		"\x482\t\b\x2\x2\x482\x4B7\x5V,\x1D\x483\x484\f\x1B\x2\x2\x484\x485\t\x3"+
		"\x2\x2\x485\x4B7\x5V,\x1C\x486\x487\f\x1A\x2\x2\x487\x488\t\t\x2\x2\x488"+
		"\x4B7\x5V,\x1B\x489\x48A\f\x19\x2\x2\x48A\x48B\ay\x2\x2\x48B\x4B7\x5V"+
		",\x1A\x48C\x48D\f\x18\x2\x2\x48D\x48E\az\x2\x2\x48E\x4B7\x5V,\x19\x48F"+
		"\x490\f\x17\x2\x2\x490\x491\a{\x2\x2\x491\x4B7\x5V,\x18\x492\x493\f\x16"+
		"\x2\x2\x493\x494\an\x2\x2\x494\x4B7\x5V,\x17\x495\x496\f\x15\x2\x2\x496"+
		"\x497\a)\x2\x2\x497\x4B7\x5V,\x16\x498\x499\f\xE\x2\x2\x499\x49A\ao\x2"+
		"\x2\x49A\x49B\x5V,\x2\x49B\x49C\a[\x2\x2\x49C\x49D\x5V,\xE\x49D\x4B7\x3"+
		"\x2\x2\x2\x49E\x49F\f\r\x2\x2\x49F\x4A0\t\n\x2\x2\x4A0\x4B7\x5V,\r\x4A1"+
		"\x4A2\f&\x2\x2\x4A2\x4A3\a\\\x2\x2\x4A3\x4B7\x5\x6\x4\x2\x4A4\x4A5\f%"+
		"\x2\x2\x4A5\x4A6\a\\\x2\x2\x4A6\x4B7\a\x15\x2\x2\x4A7\x4A8\f\"\x2\x2\x4A8"+
		"\x4A9\ai\x2\x2\x4A9\x4AA\x5L\'\x2\x4AA\x4AB\aj\x2\x2\x4AB\x4B7\x3\x2\x2"+
		"\x2\x4AC\x4AD\f!\x2\x2\x4AD\x4AE\ag\x2\x2\x4AE\x4AF\x5L\'\x2\x4AF\x4B0"+
		"\ah\x2\x2\x4B0\x4B7\x3\x2\x2\x2\x4B1\x4B2\f\x1F\x2\x2\x4B2\x4B7\ao\x2"+
		"\x2\x4B3\x4B4\f\x10\x2\x2\x4B4\x4B5\t\v\x2\x2\x4B5\x4B7\x5*\x16\x2\x4B6"+
		"\x477\x3\x2\x2\x2\x4B6\x47A\x3\x2\x2\x2\x4B6\x47D\x3\x2\x2\x2\x4B6\x480"+
		"\x3\x2\x2\x2\x4B6\x483\x3\x2\x2\x2\x4B6\x486\x3\x2\x2\x2\x4B6\x489\x3"+
		"\x2\x2\x2\x4B6\x48C\x3\x2\x2\x2\x4B6\x48F\x3\x2\x2\x2\x4B6\x492\x3\x2"+
		"\x2\x2\x4B6\x495\x3\x2\x2\x2\x4B6\x498\x3\x2\x2\x2\x4B6\x49E\x3\x2\x2"+
		"\x2\x4B6\x4A1\x3\x2\x2\x2\x4B6\x4A4\x3\x2\x2\x2\x4B6\x4A7\x3\x2\x2\x2"+
		"\x4B6\x4AC\x3\x2\x2\x2\x4B6\x4B1\x3\x2\x2\x2\x4B6\x4B3\x3\x2\x2\x2\x4B7"+
		"\x4BA\x3\x2\x2\x2\x4B8\x4B6\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9W\x3"+
		"\x2\x2\x2\x4BA\x4B8\x3\x2\x2\x2\xAA[\x61ls|\x82\x8A\x8F\x92\x95\x9A\x9D"+
		"\xA2\xA9\xB1\xB6\xB9\xBE\xC1\xC6\xCD\xD5\xDD\xE1\xE8\xED\xF0\xF4\xFC\x102"+
		"\x10C\x110\x116\x11E\x122\x12A\x12D\x133\x137\x13B\x142\x146\x150\x157"+
		"\x15B\x15E\x166\x174\x17A\x184\x18A\x194\x19B\x1A1\x1A7\x1AB\x1AE\x1B3"+
		"\x1B6\x1B9\x1BD\x1C1\x1C9\x1D1\x1D8\x1DD\x1E5\x1EF\x1F7\x1FE\x203\x208"+
		"\x20C\x211\x216\x21A\x21F\x227\x22C\x234\x239\x23D\x242\x24A\x24F\x258"+
		"\x25D\x262\x26A\x270\x278\x27E\x283\x287\x28E\x293\x296\x299\x29E\x2A6"+
		"\x2AC\x2B4\x2B9\x2BC\x2BF\x2C5\x2CD\x2D3\x2DB\x2E0\x2E3\x2E6\x2EA\x2F2"+
		"\x2F8\x300\x305\x308\x30B\x315\x31B\x323\x328\x32B\x330\x333\x338\x33F"+
		"\x344\x34C\x353\x356\x35B\x35F\x364\x367\x36A\x376\x37F\x38D\x394\x398"+
		"\x39E\x3A3\x3B1\x3BB\x3C3\x3CD\x3DB\x3E4\x3EA\x3FD\x402\x408\x411\x419"+
		"\x41B\x431\x435\x43D\x445\x44E\x45A\x462\x466\x475\x4B6\x4B8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Parser
