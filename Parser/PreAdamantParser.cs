//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Enum=11, New=12, Delete=13, Self=14, Uninitialized=15, Where=16, 
		Base=17, Operator=18, External=19, Var=20, Let=21, Get=22, Set=23, Sealed=24, 
		Override=25, Abstract=26, Params=27, Do=28, While=29, If=30, Else=31, 
		For=32, In=33, Switch=34, Break=35, Continue=36, Return=37, Try=38, TryPanic=39, 
		TryResult=40, Catch=41, Finally=42, Throw=43, Implicit=44, Explicit=45, 
		Conversion=46, As=47, AsPanic=48, AsResult=49, Public=50, Private=51, 
		Protected=52, Internal=53, Safe=54, Unsafe=55, Own=56, Mutable=57, Immutable=58, 
		Async=59, Await=60, Requires=61, Ensures=62, Void=63, String=64, ByteType=65, 
		IntType=66, UIntType=67, FloatType=68, SizeType=69, OffsetType=70, UnsafeArrayType=71, 
		Panic=72, ReservedWord=73, BooleanLiteral=74, IntLiteral=75, NullLiteral=76, 
		StringLiteral=77, CharLiteral=78, Semicolon=79, Colon=80, Dot=81, DotDot=82, 
		ColonColon=83, Tilde=84, Comma=85, Lambda=86, LeftBrace=87, RightBrace=88, 
		LeftAngle=89, RightAngle=90, LeftBracket=91, RightBracket=92, LeftParen=93, 
		RightParen=94, Asterisk=95, AtSign=96, AddressOf=97, Coalesce=98, IsNull=99, 
		Equal=100, NotEqual=101, LessThanOrEqual=102, GreaterThanOrEqual=103, 
		TypeList=104, Plus=105, Minus=106, Divide=107, Pipe=108, And=109, Xor=110, 
		Or=111, Not=112, Assign=113, AddAssign=114, SubtractAssign=115, MultiplyAssign=116, 
		DivideAssign=117, AndAssign=118, XorAssign=119, OrAssign=120, PlaceHolder=121, 
		Identifier=122, EscapedIdentifier=123, Unknown=124;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_contract = 5, RULE_attribute = 6, 
		RULE_baseTypes = 7, RULE_accessModifier = 8, RULE_safetyModifier = 9, 
		RULE_classInheritanceModifier = 10, RULE_methodInheritanceModifier = 11, 
		RULE_conversionModifier = 12, RULE_asyncModifier = 13, RULE_typeParameters = 14, 
		RULE_typeParameter = 15, RULE_typeArguments = 16, RULE_identifierOrPredefinedType = 17, 
		RULE_simpleName = 18, RULE_name = 19, RULE_valueType = 20, RULE_referenceType = 21, 
		RULE_returnType = 22, RULE_lifetime = 23, RULE_funcTypeParameterList = 24, 
		RULE_funcTypeParameter = 25, RULE_constExpression = 26, RULE_typeParameterConstraintClause = 27, 
		RULE_typeParameterConstraint = 28, RULE_member = 29, RULE_parameterList = 30, 
		RULE_parameter = 31, RULE_parameterModifier = 32, RULE_constructorInitializer = 33, 
		RULE_argumentList = 34, RULE_methodBody = 35, RULE_overloadableOperator = 36, 
		RULE_statement = 37, RULE_localVariableDeclaration = 38, RULE_expression = 39;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"contract", "attribute", "baseTypes", "accessModifier", "safetyModifier", 
		"classInheritanceModifier", "methodInheritanceModifier", "conversionModifier", 
		"asyncModifier", "typeParameters", "typeParameter", "typeArguments", "identifierOrPredefinedType", 
		"simpleName", "name", "valueType", "referenceType", "returnType", "lifetime", 
		"funcTypeParameterList", "funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "localVariableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'self'", "'uninitialized'", 
		"'where'", "'base'", "'operator'", "'external'", "'var'", "'let'", "'get'", 
		"'set'", "'sealed'", "'override'", "'abstract'", "'params'", "'do'", "'while'", 
		"'if'", "'else'", "'for'", "'in'", "'switch'", "'break'", "'continue'", 
		"'return'", "'try'", "'try!'", "'try?'", "'catch'", "'finally'", "'throw'", 
		"'implicit'", "'explicit'", "'conversion'", "'as'", "'as!'", "'as?'", 
		"'public'", "'private'", "'protected'", "'internal'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", "'immut'", "'async'", "'await'", "'requires'", "'ensures'", 
		"'void'", "'string'", "'byte'", null, null, null, "'size'", "'offset'", 
		"'UnsafeArray'", "'!'", null, null, null, "'null'", null, null, "';'", 
		"':'", "'.'", "'..'", "'::'", "'~'", "','", "'->'", "'{'", "'}'", "'<'", 
		"'>'", "'['", "']'", "'('", "')'", "'*'", "'@'", "'&'", "'??'", "'?'", 
		"'=='", "'<>'", "'<='", "'>='", "'...'", "'+'", "'-'", "'/'", "'|'", "'and'", 
		"'xor'", "'or'", "'not'", "'='", "'+='", "'-='", "'*='", "'/='", "'and='", 
		"'xor='", "'or='", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Enum", "New", "Delete", "Self", "Uninitialized", "Where", "Base", 
		"Operator", "External", "Var", "Let", "Get", "Set", "Sealed", "Override", 
		"Abstract", "Params", "Do", "While", "If", "Else", "For", "In", "Switch", 
		"Break", "Continue", "Return", "Try", "TryPanic", "TryResult", "Catch", 
		"Finally", "Throw", "Implicit", "Explicit", "Conversion", "As", "AsPanic", 
		"AsResult", "Public", "Private", "Protected", "Internal", "Safe", "Unsafe", 
		"Own", "Mutable", "Immutable", "Async", "Await", "Requires", "Ensures", 
		"Void", "String", "ByteType", "IntType", "UIntType", "FloatType", "SizeType", 
		"OffsetType", "UnsafeArrayType", "Panic", "ReservedWord", "BooleanLiteral", 
		"IntLiteral", "NullLiteral", "StringLiteral", "CharLiteral", "Semicolon", 
		"Colon", "Dot", "DotDot", "ColonColon", "Tilde", "Comma", "Lambda", "LeftBrace", 
		"RightBrace", "LeftAngle", "RightAngle", "LeftBracket", "RightBracket", 
		"LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", "Coalesce", 
		"IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "Pipe", "And", "Xor", "Or", "Not", 
		"Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", 
		"AndAssign", "XorAssign", "OrAssign", "PlaceHolder", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 80; usingDirective();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 86; declaration();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 92; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(Using);
			State = 95; namespaceName();
			State = 96; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 100;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; identifier();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 103; Match(Dot);
				State = 104; identifier();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalDeclarationContext : DeclarationContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ExternalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 222;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(Namespace);
				State = 111; namespaceName();
				State = 112; Match(LeftBrace);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 113; usingDirective();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 119; declaration();
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 125; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 127; attribute();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 133; accessModifier();
				State = 135;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 134; safetyModifier();
					}
				}

				State = 138;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 137; classInheritanceModifier();
					}
				}

				State = 140; Match(Class);
				State = 141; identifier();
				State = 143;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 142; typeParameters();
					}
				}

				State = 146;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 145; baseTypes();
					}
				}

				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 148; typeParameterConstraintClause();
					}
					}
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 154; Match(LeftBrace);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 155; member();
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 161; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 163; attribute();
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 169; accessModifier();
				State = 170;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 171; identifier();
				State = 174;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 172; Match(Colon);
					State = 173; referenceType();
					}
				}

				State = 178;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 176; Match(Assign);
					State = 177; expression(0);
					}
				}

				State = 180; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 182; attribute();
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 188; accessModifier();
				State = 190;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 189; safetyModifier();
					}
				}

				State = 192; identifier();
				State = 194;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 193; typeArguments();
					}
				}

				State = 196; parameterList();
				State = 197; Match(Lambda);
				State = 198; returnType();
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 199; typeParameterConstraintClause();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 205; contract();
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 211; methodBody();
				}
				break;
			case 5:
				_localctx = new ExternalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 213; Match(External);
				State = 214; Match(LeftBrace);
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 215; declaration();
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 221; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 10, RULE_contract);
		try {
			State = 228;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; Match(Requires);
				State = 225; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; Match(Ensures);
				State = 227; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(EscapedIdentifier);
			State = 233;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 231; Match(LeftParen);
				State = 232; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 235; Match(Colon);
			State = 237;
			_la = TokenStream.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (Void - 63)) | (1L << (String - 63)) | (1L << (ByteType - 63)) | (1L << (IntType - 63)) | (1L << (UIntType - 63)) | (1L << (FloatType - 63)) | (1L << (SizeType - 63)) | (1L << (OffsetType - 63)) | (1L << (UnsafeArrayType - 63)) | (1L << (Identifier - 63)) | (1L << (EscapedIdentifier - 63)))) != 0)) {
				{
				State = 236; _localctx.baseType = name(0);
				}
			}

			State = 248;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 239; Match(Colon);
				State = 240; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 241; Match(Comma);
					State = 242; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public IToken token;
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_accessModifier);
		try {
			State = 254;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252; _localctx.token = Match(Protected);
				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253; _localctx.token = Match(Internal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafetyModifierContext : ParserRuleContext {
		public IToken token;
		public SafetyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safetyModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSafetyModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSafetyModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafetyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafetyModifierContext safetyModifier() {
		SafetyModifierContext _localctx = new SafetyModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_safetyModifier);
		try {
			State = 258;
			switch (TokenStream.La(1)) {
			case Safe:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; _localctx.token = Match(Unsafe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public ClassInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritanceModifierContext classInheritanceModifier() {
		ClassInheritanceModifierContext _localctx = new ClassInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_classInheritanceModifier);
		try {
			State = 262;
			switch (TokenStream.La(1)) {
			case Abstract:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; _localctx.token = Match(Abstract);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; _localctx.token = Match(Sealed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public MethodInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInheritanceModifierContext methodInheritanceModifier() {
		MethodInheritanceModifierContext _localctx = new MethodInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodInheritanceModifier);
		try {
			State = 269;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; _localctx.token = Match(Abstract);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; _localctx.token = Match(Override);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266; _localctx.token = Match(Sealed);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 267; _localctx.token = Match(Sealed);
				State = 268; _localctx.token = Match(Override);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionModifierContext : ParserRuleContext {
		public IToken token;
		public ConversionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionModifierContext conversionModifier() {
		ConversionModifierContext _localctx = new ConversionModifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_conversionModifier);
		try {
			State = 273;
			switch (TokenStream.La(1)) {
			case Implicit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; _localctx.token = Match(Explicit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsyncModifierContext : ParserRuleContext {
		public IToken token;
		public AsyncModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asyncModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAsyncModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAsyncModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsyncModifierContext asyncModifier() {
		AsyncModifierContext _localctx = new AsyncModifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_asyncModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; _localctx.token = Match(Async);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(LeftAngle);
			State = 278; typeParameter();
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 279; Match(Comma);
				State = 280; typeParameter();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 286; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public ValueTypeContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeParameter);
		int _la;
		try {
			State = 297;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; identifier();
				State = 290;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 289; _localctx.isList = Match(TypeList);
					}
				}

				State = 294;
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 292; Match(Colon);
					State = 293; _localctx.baseType = valueType(0);
					}
					break;
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ReferenceTypeContext[] referenceType() {
			return GetRuleContexts<ReferenceTypeContext>();
		}
		public ReferenceTypeContext referenceType(int i) {
			return GetRuleContext<ReferenceTypeContext>(i);
		}
		public LifetimeContext[] lifetime() {
			return GetRuleContexts<LifetimeContext>();
		}
		public LifetimeContext lifetime(int i) {
			return GetRuleContext<LifetimeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(LeftAngle);
			State = 301;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 300; lifetime();
				}
				break;
			}
			State = 303; referenceType();
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 304; Match(Comma);
				State = 306;
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 305; lifetime();
					}
					break;
				}
				State = 308; referenceType();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 314; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifierOrPredefinedType);
		try {
			State = 326;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316; identifier();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; _localctx.token = Match(Void);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 320; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 321; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 322; _localctx.token = Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 323; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 324; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 10);
				{
				State = 325; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleName);
		try {
			State = 332;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; identifierOrPredefinedType();
				State = 330; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnqualifiedNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public UnqualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnqualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnqualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnqualifiedNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 335; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 337;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 338; Match(Dot);
					State = 339; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : ValueTypeContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : ValueTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public FunctionTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : ValueTypeContext {
		public ValueTypeContext _valueType;
		public IList<ValueTypeContext> _types = new List<ValueTypeContext>();
		public ValueTypeContext[] valueType() {
			return GetRuleContexts<ValueTypeContext>();
		}
		public ValueTypeContext valueType(int i) {
			return GetRuleContext<ValueTypeContext>(i);
		}
		public TupleTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MaybeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public PointerTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueTypeContext _localctx = new ValueTypeContext(Context, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			switch (TokenStream.La(1)) {
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 346; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 360;
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 347; Match(LeftBracket);
					State = 348; ((TupleTypeContext)_localctx)._valueType = valueType(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
					State = 353;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 349; Match(Comma);
						State = 350; ((TupleTypeContext)_localctx)._valueType = valueType(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
						}
						}
						State = 355;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 356; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 358; Match(LeftBracket);
					State = 359; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362; funcTypeParameterList();
				State = 363; Match(Lambda);
				State = 364; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 374;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 372;
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new MaybeTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 368;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 369; Match(IsNull);
						}
						break;
					case 2:
						{
						_localctx = new PointerTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 370;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 371; Match(Asterisk);
						}
						break;
					}
					} 
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	 
		public ReferenceTypeContext() { }
		public virtual void CopyFrom(ReferenceTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OwnedImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public ImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public MutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedMutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedMutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_referenceType);
		int _la;
		try {
			State = 391;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				_localctx = new ImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 377; lifetime();
					}
				}

				State = 380; valueType(0);
				}
				break;
			case 2:
				_localctx = new MutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 381; lifetime();
					}
				}

				State = 384; Match(Mutable);
				State = 385; valueType(0);
				}
				break;
			case 3:
				_localctx = new OwnedImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 386; Match(Own);
				State = 387; valueType(0);
				}
				break;
			case 4:
				_localctx = new OwnedMutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 388; Match(Own);
				State = 389; Match(Mutable);
				State = 390; valueType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnType);
		try {
			State = 395;
			switch (TokenStream.La(1)) {
			case Own:
			case Mutable:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; referenceType();
				}
				break;
			case Panic:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; Match(Panic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 46, RULE_lifetime);
		try {
			State = 401;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397; Match(Tilde);
				State = 398; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; Match(Tilde);
				State = 400; Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 416;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403; Match(LeftParen);
				State = 404; funcTypeParameter();
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 405; Match(Comma);
					State = 406; funcTypeParameter();
					}
					}
					State = 411;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 412; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; Match(LeftParen);
				State = 415; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 418; parameterModifier();
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 424; referenceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_constExpression);
		try {
			State = 429;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 428; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 447;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; Match(Where);
				State = 432; typeParameter();
				State = 433; Match(Colon);
				State = 434; typeParameterConstraint();
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 435; Match(Comma);
					State = 436; typeParameterConstraint();
					}
					}
					State = 441;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442; Match(Where);
				State = 443; typeParameter();
				State = 444;
				_la = TokenStream.La(1);
				if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (LeftAngle - 89)) | (1L << (RightAngle - 89)) | (1L << (LessThanOrEqual - 89)) | (1L << (GreaterThanOrEqual - 89)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 445; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeParameterConstraint);
		try {
			State = 454;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 449; Match(New);
				State = 450; Match(LeftParen);
				State = 451; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 452; valueType(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 453; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ConversionModifierContext conversionModifier() {
			return GetRuleContext<ConversionModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 58, RULE_member);
		int _la;
		try {
			State = 736;
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 456; attribute();
					}
					}
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 462; accessModifier();
				State = 464;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 463; safetyModifier();
					}
				}

				State = 466; Match(New);
				State = 468;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 467; identifier();
					}
				}

				State = 470; parameterList();
				State = 473;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 471; Match(Lambda);
					State = 472; returnType();
					}
				}

				State = 476;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 475; constructorInitializer();
					}
				}

				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 478; contract();
					}
					}
					State = 483;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 484; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 486; attribute();
					}
					}
					State = 491;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 492; accessModifier();
				State = 494;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 493; safetyModifier();
					}
				}

				State = 496; Match(Delete);
				State = 497; parameterList();
				State = 498; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 500; attribute();
					}
					}
					State = 505;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 506; accessModifier();
				State = 508;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 507; safetyModifier();
					}
				}

				State = 510; conversionModifier();
				State = 511; Match(Conversion);
				State = 513;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 512; typeArguments();
					}
				}

				State = 515; parameterList();
				State = 516; Match(Lambda);
				State = 517; returnType();
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 518; typeParameterConstraintClause();
					}
					}
					State = 523;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 524; contract();
					}
					}
					State = 529;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 530; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 532; attribute();
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 538; accessModifier();
				State = 539;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 540; identifier();
				State = 543;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 541; Match(Colon);
					State = 542; referenceType();
					}
				}

				State = 547;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 545; Match(Assign);
					State = 546; expression(0);
					}
				}

				State = 549; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 551; attribute();
					}
					}
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 557; accessModifier();
				State = 559;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 558; methodInheritanceModifier();
					}
				}

				State = 562;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 561; safetyModifier();
					}
				}

				State = 565;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 564; asyncModifier();
					}
				}

				State = 567;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 568; identifier();
				State = 570;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 569; typeArguments();
					}
				}

				State = 572; parameterList();
				State = 573; Match(Lambda);
				State = 574; returnType();
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 575; typeParameterConstraintClause();
					}
					}
					State = 580;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 581; contract();
					}
					}
					State = 586;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 587; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 589; attribute();
					}
					}
					State = 594;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 595; accessModifier();
				State = 597;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 596; methodInheritanceModifier();
					}
				}

				State = 600;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 599; safetyModifier();
					}
				}

				State = 603;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 602; asyncModifier();
					}
				}

				State = 605;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 606; Match(LeftBracket);
				State = 607; Match(RightBracket);
				State = 609;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 608; typeArguments();
					}
				}

				State = 611; parameterList();
				State = 612; Match(Lambda);
				State = 613; returnType();
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 614; typeParameterConstraintClause();
					}
					}
					State = 619;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 620; contract();
					}
					}
					State = 625;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 626; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 628; attribute();
					}
					}
					State = 633;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 634; accessModifier();
				State = 636;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 635; methodInheritanceModifier();
					}
				}

				State = 639;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 638; safetyModifier();
					}
				}

				State = 642;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 641; asyncModifier();
					}
				}

				State = 644; identifier();
				State = 646;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 645; typeArguments();
					}
				}

				State = 648; parameterList();
				State = 649; Match(Lambda);
				State = 650; returnType();
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 651; typeParameterConstraintClause();
					}
					}
					State = 656;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 657; contract();
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 663; methodBody();
				}
				break;
			case 8:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 665; attribute();
					}
					}
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 671; accessModifier();
				State = 673;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 672; methodInheritanceModifier();
					}
				}

				State = 676;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 675; safetyModifier();
					}
				}

				State = 679;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 678; asyncModifier();
					}
				}

				State = 681; Match(Operator);
				State = 682; overloadableOperator();
				State = 683; parameterList();
				State = 684; Match(Lambda);
				State = 685; returnType();
				State = 689;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 686; typeParameterConstraintClause();
					}
					}
					State = 691;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 692; contract();
					}
					}
					State = 697;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 698; methodBody();
				}
				break;
			case 9:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 700; attribute();
					}
					}
					State = 705;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 706; accessModifier();
				State = 708;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 707; safetyModifier();
					}
				}

				State = 711;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 710; classInheritanceModifier();
					}
				}

				State = 713; Match(Class);
				State = 714; identifier();
				State = 716;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 715; typeParameters();
					}
				}

				State = 719;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 718; baseTypes();
					}
				}

				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 721; typeParameterConstraintClause();
					}
					}
					State = 726;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 727; Match(LeftBrace);
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 728; member();
					}
					}
					State = 733;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 734; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 60, RULE_parameterList);
		int _la;
		try {
			State = 751;
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 738; Match(LeftParen);
				State = 739; parameter();
				State = 744;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 740; Match(Comma);
					State = 741; parameter();
					}
					}
					State = 746;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 747; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 749; Match(LeftParen);
				State = 750; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public IToken isVar;
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public IToken isOwn;
		public IToken isMut;
		public IToken token;
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 62, RULE_parameter);
		int _la;
		try {
			State = 774;
			switch (TokenStream.La(1)) {
			case Var:
			case Params:
			case Colon:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 754;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 753; ((NamedParameterContext)_localctx).isVar = Match(Var);
					}
				}

				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 756; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 761;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 763;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 762; identifier();
					}
				}

				State = 765; Match(Colon);
				State = 766; referenceType();
				}
				break;
			case Self:
			case Own:
			case Mutable:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 767; ((SelfParameterContext)_localctx).isOwn = Match(Own);
					}
				}

				State = 771;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 770; ((SelfParameterContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 773; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 66, RULE_constructorInitializer);
		try {
			State = 790;
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778; Match(Colon);
				State = 779; Match(Base);
				State = 780; Match(LeftParen);
				State = 781; argumentList();
				State = 782; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 784; Match(Colon);
				State = 785; Match(Self);
				State = 786; Match(LeftParen);
				State = 787; argumentList();
				State = 788; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 68, RULE_argumentList);
		int _la;
		try {
			State = 801;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case Try:
			case TryPanic:
			case TryResult:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case CharLiteral:
			case LeftParen:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 793; Match(Comma);
					State = 794; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 799;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
	 
		public MethodBodyContext() { }
		public virtual void CopyFrom(MethodBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockMethodBodyContext : MethodBodyContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoMethodBodyContext : MethodBodyContext {
		public NoMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNoMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNoMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_methodBody);
		int _la;
		try {
			State = 812;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				_localctx = new BlockMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 803; Match(LeftBrace);
				State = 807;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 804; ((BlockMethodBodyContext)_localctx)._statement = statement();
					((BlockMethodBodyContext)_localctx)._statements.Add(((BlockMethodBodyContext)_localctx)._statement);
					}
					}
					State = 809;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 810; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new NoMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 811; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_overloadableOperator);
		try {
			State = 826;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 814; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 816; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 817; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 818; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 819; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 820; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 821; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 822; Match(LeftBracket);
				State = 823; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 824; Match(Pipe);
				State = 825; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public StatementContext then;
		public StatementContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_statement);
		int _la;
		try {
			State = 902;
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 828; localVariableDeclaration();
				State = 829; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 831; Match(Unsafe);
				State = 832; Match(LeftBrace);
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 833; statement();
					}
					}
					State = 838;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 839; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 840; Match(LeftBrace);
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 841; statement();
					}
					}
					State = 846;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 847; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 848; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 849; expression(0);
				State = 850; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 852; Match(Return);
				State = 854;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 853; expression(0);
					}
				}

				State = 856; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 857; Match(Throw);
				State = 858; expression(0);
				State = 859; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 861; Match(If);
				State = 862; Match(LeftParen);
				State = 863; ((IfStatementContext)_localctx).condition = expression(0);
				State = 864; Match(RightParen);
				State = 865; ((IfStatementContext)_localctx).then = statement();
				State = 868;
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 866; Match(Else);
					State = 867; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 870; Match(If);
				State = 871; Match(LeftParen);
				State = 872; localVariableDeclaration();
				State = 873; Match(RightParen);
				State = 874; ((LetIfStatementContext)_localctx).then = statement();
				State = 877;
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 875; Match(Else);
					State = 876; ((LetIfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 879; Match(For);
				State = 880; Match(LeftParen);
				State = 883;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 881; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 882; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 885; Match(In);
				State = 886; expression(0);
				State = 887; Match(RightParen);
				State = 888; statement();
				}
				break;
			case 11:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 890; Match(While);
				State = 891; Match(LeftParen);
				State = 892; expression(0);
				State = 893; Match(RightParen);
				State = 894; statement();
				}
				break;
			case 12:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 896; Match(Delete);
				State = 897; expression(0);
				State = 898; Match(Semicolon);
				}
				break;
			case 13:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 900; Match(Continue);
				State = 901; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_localVariableDeclaration);
		int _la;
		try {
			State = 932;
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 904;
				_localctx.kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					_localctx.kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 905; identifier();
				State = 907;
				_la = TokenStream.La(1);
				if (_la==IsNull) {
					{
					State = 906; Match(IsNull);
					}
				}

				State = 909; Match(Colon);
				State = 910; referenceType();
				State = 913;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 911; Match(Assign);
					State = 912; expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915;
				_localctx.kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					_localctx.kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 916; Match(LeftBracket);
				State = 917; identifier();
				State = 922;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 918; Match(Comma);
					State = 919; identifier();
					}
					}
					State = 924;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 925; Match(RightBracket);
				State = 926; Match(Colon);
				State = 927; referenceType();
				State = 930;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 928; Match(Assign);
					State = 929; expression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 935;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (Asterisk - 95)) | (1L << (AddressOf - 95)) | (1L << (Plus - 95)) | (1L << (Minus - 95)) | (1L << (Not - 95)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 936; expression(25);
				}
				break;
			case 2:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 937;
				((TryExpressionContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 938; expression(12);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 939; Match(LeftParen);
				State = 940; expression(0);
				State = 941; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 943; Match(Pipe);
				State = 944; expression(0);
				State = 945; Match(Pipe);
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 947; Match(New);
				State = 948; name(0);
				State = 949; Match(LeftParen);
				State = 950; argumentList();
				State = 951; Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 953; Match(New);
				State = 955;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 954; baseTypes();
					}
				}

				State = 957; Match(LeftParen);
				State = 958; argumentList();
				State = 959; Match(RightParen);
				State = 960; Match(LeftBrace);
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 961; member();
					}
					}
					State = 966;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 967; Match(RightBrace);
				}
				break;
			case 7:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 971;
				switch (TokenStream.La(1)) {
				case Identifier:
				case EscapedIdentifier:
					{
					State = 969; identifier();
					}
					break;
				case LeftParen:
					{
					State = 970; parameterList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 973; Match(Lambda);
				State = 983;
				switch (TokenStream.La(1)) {
				case New:
				case Self:
				case Uninitialized:
				case Try:
				case TryPanic:
				case TryResult:
				case Void:
				case String:
				case ByteType:
				case IntType:
				case UIntType:
				case FloatType:
				case SizeType:
				case OffsetType:
				case UnsafeArrayType:
				case BooleanLiteral:
				case IntLiteral:
				case NullLiteral:
				case StringLiteral:
				case CharLiteral:
				case LeftParen:
				case Asterisk:
				case AddressOf:
				case Plus:
				case Minus:
				case Pipe:
				case Not:
				case Identifier:
				case EscapedIdentifier:
					{
					State = 974; expression(0);
					}
					break;
				case LeftBrace:
					{
					State = 975; Match(LeftBrace);
					State = 979;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
						{
						{
						State = 976; ((LambdaExpressionContext)_localctx)._statement = statement();
						((LambdaExpressionContext)_localctx)._statements.Add(((LambdaExpressionContext)_localctx)._statement);
						}
						}
						State = 981;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 982; Match(RightBrace);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 8:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 985; simpleName();
				}
				break;
			case 9:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 986; Match(NullLiteral);
				}
				break;
			case 10:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 987; Match(Self);
				}
				break;
			case 11:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 988; Match(BooleanLiteral);
				}
				break;
			case 12:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 989; Match(IntLiteral);
				}
				break;
			case 13:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 990; Match(Uninitialized);
				}
				break;
			case 14:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 991; Match(StringLiteral);
				}
				break;
			case 15:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 992; Match(CharLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1054;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1052;
					switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 995;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 996; Match(DotDot);
						State = 997; expression(30);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 998;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 999;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1000; expression(25);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1001;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1002;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1003; expression(24);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1004;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1005;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (LeftAngle - 89)) | (1L << (RightAngle - 89)) | (1L << (LessThanOrEqual - 89)) | (1L << (GreaterThanOrEqual - 89)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1006; expression(23);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1007;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1008;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1009; ((EqualityExpressionContext)_localctx).rhs = expression(22);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1010;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1011; Match(And);
						State = 1012; expression(21);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1013;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1014; Match(Xor);
						State = 1015; expression(20);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1016;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1017; Match(Or);
						State = 1018; expression(19);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1019;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1020; Match(Coalesce);
						State = 1021; expression(18);
						}
						break;
					case 10:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1022;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1023; Match(In);
						State = 1024; expression(17);
						}
						break;
					case 11:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1025;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1026; Match(IsNull);
						State = 1027; ((IfExpressionContext)_localctx).then = expression(0);
						State = 1028; Match(Colon);
						State = 1029; ((IfExpressionContext)_localctx).@else = expression(11);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1031;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1032;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (Assign - 113)) | (1L << (AddAssign - 113)) | (1L << (SubtractAssign - 113)) | (1L << (MultiplyAssign - 113)) | (1L << (DivideAssign - 113)) | (1L << (AndAssign - 113)) | (1L << (XorAssign - 113)) | (1L << (OrAssign - 113)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1033; ((AssignmentExpressionContext)_localctx).rvalue = expression(10);
						}
						break;
					case 13:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1034;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1035; Match(Dot);
						State = 1036; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1037;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1038; Match(LeftParen);
						State = 1039; argumentList();
						State = 1040; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1042;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1043; Match(LeftBracket);
						State = 1044; argumentList();
						State = 1045; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1047;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1048; Match(IsNull);
						}
						break;
					case 17:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1049;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1050;
						((CastExpressionContext)_localctx).kind = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1051; valueType(0);
						}
						break;
					}
					} 
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return name_sempred((NameContext)_localctx, predIndex);
		case 20: return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 39: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 24);
		case 5: return Precpred(Context, 23);
		case 6: return Precpred(Context, 22);
		case 7: return Precpred(Context, 21);
		case 8: return Precpred(Context, 20);
		case 9: return Precpred(Context, 19);
		case 10: return Precpred(Context, 18);
		case 11: return Precpred(Context, 17);
		case 12: return Precpred(Context, 16);
		case 13: return Precpred(Context, 11);
		case 14: return Precpred(Context, 10);
		case 15: return Precpred(Context, 30);
		case 16: return Precpred(Context, 28);
		case 17: return Precpred(Context, 27);
		case 18: return Precpred(Context, 26);
		case 19: return Precpred(Context, 13);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3~\x424\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\a\x2T\n\x2\f\x2\xE\x2W\v\x2\x3\x2\a\x2Z\n\x2\f\x2\xE\x2]\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4g\n\x4\x3\x5\x3\x5\x3\x5"+
		"\a\x5l\n\x5\f\x5\xE\x5o\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6u\n\x6\f\x6\xE"+
		"\x6x\v\x6\x3\x6\a\x6{\n\x6\f\x6\xE\x6~\v\x6\x3\x6\x3\x6\x3\x6\a\x6\x83"+
		"\n\x6\f\x6\xE\x6\x86\v\x6\x3\x6\x3\x6\x5\x6\x8A\n\x6\x3\x6\x5\x6\x8D\n"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6\x92\n\x6\x3\x6\x5\x6\x95\n\x6\x3\x6\a\x6\x98"+
		"\n\x6\f\x6\xE\x6\x9B\v\x6\x3\x6\x3\x6\a\x6\x9F\n\x6\f\x6\xE\x6\xA2\v\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\xA7\n\x6\f\x6\xE\x6\xAA\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6\xB1\n\x6\x3\x6\x3\x6\x5\x6\xB5\n\x6\x3\x6\x3\x6\x3"+
		"\x6\a\x6\xBA\n\x6\f\x6\xE\x6\xBD\v\x6\x3\x6\x3\x6\x5\x6\xC1\n\x6\x3\x6"+
		"\x3\x6\x5\x6\xC5\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xCB\n\x6\f\x6\xE\x6"+
		"\xCE\v\x6\x3\x6\a\x6\xD1\n\x6\f\x6\xE\x6\xD4\v\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6\xDB\n\x6\f\x6\xE\x6\xDE\v\x6\x3\x6\x5\x6\xE1\n\x6\x3\a"+
		"\x3\a\x3\a\x3\a\x5\a\xE7\n\a\x3\b\x3\b\x3\b\x5\b\xEC\n\b\x3\t\x3\t\x5"+
		"\t\xF0\n\t\x3\t\x3\t\x3\t\x3\t\a\t\xF6\n\t\f\t\xE\t\xF9\v\t\x5\t\xFB\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x5\n\x101\n\n\x3\v\x3\v\x5\v\x105\n\v\x3\f\x3\f"+
		"\x5\f\x109\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x110\n\r\x3\xE\x3\xE\x5\xE"+
		"\x114\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x11C\n\x10\f"+
		"\x10\xE\x10\x11F\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\x125\n\x11\x3"+
		"\x11\x3\x11\x5\x11\x129\n\x11\x3\x11\x5\x11\x12C\n\x11\x3\x12\x3\x12\x5"+
		"\x12\x130\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x135\n\x12\x3\x12\a\x12\x138"+
		"\n\x12\f\x12\xE\x12\x13B\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x149\n\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x5\x14\x14F\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\a\x15\x157\n\x15\f\x15\xE\x15\x15A\v\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\a\x16\x162\n\x16\f\x16\xE\x16\x165\v\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x5\x16\x16B\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x171\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x177\n\x16\f\x16\xE"+
		"\x16\x17A\v\x16\x3\x17\x5\x17\x17D\n\x17\x3\x17\x3\x17\x5\x17\x181\n\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x18A\n\x17\x3"+
		"\x18\x3\x18\x5\x18\x18E\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x194"+
		"\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x19A\n\x1A\f\x1A\xE\x1A\x19D"+
		"\v\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x1A3\n\x1A\x3\x1B\a\x1B\x1A6"+
		"\n\x1B\f\x1B\xE\x1B\x1A9\v\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C"+
		"\x1B0\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x1B8\n\x1D"+
		"\f\x1D\xE\x1D\x1BB\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x1C2"+
		"\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1C9\n\x1E\x3\x1F\a\x1F"+
		"\x1CC\n\x1F\f\x1F\xE\x1F\x1CF\v\x1F\x3\x1F\x3\x1F\x5\x1F\x1D3\n\x1F\x3"+
		"\x1F\x3\x1F\x5\x1F\x1D7\n\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1DC\n\x1F\x3"+
		"\x1F\x5\x1F\x1DF\n\x1F\x3\x1F\a\x1F\x1E2\n\x1F\f\x1F\xE\x1F\x1E5\v\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\a\x1F\x1EA\n\x1F\f\x1F\xE\x1F\x1ED\v\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x1F1\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x1F8"+
		"\n\x1F\f\x1F\xE\x1F\x1FB\v\x1F\x3\x1F\x3\x1F\x5\x1F\x1FF\n\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x204\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x20A"+
		"\n\x1F\f\x1F\xE\x1F\x20D\v\x1F\x3\x1F\a\x1F\x210\n\x1F\f\x1F\xE\x1F\x213"+
		"\v\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x218\n\x1F\f\x1F\xE\x1F\x21B\v\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x222\n\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x226\n\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x22B\n\x1F\f\x1F\xE\x1F\x22E\v"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x232\n\x1F\x3\x1F\x5\x1F\x235\n\x1F\x3\x1F\x5"+
		"\x1F\x238\n\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x23D\n\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\a\x1F\x243\n\x1F\f\x1F\xE\x1F\x246\v\x1F\x3\x1F\a\x1F\x249"+
		"\n\x1F\f\x1F\xE\x1F\x24C\v\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x251\n\x1F\f"+
		"\x1F\xE\x1F\x254\v\x1F\x3\x1F\x3\x1F\x5\x1F\x258\n\x1F\x3\x1F\x5\x1F\x25B"+
		"\n\x1F\x3\x1F\x5\x1F\x25E\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x264"+
		"\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x26A\n\x1F\f\x1F\xE\x1F\x26D"+
		"\v\x1F\x3\x1F\a\x1F\x270\n\x1F\f\x1F\xE\x1F\x273\v\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\a\x1F\x278\n\x1F\f\x1F\xE\x1F\x27B\v\x1F\x3\x1F\x3\x1F\x5\x1F\x27F"+
		"\n\x1F\x3\x1F\x5\x1F\x282\n\x1F\x3\x1F\x5\x1F\x285\n\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x289\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x28F\n\x1F\f\x1F"+
		"\xE\x1F\x292\v\x1F\x3\x1F\a\x1F\x295\n\x1F\f\x1F\xE\x1F\x298\v\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\a\x1F\x29D\n\x1F\f\x1F\xE\x1F\x2A0\v\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x2A4\n\x1F\x3\x1F\x5\x1F\x2A7\n\x1F\x3\x1F\x5\x1F\x2AA\n\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x2B2\n\x1F\f\x1F\xE\x1F"+
		"\x2B5\v\x1F\x3\x1F\a\x1F\x2B8\n\x1F\f\x1F\xE\x1F\x2BB\v\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\a\x1F\x2C0\n\x1F\f\x1F\xE\x1F\x2C3\v\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x2C7\n\x1F\x3\x1F\x5\x1F\x2CA\n\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2CF"+
		"\n\x1F\x3\x1F\x5\x1F\x2D2\n\x1F\x3\x1F\a\x1F\x2D5\n\x1F\f\x1F\xE\x1F\x2D8"+
		"\v\x1F\x3\x1F\x3\x1F\a\x1F\x2DC\n\x1F\f\x1F\xE\x1F\x2DF\v\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x2E3\n\x1F\x3 \x3 \x3 \x3 \a \x2E9\n \f \xE \x2EC\v \x3 \x3"+
		" \x3 \x3 \x5 \x2F2\n \x3!\x5!\x2F5\n!\x3!\a!\x2F8\n!\f!\xE!\x2FB\v!\x3"+
		"!\x5!\x2FE\n!\x3!\x3!\x3!\x5!\x303\n!\x3!\x5!\x306\n!\x3!\x5!\x309\n!"+
		"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x319\n"+
		"#\x3$\x3$\x3$\a$\x31E\n$\f$\xE$\x321\v$\x3$\x5$\x324\n$\x3%\x3%\a%\x328"+
		"\n%\f%\xE%\x32B\v%\x3%\x3%\x5%\x32F\n%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x5&\x33D\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x345\n"+
		"\'\f\'\xE\'\x348\v\'\x3\'\x3\'\x3\'\a\'\x34D\n\'\f\'\xE\'\x350\v\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x359\n\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x367\n\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x5\'\x370\n\'\x3\'\x3\'\x3\'\x3\'\x5\'\x376\n\'\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x5\'\x389\n\'\x3(\x3(\x3(\x5(\x38E\n(\x3(\x3(\x3(\x3(\x5(\x394"+
		"\n(\x3(\x3(\x3(\x3(\x3(\a(\x39B\n(\f(\xE(\x39E\v(\x3(\x3(\x3(\x3(\x3("+
		"\x5(\x3A5\n(\x5(\x3A7\n(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x3BE\n)\x3)\x3)\x3)\x3)\x3)"+
		"\a)\x3C5\n)\f)\xE)\x3C8\v)\x3)\x3)\x3)\x3)\x5)\x3CE\n)\x3)\x3)\x3)\x3"+
		")\a)\x3D4\n)\f)\xE)\x3D7\v)\x3)\x5)\x3DA\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x5)\x3E4\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x41F\n)\f)\xE)\x422\v)\x3)\x2"+
		"\x5(*P*\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30"+
		"\x32\x34\x36\x38:<>@\x42\x44\x46HJLNP\x2\f\x3\x2\x16\x17\x4\x2[\\hi\x3"+
		"\x2\x18\x19\x6\x2\x61\x61\x63\x63klrr\x3\x2(*\x4\x2\x61\x61mm\x3\x2kl"+
		"\x3\x2\x66g\x3\x2sz\x3\x2\x31\x33\x4D6\x2U\x3\x2\x2\x2\x4`\x3\x2\x2\x2"+
		"\x6\x66\x3\x2\x2\x2\bh\x3\x2\x2\x2\n\xE0\x3\x2\x2\x2\f\xE6\x3\x2\x2\x2"+
		"\xE\xE8\x3\x2\x2\x2\x10\xED\x3\x2\x2\x2\x12\x100\x3\x2\x2\x2\x14\x104"+
		"\x3\x2\x2\x2\x16\x108\x3\x2\x2\x2\x18\x10F\x3\x2\x2\x2\x1A\x113\x3\x2"+
		"\x2\x2\x1C\x115\x3\x2\x2\x2\x1E\x117\x3\x2\x2\x2 \x12B\x3\x2\x2\x2\"\x12D"+
		"\x3\x2\x2\x2$\x148\x3\x2\x2\x2&\x14E\x3\x2\x2\x2(\x150\x3\x2\x2\x2*\x170"+
		"\x3\x2\x2\x2,\x189\x3\x2\x2\x2.\x18D\x3\x2\x2\x2\x30\x193\x3\x2\x2\x2"+
		"\x32\x1A2\x3\x2\x2\x2\x34\x1A7\x3\x2\x2\x2\x36\x1AF\x3\x2\x2\x2\x38\x1C1"+
		"\x3\x2\x2\x2:\x1C8\x3\x2\x2\x2<\x2E2\x3\x2\x2\x2>\x2F1\x3\x2\x2\x2@\x308"+
		"\x3\x2\x2\x2\x42\x30A\x3\x2\x2\x2\x44\x318\x3\x2\x2\x2\x46\x323\x3\x2"+
		"\x2\x2H\x32E\x3\x2\x2\x2J\x33C\x3\x2\x2\x2L\x388\x3\x2\x2\x2N\x3A6\x3"+
		"\x2\x2\x2P\x3E3\x3\x2\x2\x2RT\x5\x4\x3\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2UV\x3\x2\x2\x2V[\x3\x2\x2\x2WU\x3\x2\x2\x2XZ\x5\n\x6\x2"+
		"YX\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\^\x3\x2\x2"+
		"\x2][\x3\x2\x2\x2^_\a\x2\x2\x3_\x3\x3\x2\x2\x2`\x61\a\n\x2\x2\x61\x62"+
		"\x5\b\x5\x2\x62\x63\aQ\x2\x2\x63\x5\x3\x2\x2\x2\x64g\a|\x2\x2\x65g\a}"+
		"\x2\x2\x66\x64\x3\x2\x2\x2\x66\x65\x3\x2\x2\x2g\a\x3\x2\x2\x2hm\x5\x6"+
		"\x4\x2ij\aS\x2\x2jl\x5\x6\x4\x2ki\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2"+
		"\x2mn\x3\x2\x2\x2n\t\x3\x2\x2\x2om\x3\x2\x2\x2pq\a\v\x2\x2qr\x5\b\x5\x2"+
		"rv\aY\x2\x2su\x5\x4\x3\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw"+
		"\x3\x2\x2\x2w|\x3\x2\x2\x2xv\x3\x2\x2\x2y{\x5\n\x6\x2zy\x3\x2\x2\x2{~"+
		"\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x7F\x3\x2\x2\x2~|\x3\x2\x2\x2"+
		"\x7F\x80\aZ\x2\x2\x80\xE1\x3\x2\x2\x2\x81\x83\x5\xE\b\x2\x82\x81\x3\x2"+
		"\x2\x2\x83\x86\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85"+
		"\x87\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x87\x89\x5\x12\n\x2\x88\x8A\x5\x14"+
		"\v\x2\x89\x88\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B"+
		"\x8D\x5\x16\f\x2\x8C\x8B\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8E\x3\x2"+
		"\x2\x2\x8E\x8F\a\f\x2\x2\x8F\x91\x5\x6\x4\x2\x90\x92\x5\x1E\x10\x2\x91"+
		"\x90\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x94\x3\x2\x2\x2\x93\x95\x5\x10"+
		"\t\x2\x94\x93\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x99\x3\x2\x2\x2\x96"+
		"\x98\x5\x38\x1D\x2\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97\x3"+
		"\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2"+
		"\x9C\xA0\aY\x2\x2\x9D\x9F\x5<\x1F\x2\x9E\x9D\x3\x2\x2\x2\x9F\xA2\x3\x2"+
		"\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2"+
		"\xA0\x3\x2\x2\x2\xA3\xA4\aZ\x2\x2\xA4\xE1\x3\x2\x2\x2\xA5\xA7\x5\xE\b"+
		"\x2\xA6\xA5\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9"+
		"\x3\x2\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAC\x5\x12\n"+
		"\x2\xAC\xAD\t\x2\x2\x2\xAD\xB0\x5\x6\x4\x2\xAE\xAF\aR\x2\x2\xAF\xB1\x5"+
		",\x17\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2"+
		"\xB3\as\x2\x2\xB3\xB5\x5P)\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2"+
		"\xB5\xB6\x3\x2\x2\x2\xB6\xB7\aQ\x2\x2\xB7\xE1\x3\x2\x2\x2\xB8\xBA\x5\xE"+
		"\b\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB"+
		"\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xC0\x5\x12"+
		"\n\x2\xBF\xC1\x5\x14\v\x2\xC0\xBF\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1"+
		"\xC2\x3\x2\x2\x2\xC2\xC4\x5\x6\x4\x2\xC3\xC5\x5\"\x12\x2\xC4\xC3\x3\x2"+
		"\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\x5> \x2\xC7\xC8"+
		"\aX\x2\x2\xC8\xCC\x5.\x18\x2\xC9\xCB\x5\x38\x1D\x2\xCA\xC9\x3\x2\x2\x2"+
		"\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xD2\x3"+
		"\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD1\x5\f\a\x2\xD0\xCF\x3\x2\x2\x2\xD1"+
		"\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD5\x3\x2"+
		"\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD6\x5H%\x2\xD6\xE1\x3\x2\x2\x2\xD7\xD8"+
		"\a\x15\x2\x2\xD8\xDC\aY\x2\x2\xD9\xDB\x5\n\x6\x2\xDA\xD9\x3\x2\x2\x2\xDB"+
		"\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2"+
		"\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE1\aZ\x2\x2\xE0p\x3\x2\x2\x2\xE0\x84\x3"+
		"\x2\x2\x2\xE0\xA8\x3\x2\x2\x2\xE0\xBB\x3\x2\x2\x2\xE0\xD7\x3\x2\x2\x2"+
		"\xE1\v\x3\x2\x2\x2\xE2\xE3\a?\x2\x2\xE3\xE7\x5P)\x2\xE4\xE5\a@\x2\x2\xE5"+
		"\xE7\x5P)\x2\xE6\xE2\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7\r\x3\x2\x2\x2"+
		"\xE8\xEB\a}\x2\x2\xE9\xEA\a_\x2\x2\xEA\xEC\a`\x2\x2\xEB\xE9\x3\x2\x2\x2"+
		"\xEB\xEC\x3\x2\x2\x2\xEC\xF\x3\x2\x2\x2\xED\xEF\aR\x2\x2\xEE\xF0\x5(\x15"+
		"\x2\xEF\xEE\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xFA\x3\x2\x2\x2\xF1\xF2"+
		"\aR\x2\x2\xF2\xF7\x5(\x15\x2\xF3\xF4\aW\x2\x2\xF4\xF6\x5(\x15\x2\xF5\xF3"+
		"\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2"+
		"\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xF1\x3\x2\x2\x2\xFA\xFB"+
		"\x3\x2\x2\x2\xFB\x11\x3\x2\x2\x2\xFC\x101\a\x34\x2\x2\xFD\x101\a\x35\x2"+
		"\x2\xFE\x101\a\x36\x2\x2\xFF\x101\a\x37\x2\x2\x100\xFC\x3\x2\x2\x2\x100"+
		"\xFD\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\xFF\x3\x2\x2\x2\x101\x13\x3"+
		"\x2\x2\x2\x102\x105\a\x38\x2\x2\x103\x105\a\x39\x2\x2\x104\x102\x3\x2"+
		"\x2\x2\x104\x103\x3\x2\x2\x2\x105\x15\x3\x2\x2\x2\x106\x109\a\x1C\x2\x2"+
		"\x107\x109\a\x1A\x2\x2\x108\x106\x3\x2\x2\x2\x108\x107\x3\x2\x2\x2\x109"+
		"\x17\x3\x2\x2\x2\x10A\x110\a\x1C\x2\x2\x10B\x110\a\x1B\x2\x2\x10C\x110"+
		"\a\x1A\x2\x2\x10D\x10E\a\x1A\x2\x2\x10E\x110\a\x1B\x2\x2\x10F\x10A\x3"+
		"\x2\x2\x2\x10F\x10B\x3\x2\x2\x2\x10F\x10C\x3\x2\x2\x2\x10F\x10D\x3\x2"+
		"\x2\x2\x110\x19\x3\x2\x2\x2\x111\x114\a.\x2\x2\x112\x114\a/\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x113\x112\x3\x2\x2\x2\x114\x1B\x3\x2\x2\x2\x115\x116"+
		"\a=\x2\x2\x116\x1D\x3\x2\x2\x2\x117\x118\a[\x2\x2\x118\x11D\x5 \x11\x2"+
		"\x119\x11A\aW\x2\x2\x11A\x11C\x5 \x11\x2\x11B\x119\x3\x2\x2\x2\x11C\x11F"+
		"\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x120\x3"+
		"\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120\x121\a\\\x2\x2\x121\x1F\x3\x2\x2"+
		"\x2\x122\x124\x5\x6\x4\x2\x123\x125\aj\x2\x2\x124\x123\x3\x2\x2\x2\x124"+
		"\x125\x3\x2\x2\x2\x125\x128\x3\x2\x2\x2\x126\x127\aR\x2\x2\x127\x129\x5"+
		"*\x16\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12C\x3\x2\x2"+
		"\x2\x12A\x12C\x5\x30\x19\x2\x12B\x122\x3\x2\x2\x2\x12B\x12A\x3\x2\x2\x2"+
		"\x12C!\x3\x2\x2\x2\x12D\x12F\a[\x2\x2\x12E\x130\x5\x30\x19\x2\x12F\x12E"+
		"\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x139\x5"+
		",\x17\x2\x132\x134\aW\x2\x2\x133\x135\x5\x30\x19\x2\x134\x133\x3\x2\x2"+
		"\x2\x134\x135\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x5,\x17\x2\x137"+
		"\x132\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x139\x13A"+
		"\x3\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13C\x13D\a\\"+
		"\x2\x2\x13D#\x3\x2\x2\x2\x13E\x149\x5\x6\x4\x2\x13F\x149\a\x41\x2\x2\x140"+
		"\x149\a\x42\x2\x2\x141\x149\a\x43\x2\x2\x142\x149\a\x44\x2\x2\x143\x149"+
		"\a\x45\x2\x2\x144\x149\a\x46\x2\x2\x145\x149\aG\x2\x2\x146\x149\aH\x2"+
		"\x2\x147\x149\aI\x2\x2\x148\x13E\x3\x2\x2\x2\x148\x13F\x3\x2\x2\x2\x148"+
		"\x140\x3\x2\x2\x2\x148\x141\x3\x2\x2\x2\x148\x142\x3\x2\x2\x2\x148\x143"+
		"\x3\x2\x2\x2\x148\x144\x3\x2\x2\x2\x148\x145\x3\x2\x2\x2\x148\x146\x3"+
		"\x2\x2\x2\x148\x147\x3\x2\x2\x2\x149%\x3\x2\x2\x2\x14A\x14F\x5$\x13\x2"+
		"\x14B\x14C\x5$\x13\x2\x14C\x14D\x5\"\x12\x2\x14D\x14F\x3\x2\x2\x2\x14E"+
		"\x14A\x3\x2\x2\x2\x14E\x14B\x3\x2\x2\x2\x14F\'\x3\x2\x2\x2\x150\x151\b"+
		"\x15\x1\x2\x151\x152\x5&\x14\x2\x152\x158\x3\x2\x2\x2\x153\x154\f\x3\x2"+
		"\x2\x154\x155\aS\x2\x2\x155\x157\x5&\x14\x2\x156\x153\x3\x2\x2\x2\x157"+
		"\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159)\x3"+
		"\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15C\b\x16\x1\x2\x15C\x171\x5(\x15"+
		"\x2\x15D\x15E\a]\x2\x2\x15E\x163\x5*\x16\x2\x15F\x160\aW\x2\x2\x160\x162"+
		"\x5*\x16\x2\x161\x15F\x3\x2\x2\x2\x162\x165\x3\x2\x2\x2\x163\x161\x3\x2"+
		"\x2\x2\x163\x164\x3\x2\x2\x2\x164\x166\x3\x2\x2\x2\x165\x163\x3\x2\x2"+
		"\x2\x166\x167\a^\x2\x2\x167\x16B\x3\x2\x2\x2\x168\x169\a]\x2\x2\x169\x16B"+
		"\a^\x2\x2\x16A\x15D\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16B\x171\x3\x2"+
		"\x2\x2\x16C\x16D\x5\x32\x1A\x2\x16D\x16E\aX\x2\x2\x16E\x16F\x5,\x17\x2"+
		"\x16F\x171\x3\x2\x2\x2\x170\x15B\x3\x2\x2\x2\x170\x16A\x3\x2\x2\x2\x170"+
		"\x16C\x3\x2\x2\x2\x171\x178\x3\x2\x2\x2\x172\x173\f\x6\x2\x2\x173\x177"+
		"\a\x65\x2\x2\x174\x175\f\x5\x2\x2\x175\x177\a\x61\x2\x2\x176\x172\x3\x2"+
		"\x2\x2\x176\x174\x3\x2\x2\x2\x177\x17A\x3\x2\x2\x2\x178\x176\x3\x2\x2"+
		"\x2\x178\x179\x3\x2\x2\x2\x179+\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17B"+
		"\x17D\x5\x30\x19\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E"+
		"\x3\x2\x2\x2\x17E\x18A\x5*\x16\x2\x17F\x181\x5\x30\x19\x2\x180\x17F\x3"+
		"\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\a;\x2"+
		"\x2\x183\x18A\x5*\x16\x2\x184\x185\a:\x2\x2\x185\x18A\x5*\x16\x2\x186"+
		"\x187\a:\x2\x2\x187\x188\a;\x2\x2\x188\x18A\x5*\x16\x2\x189\x17C\x3\x2"+
		"\x2\x2\x189\x180\x3\x2\x2\x2\x189\x184\x3\x2\x2\x2\x189\x186\x3\x2\x2"+
		"\x2\x18A-\x3\x2\x2\x2\x18B\x18E\x5,\x17\x2\x18C\x18E\aJ\x2\x2\x18D\x18B"+
		"\x3\x2\x2\x2\x18D\x18C\x3\x2\x2\x2\x18E/\x3\x2\x2\x2\x18F\x190\aV\x2\x2"+
		"\x190\x194\x5\x6\x4\x2\x191\x192\aV\x2\x2\x192\x194\a\x10\x2\x2\x193\x18F"+
		"\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194\x31\x3\x2\x2\x2\x195\x196\a_\x2"+
		"\x2\x196\x19B\x5\x34\x1B\x2\x197\x198\aW\x2\x2\x198\x19A\x5\x34\x1B\x2"+
		"\x199\x197\x3\x2\x2\x2\x19A\x19D\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19B"+
		"\x19C\x3\x2\x2\x2\x19C\x19E\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19E\x19F"+
		"\a`\x2\x2\x19F\x1A3\x3\x2\x2\x2\x1A0\x1A1\a_\x2\x2\x1A1\x1A3\a`\x2\x2"+
		"\x1A2\x195\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A3\x33\x3\x2\x2\x2\x1A4"+
		"\x1A6\x5\x42\"\x2\x1A5\x1A4\x3\x2\x2\x2\x1A6\x1A9\x3\x2\x2\x2\x1A7\x1A5"+
		"\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1AA\x3\x2\x2\x2\x1A9\x1A7\x3"+
		"\x2\x2\x2\x1AA\x1AB\x5,\x17\x2\x1AB\x35\x3\x2\x2\x2\x1AC\x1B0\aM\x2\x2"+
		"\x1AD\x1B0\aO\x2\x2\x1AE\x1B0\x5\x6\x4\x2\x1AF\x1AC\x3\x2\x2\x2\x1AF\x1AD"+
		"\x3\x2\x2\x2\x1AF\x1AE\x3\x2\x2\x2\x1B0\x37\x3\x2\x2\x2\x1B1\x1B2\a\x12"+
		"\x2\x2\x1B2\x1B3\x5 \x11\x2\x1B3\x1B4\aR\x2\x2\x1B4\x1B9\x5:\x1E\x2\x1B5"+
		"\x1B6\aW\x2\x2\x1B6\x1B8\x5:\x1E\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1BB\x3"+
		"\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1C2\x3\x2"+
		"\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x1BD\a\x12\x2\x2\x1BD\x1BE\x5 \x11\x2"+
		"\x1BE\x1BF\t\x3\x2\x2\x1BF\x1C0\aM\x2\x2\x1C0\x1C2\x3\x2\x2\x2\x1C1\x1B1"+
		"\x3\x2\x2\x2\x1C1\x1BC\x3\x2\x2\x2\x1C2\x39\x3\x2\x2\x2\x1C3\x1C4\a\xE"+
		"\x2\x2\x1C4\x1C5\a_\x2\x2\x1C5\x1C9\a`\x2\x2\x1C6\x1C9\x5*\x16\x2\x1C7"+
		"\x1C9\x5 \x11\x2\x1C8\x1C3\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C7"+
		"\x3\x2\x2\x2\x1C9;\x3\x2\x2\x2\x1CA\x1CC\x5\xE\b\x2\x1CB\x1CA\x3\x2\x2"+
		"\x2\x1CC\x1CF\x3\x2\x2\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2"+
		"\x1CE\x1D0\x3\x2\x2\x2\x1CF\x1CD\x3\x2\x2\x2\x1D0\x1D2\x5\x12\n\x2\x1D1"+
		"\x1D3\x5\x14\v\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D4"+
		"\x3\x2\x2\x2\x1D4\x1D6\a\xE\x2\x2\x1D5\x1D7\x5\x6\x4\x2\x1D6\x1D5\x3\x2"+
		"\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x1DB\x5> \x2\x1D9"+
		"\x1DA\aX\x2\x2\x1DA\x1DC\x5.\x18\x2\x1DB\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3"+
		"\x2\x2\x2\x1DC\x1DE\x3\x2\x2\x2\x1DD\x1DF\x5\x44#\x2\x1DE\x1DD\x3\x2\x2"+
		"\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E3\x3\x2\x2\x2\x1E0\x1E2\x5\f\a\x2\x1E1"+
		"\x1E0\x3\x2\x2\x2\x1E2\x1E5\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E3\x1E4"+
		"\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E6\x1E7\x5"+
		"H%\x2\x1E7\x2E3\x3\x2\x2\x2\x1E8\x1EA\x5\xE\b\x2\x1E9\x1E8\x3\x2\x2\x2"+
		"\x1EA\x1ED\x3\x2\x2\x2\x1EB\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC"+
		"\x1EE\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1EE\x1F0\x5\x12\n\x2\x1EF\x1F1"+
		"\x5\x14\v\x2\x1F0\x1EF\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3"+
		"\x2\x2\x2\x1F2\x1F3\a\xF\x2\x2\x1F3\x1F4\x5> \x2\x1F4\x1F5\x5H%\x2\x1F5"+
		"\x2E3\x3\x2\x2\x2\x1F6\x1F8\x5\xE\b\x2\x1F7\x1F6\x3\x2\x2\x2\x1F8\x1FB"+
		"\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FA\x1FC\x3"+
		"\x2\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FC\x1FE\x5\x12\n\x2\x1FD\x1FF\x5\x14"+
		"\v\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2"+
		"\x200\x201\x5\x1A\xE\x2\x201\x203\a\x30\x2\x2\x202\x204\x5\"\x12\x2\x203"+
		"\x202\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x206"+
		"\x5> \x2\x206\x207\aX\x2\x2\x207\x20B\x5.\x18\x2\x208\x20A\x5\x38\x1D"+
		"\x2\x209\x208\x3\x2\x2\x2\x20A\x20D\x3\x2\x2\x2\x20B\x209\x3\x2\x2\x2"+
		"\x20B\x20C\x3\x2\x2\x2\x20C\x211\x3\x2\x2\x2\x20D\x20B\x3\x2\x2\x2\x20E"+
		"\x210\x5\f\a\x2\x20F\x20E\x3\x2\x2\x2\x210\x213\x3\x2\x2\x2\x211\x20F"+
		"\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x214\x3\x2\x2\x2\x213\x211\x3"+
		"\x2\x2\x2\x214\x215\x5H%\x2\x215\x2E3\x3\x2\x2\x2\x216\x218\x5\xE\b\x2"+
		"\x217\x216\x3\x2\x2\x2\x218\x21B\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219"+
		"\x21A\x3\x2\x2\x2\x21A\x21C\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21C\x21D"+
		"\x5\x12\n\x2\x21D\x21E\t\x2\x2\x2\x21E\x221\x5\x6\x4\x2\x21F\x220\aR\x2"+
		"\x2\x220\x222\x5,\x17\x2\x221\x21F\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222"+
		"\x225\x3\x2\x2\x2\x223\x224\as\x2\x2\x224\x226\x5P)\x2\x225\x223\x3\x2"+
		"\x2\x2\x225\x226\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x228\aQ\x2\x2"+
		"\x228\x2E3\x3\x2\x2\x2\x229\x22B\x5\xE\b\x2\x22A\x229\x3\x2\x2\x2\x22B"+
		"\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22F"+
		"\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F\x231\x5\x12\n\x2\x230\x232\x5"+
		"\x18\r\x2\x231\x230\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x234\x3\x2"+
		"\x2\x2\x233\x235\x5\x14\v\x2\x234\x233\x3\x2\x2\x2\x234\x235\x3\x2\x2"+
		"\x2\x235\x237\x3\x2\x2\x2\x236\x238\x5\x1C\xF\x2\x237\x236\x3\x2\x2\x2"+
		"\x237\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23A\t\x4\x2\x2\x23A"+
		"\x23C\x5\x6\x4\x2\x23B\x23D\x5\"\x12\x2\x23C\x23B\x3\x2\x2\x2\x23C\x23D"+
		"\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x23F\x5> \x2\x23F\x240\aX\x2\x2"+
		"\x240\x244\x5.\x18\x2\x241\x243\x5\x38\x1D\x2\x242\x241\x3\x2\x2\x2\x243"+
		"\x246\x3\x2\x2\x2\x244\x242\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x24A"+
		"\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2\x247\x249\x5\f\a\x2\x248\x247\x3\x2"+
		"\x2\x2\x249\x24C\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24A\x24B\x3\x2\x2"+
		"\x2\x24B\x24D\x3\x2\x2\x2\x24C\x24A\x3\x2\x2\x2\x24D\x24E\x5H%\x2\x24E"+
		"\x2E3\x3\x2\x2\x2\x24F\x251\x5\xE\b\x2\x250\x24F\x3\x2\x2\x2\x251\x254"+
		"\x3\x2\x2\x2\x252\x250\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x255\x3"+
		"\x2\x2\x2\x254\x252\x3\x2\x2\x2\x255\x257\x5\x12\n\x2\x256\x258\x5\x18"+
		"\r\x2\x257\x256\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x25A\x3\x2\x2\x2"+
		"\x259\x25B\x5\x14\v\x2\x25A\x259\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B"+
		"\x25D\x3\x2\x2\x2\x25C\x25E\x5\x1C\xF\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E"+
		"\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\t\x4\x2\x2\x260\x261\a]\x2"+
		"\x2\x261\x263\a^\x2\x2\x262\x264\x5\"\x12\x2\x263\x262\x3\x2\x2\x2\x263"+
		"\x264\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\x5> \x2\x266\x267\a"+
		"X\x2\x2\x267\x26B\x5.\x18\x2\x268\x26A\x5\x38\x1D\x2\x269\x268\x3\x2\x2"+
		"\x2\x26A\x26D\x3\x2\x2\x2\x26B\x269\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2"+
		"\x26C\x271\x3\x2\x2\x2\x26D\x26B\x3\x2\x2\x2\x26E\x270\x5\f\a\x2\x26F"+
		"\x26E\x3\x2\x2\x2\x270\x273\x3\x2\x2\x2\x271\x26F\x3\x2\x2\x2\x271\x272"+
		"\x3\x2\x2\x2\x272\x274\x3\x2\x2\x2\x273\x271\x3\x2\x2\x2\x274\x275\x5"+
		"H%\x2\x275\x2E3\x3\x2\x2\x2\x276\x278\x5\xE\b\x2\x277\x276\x3\x2\x2\x2"+
		"\x278\x27B\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A"+
		"\x27C\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27C\x27E\x5\x12\n\x2\x27D\x27F"+
		"\x5\x18\r\x2\x27E\x27D\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x281\x3"+
		"\x2\x2\x2\x280\x282\x5\x14\v\x2\x281\x280\x3\x2\x2\x2\x281\x282\x3\x2"+
		"\x2\x2\x282\x284\x3\x2\x2\x2\x283\x285\x5\x1C\xF\x2\x284\x283\x3\x2\x2"+
		"\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x288\x5\x6\x4\x2"+
		"\x287\x289\x5\"\x12\x2\x288\x287\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289"+
		"\x28A\x3\x2\x2\x2\x28A\x28B\x5> \x2\x28B\x28C\aX\x2\x2\x28C\x290\x5.\x18"+
		"\x2\x28D\x28F\x5\x38\x1D\x2\x28E\x28D\x3\x2\x2\x2\x28F\x292\x3\x2\x2\x2"+
		"\x290\x28E\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x296\x3\x2\x2\x2\x292"+
		"\x290\x3\x2\x2\x2\x293\x295\x5\f\a\x2\x294\x293\x3\x2\x2\x2\x295\x298"+
		"\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x299\x3"+
		"\x2\x2\x2\x298\x296\x3\x2\x2\x2\x299\x29A\x5H%\x2\x29A\x2E3\x3\x2\x2\x2"+
		"\x29B\x29D\x5\xE\b\x2\x29C\x29B\x3\x2\x2\x2\x29D\x2A0\x3\x2\x2\x2\x29E"+
		"\x29C\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1\x3\x2\x2\x2\x2A0\x29E"+
		"\x3\x2\x2\x2\x2A1\x2A3\x5\x12\n\x2\x2A2\x2A4\x5\x18\r\x2\x2A3\x2A2\x3"+
		"\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A6\x3\x2\x2\x2\x2A5\x2A7\x5\x14"+
		"\v\x2\x2A6\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A9\x3\x2\x2\x2"+
		"\x2A8\x2AA\x5\x1C\xF\x2\x2A9\x2A8\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA"+
		"\x2AB\x3\x2\x2\x2\x2AB\x2AC\a\x14\x2\x2\x2AC\x2AD\x5J&\x2\x2AD\x2AE\x5"+
		"> \x2\x2AE\x2AF\aX\x2\x2\x2AF\x2B3\x5.\x18\x2\x2B0\x2B2\x5\x38\x1D\x2"+
		"\x2B1\x2B0\x3\x2\x2\x2\x2B2\x2B5\x3\x2\x2\x2\x2B3\x2B1\x3\x2\x2\x2\x2B3"+
		"\x2B4\x3\x2\x2\x2\x2B4\x2B9\x3\x2\x2\x2\x2B5\x2B3\x3\x2\x2\x2\x2B6\x2B8"+
		"\x5\f\a\x2\x2B7\x2B6\x3\x2\x2\x2\x2B8\x2BB\x3\x2\x2\x2\x2B9\x2B7\x3\x2"+
		"\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x2BC\x3\x2\x2\x2\x2BB\x2B9\x3\x2\x2"+
		"\x2\x2BC\x2BD\x5H%\x2\x2BD\x2E3\x3\x2\x2\x2\x2BE\x2C0\x5\xE\b\x2\x2BF"+
		"\x2BE\x3\x2\x2\x2\x2C0\x2C3\x3\x2\x2\x2\x2C1\x2BF\x3\x2\x2\x2\x2C1\x2C2"+
		"\x3\x2\x2\x2\x2C2\x2C4\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4\x2C6\x5"+
		"\x12\n\x2\x2C5\x2C7\x5\x14\v\x2\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7\x3\x2"+
		"\x2\x2\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2CA\x5\x16\f\x2\x2C9\x2C8\x3\x2\x2"+
		"\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CC\a\f\x2\x2\x2CC"+
		"\x2CE\x5\x6\x4\x2\x2CD\x2CF\x5\x1E\x10\x2\x2CE\x2CD\x3\x2\x2\x2\x2CE\x2CF"+
		"\x3\x2\x2\x2\x2CF\x2D1\x3\x2\x2\x2\x2D0\x2D2\x5\x10\t\x2\x2D1\x2D0\x3"+
		"\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2D6\x3\x2\x2\x2\x2D3\x2D5\x5\x38"+
		"\x1D\x2\x2D4\x2D3\x3\x2\x2\x2\x2D5\x2D8\x3\x2\x2\x2\x2D6\x2D4\x3\x2\x2"+
		"\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D9\x3\x2\x2\x2\x2D8\x2D6\x3\x2\x2\x2"+
		"\x2D9\x2DD\aY\x2\x2\x2DA\x2DC\x5<\x1F\x2\x2DB\x2DA\x3\x2\x2\x2\x2DC\x2DF"+
		"\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2E0\x3"+
		"\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E1\aZ\x2\x2\x2E1\x2E3\x3\x2\x2"+
		"\x2\x2E2\x1CD\x3\x2\x2\x2\x2E2\x1EB\x3\x2\x2\x2\x2E2\x1F9\x3\x2\x2\x2"+
		"\x2E2\x219\x3\x2\x2\x2\x2E2\x22C\x3\x2\x2\x2\x2E2\x252\x3\x2\x2\x2\x2E2"+
		"\x279\x3\x2\x2\x2\x2E2\x29E\x3\x2\x2\x2\x2E2\x2C1\x3\x2\x2\x2\x2E3=\x3"+
		"\x2\x2\x2\x2E4\x2E5\a_\x2\x2\x2E5\x2EA\x5@!\x2\x2E6\x2E7\aW\x2\x2\x2E7"+
		"\x2E9\x5@!\x2\x2E8\x2E6\x3\x2\x2\x2\x2E9\x2EC\x3\x2\x2\x2\x2EA\x2E8\x3"+
		"\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2ED\x3\x2\x2\x2\x2EC\x2EA\x3\x2"+
		"\x2\x2\x2ED\x2EE\a`\x2\x2\x2EE\x2F2\x3\x2\x2\x2\x2EF\x2F0\a_\x2\x2\x2F0"+
		"\x2F2\a`\x2\x2\x2F1\x2E4\x3\x2\x2\x2\x2F1\x2EF\x3\x2\x2\x2\x2F2?\x3\x2"+
		"\x2\x2\x2F3\x2F5\a\x16\x2\x2\x2F4\x2F3\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2"+
		"\x2\x2F5\x2F9\x3\x2\x2\x2\x2F6\x2F8\x5\x42\"\x2\x2F7\x2F6\x3\x2\x2\x2"+
		"\x2F8\x2FB\x3\x2\x2\x2\x2F9\x2F7\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA"+
		"\x2FD\x3\x2\x2\x2\x2FB\x2F9\x3\x2\x2\x2\x2FC\x2FE\x5\x6\x4\x2\x2FD\x2FC"+
		"\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x300\aR"+
		"\x2\x2\x300\x309\x5,\x17\x2\x301\x303\a:\x2\x2\x302\x301\x3\x2\x2\x2\x302"+
		"\x303\x3\x2\x2\x2\x303\x305\x3\x2\x2\x2\x304\x306\a;\x2\x2\x305\x304\x3"+
		"\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307\x309\a\x10"+
		"\x2\x2\x308\x2F4\x3\x2\x2\x2\x308\x302\x3\x2\x2\x2\x309\x41\x3\x2\x2\x2"+
		"\x30A\x30B\a\x1D\x2\x2\x30B\x43\x3\x2\x2\x2\x30C\x30D\aR\x2\x2\x30D\x30E"+
		"\a\x13\x2\x2\x30E\x30F\a_\x2\x2\x30F\x310\x5\x46$\x2\x310\x311\a`\x2\x2"+
		"\x311\x319\x3\x2\x2\x2\x312\x313\aR\x2\x2\x313\x314\a\x10\x2\x2\x314\x315"+
		"\a_\x2\x2\x315\x316\x5\x46$\x2\x316\x317\a`\x2\x2\x317\x319\x3\x2\x2\x2"+
		"\x318\x30C\x3\x2\x2\x2\x318\x312\x3\x2\x2\x2\x319\x45\x3\x2\x2\x2\x31A"+
		"\x31F\x5P)\x2\x31B\x31C\aW\x2\x2\x31C\x31E\x5P)\x2\x31D\x31B\x3\x2\x2"+
		"\x2\x31E\x321\x3\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2"+
		"\x320\x324\x3\x2\x2\x2\x321\x31F\x3\x2\x2\x2\x322\x324\x3\x2\x2\x2\x323"+
		"\x31A\x3\x2\x2\x2\x323\x322\x3\x2\x2\x2\x324G\x3\x2\x2\x2\x325\x329\a"+
		"Y\x2\x2\x326\x328\x5L\'\x2\x327\x326\x3\x2\x2\x2\x328\x32B\x3\x2\x2\x2"+
		"\x329\x327\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x32C\x3\x2\x2\x2\x32B"+
		"\x329\x3\x2\x2\x2\x32C\x32F\aZ\x2\x2\x32D\x32F\aQ\x2\x2\x32E\x325\x3\x2"+
		"\x2\x2\x32E\x32D\x3\x2\x2\x2\x32FI\x3\x2\x2\x2\x330\x33D\a\x61\x2\x2\x331"+
		"\x33D\a\x63\x2\x2\x332\x33D\aq\x2\x2\x333\x33D\ao\x2\x2\x334\x33D\ap\x2"+
		"\x2\x335\x33D\a\x65\x2\x2\x336\x33D\a\x64\x2\x2\x337\x33D\aS\x2\x2\x338"+
		"\x339\a]\x2\x2\x339\x33D\a^\x2\x2\x33A\x33B\an\x2\x2\x33B\x33D\an\x2\x2"+
		"\x33C\x330\x3\x2\x2\x2\x33C\x331\x3\x2\x2\x2\x33C\x332\x3\x2\x2\x2\x33C"+
		"\x333\x3\x2\x2\x2\x33C\x334\x3\x2\x2\x2\x33C\x335\x3\x2\x2\x2\x33C\x336"+
		"\x3\x2\x2\x2\x33C\x337\x3\x2\x2\x2\x33C\x338\x3\x2\x2\x2\x33C\x33A\x3"+
		"\x2\x2\x2\x33DK\x3\x2\x2\x2\x33E\x33F\x5N(\x2\x33F\x340\aQ\x2\x2\x340"+
		"\x389\x3\x2\x2\x2\x341\x342\a\x39\x2\x2\x342\x346\aY\x2\x2\x343\x345\x5"+
		"L\'\x2\x344\x343\x3\x2\x2\x2\x345\x348\x3\x2\x2\x2\x346\x344\x3\x2\x2"+
		"\x2\x346\x347\x3\x2\x2\x2\x347\x349\x3\x2\x2\x2\x348\x346\x3\x2\x2\x2"+
		"\x349\x389\aZ\x2\x2\x34A\x34E\aY\x2\x2\x34B\x34D\x5L\'\x2\x34C\x34B\x3"+
		"\x2\x2\x2\x34D\x350\x3\x2\x2\x2\x34E\x34C\x3\x2\x2\x2\x34E\x34F\x3\x2"+
		"\x2\x2\x34F\x351\x3\x2\x2\x2\x350\x34E\x3\x2\x2\x2\x351\x389\aZ\x2\x2"+
		"\x352\x389\aQ\x2\x2\x353\x354\x5P)\x2\x354\x355\aQ\x2\x2\x355\x389\x3"+
		"\x2\x2\x2\x356\x358\a\'\x2\x2\x357\x359\x5P)\x2\x358\x357\x3\x2\x2\x2"+
		"\x358\x359\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\x389\aQ\x2\x2\x35B\x35C"+
		"\a-\x2\x2\x35C\x35D\x5P)\x2\x35D\x35E\aQ\x2\x2\x35E\x389\x3\x2\x2\x2\x35F"+
		"\x360\a \x2\x2\x360\x361\a_\x2\x2\x361\x362\x5P)\x2\x362\x363\a`\x2\x2"+
		"\x363\x366\x5L\'\x2\x364\x365\a!\x2\x2\x365\x367\x5L\'\x2\x366\x364\x3"+
		"\x2\x2\x2\x366\x367\x3\x2\x2\x2\x367\x389\x3\x2\x2\x2\x368\x369\a \x2"+
		"\x2\x369\x36A\a_\x2\x2\x36A\x36B\x5N(\x2\x36B\x36C\a`\x2\x2\x36C\x36F"+
		"\x5L\'\x2\x36D\x36E\a!\x2\x2\x36E\x370\x5L\'\x2\x36F\x36D\x3\x2\x2\x2"+
		"\x36F\x370\x3\x2\x2\x2\x370\x389\x3\x2\x2\x2\x371\x372\a\"\x2\x2\x372"+
		"\x375\a_\x2\x2\x373\x376\x5N(\x2\x374\x376\a{\x2\x2\x375\x373\x3\x2\x2"+
		"\x2\x375\x374\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377\x378\a#\x2\x2\x378"+
		"\x379\x5P)\x2\x379\x37A\a`\x2\x2\x37A\x37B\x5L\'\x2\x37B\x389\x3\x2\x2"+
		"\x2\x37C\x37D\a\x1F\x2\x2\x37D\x37E\a_\x2\x2\x37E\x37F\x5P)\x2\x37F\x380"+
		"\a`\x2\x2\x380\x381\x5L\'\x2\x381\x389\x3\x2\x2\x2\x382\x383\a\xF\x2\x2"+
		"\x383\x384\x5P)\x2\x384\x385\aQ\x2\x2\x385\x389\x3\x2\x2\x2\x386\x387"+
		"\a&\x2\x2\x387\x389\aQ\x2\x2\x388\x33E\x3\x2\x2\x2\x388\x341\x3\x2\x2"+
		"\x2\x388\x34A\x3\x2\x2\x2\x388\x352\x3\x2\x2\x2\x388\x353\x3\x2\x2\x2"+
		"\x388\x356\x3\x2\x2\x2\x388\x35B\x3\x2\x2\x2\x388\x35F\x3\x2\x2\x2\x388"+
		"\x368\x3\x2\x2\x2\x388\x371\x3\x2\x2\x2\x388\x37C\x3\x2\x2\x2\x388\x382"+
		"\x3\x2\x2\x2\x388\x386\x3\x2\x2\x2\x389M\x3\x2\x2\x2\x38A\x38B\t\x2\x2"+
		"\x2\x38B\x38D\x5\x6\x4\x2\x38C\x38E\a\x65\x2\x2\x38D\x38C\x3\x2\x2\x2"+
		"\x38D\x38E\x3\x2\x2\x2\x38E\x38F\x3\x2\x2\x2\x38F\x390\aR\x2\x2\x390\x393"+
		"\x5,\x17\x2\x391\x392\as\x2\x2\x392\x394\x5P)\x2\x393\x391\x3\x2\x2\x2"+
		"\x393\x394\x3\x2\x2\x2\x394\x3A7\x3\x2\x2\x2\x395\x396\t\x2\x2\x2\x396"+
		"\x397\a]\x2\x2\x397\x39C\x5\x6\x4\x2\x398\x399\aW\x2\x2\x399\x39B\x5\x6"+
		"\x4\x2\x39A\x398\x3\x2\x2\x2\x39B\x39E\x3\x2\x2\x2\x39C\x39A\x3\x2\x2"+
		"\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39F\x3\x2\x2\x2\x39E\x39C\x3\x2\x2\x2"+
		"\x39F\x3A0\a^\x2\x2\x3A0\x3A1\aR\x2\x2\x3A1\x3A4\x5,\x17\x2\x3A2\x3A3"+
		"\as\x2\x2\x3A3\x3A5\x5P)\x2\x3A4\x3A2\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2"+
		"\x3A5\x3A7\x3\x2\x2\x2\x3A6\x38A\x3\x2\x2\x2\x3A6\x395\x3\x2\x2\x2\x3A7"+
		"O\x3\x2\x2\x2\x3A8\x3A9\b)\x1\x2\x3A9\x3AA\t\x5\x2\x2\x3AA\x3E4\x5P)\x1B"+
		"\x3AB\x3AC\t\x6\x2\x2\x3AC\x3E4\x5P)\xE\x3AD\x3AE\a_\x2\x2\x3AE\x3AF\x5"+
		"P)\x2\x3AF\x3B0\a`\x2\x2\x3B0\x3E4\x3\x2\x2\x2\x3B1\x3B2\an\x2\x2\x3B2"+
		"\x3B3\x5P)\x2\x3B3\x3B4\an\x2\x2\x3B4\x3E4\x3\x2\x2\x2\x3B5\x3B6\a\xE"+
		"\x2\x2\x3B6\x3B7\x5(\x15\x2\x3B7\x3B8\a_\x2\x2\x3B8\x3B9\x5\x46$\x2\x3B9"+
		"\x3BA\a`\x2\x2\x3BA\x3E4\x3\x2\x2\x2\x3BB\x3BD\a\xE\x2\x2\x3BC\x3BE\x5"+
		"\x10\t\x2\x3BD\x3BC\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE\x3BF\x3\x2"+
		"\x2\x2\x3BF\x3C0\a_\x2\x2\x3C0\x3C1\x5\x46$\x2\x3C1\x3C2\a`\x2\x2\x3C2"+
		"\x3C6\aY\x2\x2\x3C3\x3C5\x5<\x1F\x2\x3C4\x3C3\x3\x2\x2\x2\x3C5\x3C8\x3"+
		"\x2\x2\x2\x3C6\x3C4\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7\x3C9\x3\x2"+
		"\x2\x2\x3C8\x3C6\x3\x2\x2\x2\x3C9\x3CA\aZ\x2\x2\x3CA\x3E4\x3\x2\x2\x2"+
		"\x3CB\x3CE\x5\x6\x4\x2\x3CC\x3CE\x5> \x2\x3CD\x3CB\x3\x2\x2\x2\x3CD\x3CC"+
		"\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D9\aX\x2\x2\x3D0\x3DA\x5P)\x2"+
		"\x3D1\x3D5\aY\x2\x2\x3D2\x3D4\x5L\'\x2\x3D3\x3D2\x3\x2\x2\x2\x3D4\x3D7"+
		"\x3\x2\x2\x2\x3D5\x3D3\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D8\x3"+
		"\x2\x2\x2\x3D7\x3D5\x3\x2\x2\x2\x3D8\x3DA\aZ\x2\x2\x3D9\x3D0\x3\x2\x2"+
		"\x2\x3D9\x3D1\x3\x2\x2\x2\x3DA\x3E4\x3\x2\x2\x2\x3DB\x3E4\x5&\x14\x2\x3DC"+
		"\x3E4\aN\x2\x2\x3DD\x3E4\a\x10\x2\x2\x3DE\x3E4\aL\x2\x2\x3DF\x3E4\aM\x2"+
		"\x2\x3E0\x3E4\a\x11\x2\x2\x3E1\x3E4\aO\x2\x2\x3E2\x3E4\aP\x2\x2\x3E3\x3A8"+
		"\x3\x2\x2\x2\x3E3\x3AB\x3\x2\x2\x2\x3E3\x3AD\x3\x2\x2\x2\x3E3\x3B1\x3"+
		"\x2\x2\x2\x3E3\x3B5\x3\x2\x2\x2\x3E3\x3BB\x3\x2\x2\x2\x3E3\x3CD\x3\x2"+
		"\x2\x2\x3E3\x3DB\x3\x2\x2\x2\x3E3\x3DC\x3\x2\x2\x2\x3E3\x3DD\x3\x2\x2"+
		"\x2\x3E3\x3DE\x3\x2\x2\x2\x3E3\x3DF\x3\x2\x2\x2\x3E3\x3E0\x3\x2\x2\x2"+
		"\x3E3\x3E1\x3\x2\x2\x2\x3E3\x3E2\x3\x2\x2\x2\x3E4\x420\x3\x2\x2\x2\x3E5"+
		"\x3E6\f\x1F\x2\x2\x3E6\x3E7\aT\x2\x2\x3E7\x41F\x5P) \x3E8\x3E9\f\x1A\x2"+
		"\x2\x3E9\x3EA\t\a\x2\x2\x3EA\x41F\x5P)\x1B\x3EB\x3EC\f\x19\x2\x2\x3EC"+
		"\x3ED\t\b\x2\x2\x3ED\x41F\x5P)\x1A\x3EE\x3EF\f\x18\x2\x2\x3EF\x3F0\t\x3"+
		"\x2\x2\x3F0\x41F\x5P)\x19\x3F1\x3F2\f\x17\x2\x2\x3F2\x3F3\t\t\x2\x2\x3F3"+
		"\x41F\x5P)\x18\x3F4\x3F5\f\x16\x2\x2\x3F5\x3F6\ao\x2\x2\x3F6\x41F\x5P"+
		")\x17\x3F7\x3F8\f\x15\x2\x2\x3F8\x3F9\ap\x2\x2\x3F9\x41F\x5P)\x16\x3FA"+
		"\x3FB\f\x14\x2\x2\x3FB\x3FC\aq\x2\x2\x3FC\x41F\x5P)\x15\x3FD\x3FE\f\x13"+
		"\x2\x2\x3FE\x3FF\a\x64\x2\x2\x3FF\x41F\x5P)\x14\x400\x401\f\x12\x2\x2"+
		"\x401\x402\a#\x2\x2\x402\x41F\x5P)\x13\x403\x404\f\r\x2\x2\x404\x405\a"+
		"\x65\x2\x2\x405\x406\x5P)\x2\x406\x407\aR\x2\x2\x407\x408\x5P)\r\x408"+
		"\x41F\x3\x2\x2\x2\x409\x40A\f\f\x2\x2\x40A\x40B\t\n\x2\x2\x40B\x41F\x5"+
		"P)\f\x40C\x40D\f \x2\x2\x40D\x40E\aS\x2\x2\x40E\x41F\x5\x6\x4\x2\x40F"+
		"\x410\f\x1E\x2\x2\x410\x411\a_\x2\x2\x411\x412\x5\x46$\x2\x412\x413\a"+
		"`\x2\x2\x413\x41F\x3\x2\x2\x2\x414\x415\f\x1D\x2\x2\x415\x416\a]\x2\x2"+
		"\x416\x417\x5\x46$\x2\x417\x418\a^\x2\x2\x418\x41F\x3\x2\x2\x2\x419\x41A"+
		"\f\x1C\x2\x2\x41A\x41F\a\x65\x2\x2\x41B\x41C\f\xF\x2\x2\x41C\x41D\t\v"+
		"\x2\x2\x41D\x41F\x5*\x16\x2\x41E\x3E5\x3\x2\x2\x2\x41E\x3E8\x3\x2\x2\x2"+
		"\x41E\x3EB\x3\x2\x2\x2\x41E\x3EE\x3\x2\x2\x2\x41E\x3F1\x3\x2\x2\x2\x41E"+
		"\x3F4\x3\x2\x2\x2\x41E\x3F7\x3\x2\x2\x2\x41E\x3FA\x3\x2\x2\x2\x41E\x3FD"+
		"\x3\x2\x2\x2\x41E\x400\x3\x2\x2\x2\x41E\x403\x3\x2\x2\x2\x41E\x409\x3"+
		"\x2\x2\x2\x41E\x40C\x3\x2\x2\x2\x41E\x40F\x3\x2\x2\x2\x41E\x414\x3\x2"+
		"\x2\x2\x41E\x419\x3\x2\x2\x2\x41E\x41B\x3\x2\x2\x2\x41F\x422\x3\x2\x2"+
		"\x2\x420\x41E\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421Q\x3\x2\x2\x2\x422"+
		"\x420\x3\x2\x2\x2\x93U[\x66mv|\x84\x89\x8C\x91\x94\x99\xA0\xA8\xB0\xB4"+
		"\xBB\xC0\xC4\xCC\xD2\xDC\xE0\xE6\xEB\xEF\xF7\xFA\x100\x104\x108\x10F\x113"+
		"\x11D\x124\x128\x12B\x12F\x134\x139\x148\x14E\x158\x163\x16A\x170\x176"+
		"\x178\x17C\x180\x189\x18D\x193\x19B\x1A2\x1A7\x1AF\x1B9\x1C1\x1C8\x1CD"+
		"\x1D2\x1D6\x1DB\x1DE\x1E3\x1EB\x1F0\x1F9\x1FE\x203\x20B\x211\x219\x221"+
		"\x225\x22C\x231\x234\x237\x23C\x244\x24A\x252\x257\x25A\x25D\x263\x26B"+
		"\x271\x279\x27E\x281\x284\x288\x290\x296\x29E\x2A3\x2A6\x2A9\x2B3\x2B9"+
		"\x2C1\x2C6\x2C9\x2CE\x2D1\x2D6\x2DD\x2E2\x2EA\x2F1\x2F4\x2F9\x2FD\x302"+
		"\x305\x308\x318\x31F\x323\x329\x32E\x33C\x346\x34E\x358\x366\x36F\x375"+
		"\x388\x38D\x393\x39C\x3A4\x3A6\x3BD\x3C6\x3CD\x3D5\x3D9\x3E3\x41E\x420";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Parser
