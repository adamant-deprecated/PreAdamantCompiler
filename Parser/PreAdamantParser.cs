//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Enum=11, New=12, Delete=13, Self=14, Uninitialized=15, Where=16, 
		Base=17, Operator=18, Var=19, Let=20, Get=21, Set=22, Sealed=23, Override=24, 
		Abstract=25, Params=26, Extern=27, Do=28, While=29, If=30, Else=31, For=32, 
		In=33, Switch=34, Break=35, Continue=36, Return=37, Try=38, TryPanic=39, 
		TryResult=40, Catch=41, Finally=42, Throw=43, Implicit=44, Explicit=45, 
		Conversion=46, As=47, AsPanic=48, AsResult=49, Public=50, Private=51, 
		Protected=52, Internal=53, Safe=54, Unsafe=55, Own=56, Mutable=57, Immutable=58, 
		Async=59, Await=60, Requires=61, Ensures=62, Void=63, String=64, ByteType=65, 
		IntType=66, UIntType=67, FloatType=68, FixedType=69, DecimalType=70, SizeType=71, 
		OffsetType=72, UnsafeArrayType=73, ReservedWord=74, BooleanLiteral=75, 
		IntLiteral=76, NullLiteral=77, StringLiteral=78, CharLiteral=79, Semicolon=80, 
		Colon=81, Dot=82, DotDot=83, ColonColon=84, Tilde=85, Comma=86, Lambda=87, 
		LeftBrace=88, RightBrace=89, LeftAngle=90, RightAngle=91, LeftBracket=92, 
		RightBracket=93, LeftParen=94, RightParen=95, Asterisk=96, AtSign=97, 
		AddressOf=98, Coalesce=99, IsNull=100, Equal=101, NotEqual=102, LessThanOrEqual=103, 
		GreaterThanOrEqual=104, TypeList=105, Plus=106, Minus=107, Divide=108, 
		Pipe=109, And=110, Xor=111, Or=112, Not=113, Assign=114, AddAssign=115, 
		SubtractAssign=116, MultiplyAssign=117, DivideAssign=118, AndAssign=119, 
		XorAssign=120, OrAssign=121, PlaceHolder=122, Identifier=123, EscapedIdentifier=124, 
		Unknown=125;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_contract = 5, RULE_attribute = 6, 
		RULE_baseTypes = 7, RULE_modifier = 8, RULE_typeParameters = 9, RULE_typeParameter = 10, 
		RULE_typeArguments = 11, RULE_identifierOrPredefinedType = 12, RULE_simpleName = 13, 
		RULE_name = 14, RULE_valueType = 15, RULE_referenceType = 16, RULE_lifetime = 17, 
		RULE_funcTypeParameterList = 18, RULE_funcTypeParameter = 19, RULE_constExpression = 20, 
		RULE_typeParameterConstraintClause = 21, RULE_typeParameterConstraint = 22, 
		RULE_member = 23, RULE_parameterList = 24, RULE_parameter = 25, RULE_parameterModifier = 26, 
		RULE_constructorInitializer = 27, RULE_argumentList = 28, RULE_methodBody = 29, 
		RULE_overloadableOperator = 30, RULE_statement = 31, RULE_localVariableDeclaration = 32, 
		RULE_expression = 33;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"contract", "attribute", "baseTypes", "modifier", "typeParameters", "typeParameter", 
		"typeArguments", "identifierOrPredefinedType", "simpleName", "name", "valueType", 
		"referenceType", "lifetime", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "typeParameterConstraintClause", "typeParameterConstraint", 
		"member", "parameterList", "parameter", "parameterModifier", "constructorInitializer", 
		"argumentList", "methodBody", "overloadableOperator", "statement", "localVariableDeclaration", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'self'", "'uninitialized'", 
		"'where'", "'base'", "'operator'", "'var'", "'let'", "'get'", "'set'", 
		"'sealed'", "'override'", "'abstract'", "'params'", "'extern'", "'do'", 
		"'while'", "'if'", "'else'", "'for'", "'in'", "'switch'", "'break'", "'continue'", 
		"'return'", "'try'", "'try!'", "'try?'", "'catch'", "'finally'", "'throw'", 
		"'implicit'", "'explicit'", "'conversion'", "'as'", "'as!'", "'as?'", 
		"'public'", "'private'", "'protected'", "'internal'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", "'immut'", "'async'", "'await'", "'requires'", "'ensures'", 
		"'void'", "'string'", "'byte'", null, null, null, null, null, "'size'", 
		"'offset'", "'UnsafeArray'", null, null, null, "'null'", null, null, "';'", 
		"':'", "'.'", "'..'", "'::'", "'~'", "','", "'->'", "'{'", "'}'", "'<'", 
		"'>'", "'['", "']'", "'('", "')'", "'*'", "'@'", "'&'", "'??'", "'?'", 
		"'=='", "'<>'", "'<='", "'>='", "'...'", "'+'", "'-'", "'/'", "'|'", "'and'", 
		"'xor'", "'or'", "'not'", "'='", "'+='", "'-='", "'*='", "'/='", "'and='", 
		"'xor='", "'or='", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Enum", "New", "Delete", "Self", "Uninitialized", "Where", "Base", 
		"Operator", "Var", "Let", "Get", "Set", "Sealed", "Override", "Abstract", 
		"Params", "Extern", "Do", "While", "If", "Else", "For", "In", "Switch", 
		"Break", "Continue", "Return", "Try", "TryPanic", "TryResult", "Catch", 
		"Finally", "Throw", "Implicit", "Explicit", "Conversion", "As", "AsPanic", 
		"AsResult", "Public", "Private", "Protected", "Internal", "Safe", "Unsafe", 
		"Own", "Mutable", "Immutable", "Async", "Await", "Requires", "Ensures", 
		"Void", "String", "ByteType", "IntType", "UIntType", "FloatType", "FixedType", 
		"DecimalType", "SizeType", "OffsetType", "UnsafeArrayType", "ReservedWord", 
		"BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", "CharLiteral", 
		"Semicolon", "Colon", "Dot", "DotDot", "ColonColon", "Tilde", "Comma", 
		"Lambda", "LeftBrace", "RightBrace", "LeftAngle", "RightAngle", "LeftBracket", 
		"RightBracket", "LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", 
		"Coalesce", "IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "Pipe", "And", "Xor", "Or", "Not", 
		"Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", 
		"AndAssign", "XorAssign", "OrAssign", "PlaceHolder", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 68; usingDirective();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 74; declaration();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 80; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(Using);
			State = 83; namespaceName();
			State = 84; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 88;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 91; Match(Dot);
				State = 92; _localctx._identifier = identifier();
				_localctx._identifiers.Add(_localctx._identifier);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 207;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; Match(Namespace);
				State = 99; namespaceName();
				State = 100; Match(LeftBrace);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 101; usingDirective();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 107; declaration();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 113; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 115; attribute();
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 121; modifier();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 127; Match(Class);
				State = 128; identifier();
				State = 130;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 129; typeParameters();
					}
				}

				State = 133;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 132; baseTypes();
					}
				}

				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 135; typeParameterConstraintClause();
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 141; Match(LeftBrace);
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 142; member();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 148; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 150; attribute();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 156; modifier();
					}
					}
					State = 161;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 162;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 163; identifier();
				State = 166;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 164; Match(Colon);
					State = 165; referenceType();
					}
				}

				State = 170;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 168; Match(Assign);
					State = 169; expression(0);
					}
				}

				State = 172; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 174; attribute();
						}
						} 
					}
					State = 179;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 180; modifier();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 186; identifier();
				State = 188;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 187; typeArguments();
					}
				}

				State = 190; parameterList();
				State = 191; Match(Lambda);
				State = 192; ((FunctionDeclarationContext)_localctx).returnType = referenceType();
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 193; typeParameterConstraintClause();
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 199; contract();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 205; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 10, RULE_contract);
		try {
			State = 213;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; Match(Requires);
				State = 210; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(Ensures);
				State = 212; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(EscapedIdentifier);
			State = 218;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 216; Match(LeftParen);
				State = 217; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 220; Match(Colon);
			State = 222;
			_la = TokenStream.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (Void - 63)) | (1L << (String - 63)) | (1L << (ByteType - 63)) | (1L << (IntType - 63)) | (1L << (UIntType - 63)) | (1L << (FloatType - 63)) | (1L << (SizeType - 63)) | (1L << (OffsetType - 63)) | (1L << (UnsafeArrayType - 63)) | (1L << (Identifier - 63)) | (1L << (EscapedIdentifier - 63)))) != 0)) {
				{
				State = 221; _localctx.baseType = name(0);
				}
			}

			State = 233;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 224; Match(Colon);
				State = 225; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 226; Match(Comma);
					State = 227; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken token;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_modifier);
		try {
			State = 248;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; _localctx.token = Match(Protected);
				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; _localctx.token = Match(Internal);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240; _localctx.token = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241; _localctx.token = Match(Abstract);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 8);
				{
				State = 242; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243; _localctx.token = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 10);
				{
				State = 244; _localctx.token = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 11);
				{
				State = 245; _localctx.token = Match(Override);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 12);
				{
				State = 246; _localctx.token = Match(Async);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 13);
				{
				State = 247; _localctx.token = Match(Extern);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(LeftAngle);
			State = 251; typeParameter();
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 252; Match(Comma);
				State = 253; typeParameter();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 259; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public ValueTypeContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeParameter);
		int _la;
		try {
			State = 270;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261; identifier();
				State = 263;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 262; _localctx.isList = Match(TypeList);
					}
				}

				State = 267;
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 265; Match(Colon);
					State = 266; _localctx.baseType = valueType(0);
					}
					break;
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ReferenceTypeContext[] referenceType() {
			return GetRuleContexts<ReferenceTypeContext>();
		}
		public ReferenceTypeContext referenceType(int i) {
			return GetRuleContext<ReferenceTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(LeftAngle);
			State = 273; referenceType();
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 274; Match(Comma);
				State = 275; referenceType();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 281; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifierOrPredefinedType);
		try {
			State = 293;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; identifier();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; _localctx.token = Match(Void);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 288; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 289; _localctx.token = Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 290; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 291; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 10);
				{
				State = 292; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleName);
		try {
			State = 299;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 295; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 296; identifierOrPredefinedType();
				State = 297; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleNameNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public SimpleNameNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleNameNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 302; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 304;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 305; Match(Dot);
					State = 306; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : ValueTypeContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : ValueTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public FunctionTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : ValueTypeContext {
		public ValueTypeContext _valueType;
		public IList<ValueTypeContext> _types = new List<ValueTypeContext>();
		public ValueTypeContext[] valueType() {
			return GetRuleContexts<ValueTypeContext>();
		}
		public ValueTypeContext valueType(int i) {
			return GetRuleContext<ValueTypeContext>(i);
		}
		public TupleTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MaybeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public PointerTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueTypeContext _localctx = new ValueTypeContext(Context, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			switch (TokenStream.La(1)) {
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 313; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 327;
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 314; Match(LeftBracket);
					State = 315; ((TupleTypeContext)_localctx)._valueType = valueType(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 316; Match(Comma);
						State = 317; ((TupleTypeContext)_localctx)._valueType = valueType(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
						}
						}
						State = 322;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 323; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 325; Match(LeftBracket);
					State = 326; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 329; funcTypeParameterList();
				State = 330; Match(Lambda);
				State = 331; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 339;
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new MaybeTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 335;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 336; Match(IsNull);
						}
						break;
					case 2:
						{
						_localctx = new PointerTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 337;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 338; Match(Asterisk);
						}
						break;
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	 
		public ReferenceTypeContext() { }
		public virtual void CopyFrom(ReferenceTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OwnedImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public ImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public MutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedMutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedMutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_referenceType);
		int _la;
		try {
			State = 358;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 344; lifetime();
					}
				}

				State = 347; valueType(0);
				}
				break;
			case 2:
				_localctx = new MutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 348; lifetime();
					}
				}

				State = 351; Match(Mutable);
				State = 352; valueType(0);
				}
				break;
			case 3:
				_localctx = new OwnedImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 353; Match(Own);
				State = 354; valueType(0);
				}
				break;
			case 4:
				_localctx = new OwnedMutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 355; Match(Own);
				State = 356; Match(Mutable);
				State = 357; valueType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 34, RULE_lifetime);
		try {
			State = 364;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; Match(Tilde);
				State = 361; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; Match(Tilde);
				State = 363; Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 379;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366; Match(LeftParen);
				State = 367; funcTypeParameter();
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 368; Match(Comma);
					State = 369; funcTypeParameter();
					}
					}
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 375; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377; Match(LeftParen);
				State = 378; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 381; parameterModifier();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 387; referenceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_constExpression);
		try {
			State = 392;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 410;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394; Match(Where);
				State = 395; typeParameter();
				State = 396; Match(Colon);
				State = 397; typeParameterConstraint();
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 398; Match(Comma);
					State = 399; typeParameterConstraint();
					}
					}
					State = 404;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; Match(Where);
				State = 406; typeParameter();
				State = 407;
				_la = TokenStream.La(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (LeftAngle - 90)) | (1L << (RightAngle - 90)) | (1L << (LessThanOrEqual - 90)) | (1L << (GreaterThanOrEqual - 90)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 408; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeParameterConstraint);
		try {
			State = 417;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 412; Match(New);
				State = 413; Match(LeftParen);
				State = 414; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 415; valueType(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 416; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public ReferenceTypeContext returnType;
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ReferenceTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 46, RULE_member);
		int _la;
		try {
			int _alt;
			State = 692;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 419; attribute();
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 425; modifier();
					}
					}
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 431; Match(New);
				State = 433;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 432; identifier();
					}
				}

				State = 435; parameterList();
				State = 438;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 436; Match(Lambda);
					State = 437; ((ConstructorContext)_localctx).returnType = referenceType();
					}
				}

				State = 441;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 440; constructorInitializer();
					}
				}

				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 443; contract();
					}
					}
					State = 448;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 449; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 451; attribute();
					}
					}
					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 457; modifier();
					}
					}
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 463; Match(Delete);
				State = 464; parameterList();
				State = 465; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 467; attribute();
					}
					}
					State = 472;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 473; modifier();
					}
					}
					State = 478;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 479; Match(Conversion);
				State = 481;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 480; typeArguments();
					}
				}

				State = 483; parameterList();
				State = 484; Match(Lambda);
				State = 485; referenceType();
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 486; typeParameterConstraintClause();
					}
					}
					State = 491;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 492; contract();
					}
					}
					State = 497;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 498; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 500; attribute();
					}
					}
					State = 505;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 506; modifier();
					}
					}
					State = 511;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 512;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 513; identifier();
				State = 516;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 514; Match(Colon);
					State = 515; referenceType();
					}
				}

				State = 520;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 518; Match(Assign);
					State = 519; expression(0);
					}
				}

				State = 522; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 524; attribute();
					}
					}
					State = 529;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 530; modifier();
					}
					}
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 536;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 537; identifier();
				State = 539;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 538; typeArguments();
					}
				}

				State = 541; parameterList();
				State = 542; Match(Lambda);
				State = 543; referenceType();
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 544; typeParameterConstraintClause();
					}
					}
					State = 549;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 550; contract();
					}
					}
					State = 555;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 556; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 558; attribute();
					}
					}
					State = 563;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 564; modifier();
					}
					}
					State = 569;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 570;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 571; Match(LeftBracket);
				State = 572; Match(RightBracket);
				State = 574;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 573; typeArguments();
					}
				}

				State = 576; parameterList();
				State = 577; Match(Lambda);
				State = 578; referenceType();
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 579; typeParameterConstraintClause();
					}
					}
					State = 584;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 585; contract();
					}
					}
					State = 590;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 591; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 593; attribute();
						}
						} 
					}
					State = 598;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
				}
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 599; modifier();
					}
					}
					State = 604;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 605; identifier();
				State = 607;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 606; typeArguments();
					}
				}

				State = 609; parameterList();
				State = 610; Match(Lambda);
				State = 611; ((MethodContext)_localctx).returnType = referenceType();
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 612; typeParameterConstraintClause();
					}
					}
					State = 617;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 618; contract();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 624; methodBody();
				}
				break;
			case 8:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 629;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 626; attribute();
					}
					}
					State = 631;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 632; modifier();
					}
					}
					State = 637;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 638; Match(Operator);
				State = 639; overloadableOperator();
				State = 640; parameterList();
				State = 641; Match(Lambda);
				State = 642; ((OperatorOverloadContext)_localctx).returnType = referenceType();
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 643; typeParameterConstraintClause();
					}
					}
					State = 648;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 649; contract();
					}
					}
					State = 654;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 655; methodBody();
				}
				break;
			case 9:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 657; attribute();
					}
					}
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 663; modifier();
					}
					}
					State = 668;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 669; Match(Class);
				State = 670; identifier();
				State = 672;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 671; typeParameters();
					}
				}

				State = 675;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 674; baseTypes();
					}
				}

				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 677; typeParameterConstraintClause();
					}
					}
					State = 682;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 683; Match(LeftBrace);
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 684; member();
					}
					}
					State = 689;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 690; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameterList);
		int _la;
		try {
			State = 707;
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694; Match(LeftParen);
				State = 695; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 696; Match(Comma);
					State = 697; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 702;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 703; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705; Match(LeftParen);
				State = 706; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public IToken token;
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameter);
		int _la;
		try {
			State = 733;
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 709; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 714;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 716;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 715; identifier();
					}
				}

				State = 718; Match(Colon);
				State = 719; referenceType();
				}
				break;
			case 2:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 720; ((SelfParameterContext)_localctx)._parameterModifier = parameterModifier();
					((SelfParameterContext)_localctx)._modifiers.Add(((SelfParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 725;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 727;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 726; Match(Own);
					}
				}

				State = 730;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 729; Match(Mutable);
					}
				}

				State = 732; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_constructorInitializer);
		try {
			State = 749;
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737; Match(Colon);
				State = 738; Match(Base);
				State = 739; Match(LeftParen);
				State = 740; argumentList();
				State = 741; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; Match(Colon);
				State = 744; Match(Self);
				State = 745; Match(LeftParen);
				State = 746; argumentList();
				State = 747; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentList);
		int _la;
		try {
			State = 760;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case Try:
			case TryPanic:
			case TryResult:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case CharLiteral:
			case LeftParen:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 751; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 752; Match(Comma);
					State = 753; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 758;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodBody);
		int _la;
		try {
			State = 771;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762; Match(LeftBrace);
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 763; statement();
					}
					}
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 769; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 770; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_overloadableOperator);
		try {
			State = 785;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 773; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 774; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 775; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 776; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 777; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 778; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 779; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 780; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 781; Match(LeftBracket);
				State = 782; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 783; Match(Pipe);
				State = 784; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public StatementContext then;
		public StatementContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_statement);
		int _la;
		try {
			State = 855;
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; localVariableDeclaration();
				State = 788; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 790; Match(Unsafe);
				State = 791; Match(LeftBrace);
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 792; statement();
					}
					}
					State = 797;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 798; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 799; Match(LeftBrace);
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 800; statement();
					}
					}
					State = 805;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 806; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 807; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 808; expression(0);
				State = 809; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 811; Match(Return);
				State = 813;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 812; expression(0);
					}
				}

				State = 815; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 816; Match(Throw);
				State = 817; expression(0);
				State = 818; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 820; Match(If);
				State = 821; Match(LeftParen);
				State = 822; ((IfStatementContext)_localctx).condition = expression(0);
				State = 823; Match(RightParen);
				State = 824; ((IfStatementContext)_localctx).then = statement();
				State = 827;
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 825; Match(Else);
					State = 826; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 829; Match(If);
				State = 830; Match(LeftParen);
				State = 831; localVariableDeclaration();
				State = 832; Match(RightParen);
				State = 833; ((LetIfStatementContext)_localctx).then = statement();
				State = 836;
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 834; Match(Else);
					State = 835; ((LetIfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 838; Match(For);
				State = 839; Match(LeftParen);
				State = 842;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 840; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 841; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 844; Match(In);
				State = 845; expression(0);
				State = 846; Match(RightParen);
				State = 847; statement();
				}
				break;
			case 11:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 849; Match(Delete);
				State = 850; expression(0);
				State = 851; Match(Semicolon);
				}
				break;
			case 12:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 853; Match(Continue);
				State = 854; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 858; identifier();
			State = 860;
			_la = TokenStream.La(1);
			if (_la==IsNull) {
				{
				State = 859; Match(IsNull);
				}
			}

			State = 864;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 862; Match(Colon);
				State = 863; referenceType();
				}
			}

			State = 868;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 866; Match(Assign);
				State = 867; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken @try;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken @as;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 871;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Asterisk - 96)) | (1L << (AddressOf - 96)) | (1L << (Plus - 96)) | (1L << (Minus - 96)) | (1L << (Not - 96)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 872; expression(24);
				}
				break;
			case 2:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 873;
				((TryExpressionContext)_localctx).@try = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).@try = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 874; expression(11);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 875; Match(LeftParen);
				State = 876; expression(0);
				State = 877; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 879; Match(Pipe);
				State = 880; expression(0);
				State = 881; Match(Pipe);
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 883; Match(New);
				State = 884; name(0);
				State = 885; Match(LeftParen);
				State = 886; argumentList();
				State = 887; Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 889; Match(New);
				State = 891;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 890; baseTypes();
					}
				}

				State = 893; Match(LeftParen);
				State = 894; argumentList();
				State = 895; Match(RightParen);
				State = 896; Match(LeftBrace);
				State = 900;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 897; member();
					}
					}
					State = 902;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 903; Match(RightBrace);
				}
				break;
			case 7:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 905; simpleName();
				}
				break;
			case 8:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 906; Match(NullLiteral);
				}
				break;
			case 9:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 907; Match(Self);
				}
				break;
			case 10:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 908; Match(BooleanLiteral);
				}
				break;
			case 11:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 909; Match(IntLiteral);
				}
				break;
			case 12:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 910; Match(Uninitialized);
				}
				break;
			case 13:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 911; Match(StringLiteral);
				}
				break;
			case 14:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 912; Match(CharLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 975;
					switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 915;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 916; Match(DotDot);
						State = 917; expression(30);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 918;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 919;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 920; expression(24);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 921;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 922;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 923; expression(23);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 924;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 925;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (LeftAngle - 90)) | (1L << (RightAngle - 90)) | (1L << (LessThanOrEqual - 90)) | (1L << (GreaterThanOrEqual - 90)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 926; expression(22);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 927;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 928;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 929; ((EqualityExpressionContext)_localctx).rhs = expression(21);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 930;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 931; Match(And);
						State = 932; expression(20);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 933;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 934; Match(Xor);
						State = 935; expression(19);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 936;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 937; Match(Or);
						State = 938; expression(18);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 939;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 940; Match(Coalesce);
						State = 941; expression(17);
						}
						break;
					case 10:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 942;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 943; Match(In);
						State = 944; expression(16);
						}
						break;
					case 11:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 945;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 946; Match(IsNull);
						State = 947; ((IfExpressionContext)_localctx).then = expression(0);
						State = 948; Match(Colon);
						State = 949; ((IfExpressionContext)_localctx).@else = expression(10);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 951;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 952;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (Assign - 114)) | (1L << (AddAssign - 114)) | (1L << (SubtractAssign - 114)) | (1L << (MultiplyAssign - 114)) | (1L << (DivideAssign - 114)) | (1L << (AndAssign - 114)) | (1L << (XorAssign - 114)) | (1L << (OrAssign - 114)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 953; ((AssignmentExpressionContext)_localctx).rvalue = expression(9);
						}
						break;
					case 13:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 954;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 955; Match(Dot);
						State = 956; identifier();
						}
						break;
					case 14:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 957;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 958; Match(Lambda);
						State = 959; identifier();
						}
						break;
					case 15:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 960;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 961; Match(LeftParen);
						State = 962; argumentList();
						State = 963; Match(RightParen);
						}
						break;
					case 16:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 965;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 966; Match(LeftBracket);
						State = 967; argumentList();
						State = 968; Match(RightBracket);
						}
						break;
					case 17:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 970;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 971; Match(IsNull);
						}
						break;
					case 18:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 972;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 973;
						((CastExpressionContext)_localctx).@as = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).@as = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 974; valueType(0);
						}
						break;
					}
					} 
				}
				State = 979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return name_sempred((NameContext)_localctx, predIndex);
		case 15: return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 33: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 23);
		case 5: return Precpred(Context, 22);
		case 6: return Precpred(Context, 21);
		case 7: return Precpred(Context, 20);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 16);
		case 12: return Precpred(Context, 15);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 9);
		case 15: return Precpred(Context, 30);
		case 16: return Precpred(Context, 28);
		case 17: return Precpred(Context, 27);
		case 18: return Precpred(Context, 26);
		case 19: return Precpred(Context, 25);
		case 20: return Precpred(Context, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x7F\x3D7\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\a\x2H\n\x2\f\x2\xE\x2K\v\x2\x3\x2\a\x2N\n\x2"+
		"\f\x2\xE\x2Q\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4"+
		"[\n\x4\x3\x5\x3\x5\x3\x5\a\x5`\n\x5\f\x5\xE\x5\x63\v\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6i\n\x6\f\x6\xE\x6l\v\x6\x3\x6\a\x6o\n\x6\f\x6\xE\x6r\v\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6w\n\x6\f\x6\xE\x6z\v\x6\x3\x6\a\x6}\n\x6\f\x6\xE"+
		"\x6\x80\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x85\n\x6\x3\x6\x5\x6\x88\n\x6\x3"+
		"\x6\a\x6\x8B\n\x6\f\x6\xE\x6\x8E\v\x6\x3\x6\x3\x6\a\x6\x92\n\x6\f\x6\xE"+
		"\x6\x95\v\x6\x3\x6\x3\x6\x3\x6\a\x6\x9A\n\x6\f\x6\xE\x6\x9D\v\x6\x3\x6"+
		"\a\x6\xA0\n\x6\f\x6\xE\x6\xA3\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xA9\n"+
		"\x6\x3\x6\x3\x6\x5\x6\xAD\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xB2\n\x6\f\x6\xE"+
		"\x6\xB5\v\x6\x3\x6\a\x6\xB8\n\x6\f\x6\xE\x6\xBB\v\x6\x3\x6\x3\x6\x5\x6"+
		"\xBF\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xC5\n\x6\f\x6\xE\x6\xC8\v\x6\x3"+
		"\x6\a\x6\xCB\n\x6\f\x6\xE\x6\xCE\v\x6\x3\x6\x3\x6\x5\x6\xD2\n\x6\x3\a"+
		"\x3\a\x3\a\x3\a\x5\a\xD8\n\a\x3\b\x3\b\x3\b\x5\b\xDD\n\b\x3\t\x3\t\x5"+
		"\t\xE1\n\t\x3\t\x3\t\x3\t\x3\t\a\t\xE7\n\t\f\t\xE\t\xEA\v\t\x5\t\xEC\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5"+
		"\n\xFB\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x101\n\v\f\v\xE\v\x104\v\v\x3\v\x3"+
		"\v\x3\f\x3\f\x5\f\x10A\n\f\x3\f\x3\f\x5\f\x10E\n\f\x3\f\x5\f\x111\n\f"+
		"\x3\r\x3\r\x3\r\x3\r\a\r\x117\n\r\f\r\xE\r\x11A\v\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x128\n\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x5\xF\x12E\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\a\x10\x136\n\x10\f\x10\xE\x10\x139\v\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\a\x11\x141\n\x11\f\x11\xE\x11\x144\v\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x14A\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5"+
		"\x11\x150\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x156\n\x11\f\x11\xE"+
		"\x11\x159\v\x11\x3\x12\x5\x12\x15C\n\x12\x3\x12\x3\x12\x5\x12\x160\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x169\n\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x5\x13\x16F\n\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\a\x14\x175\n\x14\f\x14\xE\x14\x178\v\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x17E\n\x14\x3\x15\a\x15\x181\n\x15\f\x15\xE\x15\x184\v\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x5\x16\x18B\n\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\a\x17\x193\n\x17\f\x17\xE\x17\x196\v\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x19D\n\x17\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x5\x18\x1A4\n\x18\x3\x19\a\x19\x1A7\n\x19\f\x19\xE\x19\x1AA"+
		"\v\x19\x3\x19\a\x19\x1AD\n\x19\f\x19\xE\x19\x1B0\v\x19\x3\x19\x3\x19\x5"+
		"\x19\x1B4\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\x1B9\n\x19\x3\x19\x5\x19\x1BC"+
		"\n\x19\x3\x19\a\x19\x1BF\n\x19\f\x19\xE\x19\x1C2\v\x19\x3\x19\x3\x19\x3"+
		"\x19\a\x19\x1C7\n\x19\f\x19\xE\x19\x1CA\v\x19\x3\x19\a\x19\x1CD\n\x19"+
		"\f\x19\xE\x19\x1D0\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x1D7"+
		"\n\x19\f\x19\xE\x19\x1DA\v\x19\x3\x19\a\x19\x1DD\n\x19\f\x19\xE\x19\x1E0"+
		"\v\x19\x3\x19\x3\x19\x5\x19\x1E4\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x1EA\n\x19\f\x19\xE\x19\x1ED\v\x19\x3\x19\a\x19\x1F0\n\x19\f\x19\xE\x19"+
		"\x1F3\v\x19\x3\x19\x3\x19\x3\x19\a\x19\x1F8\n\x19\f\x19\xE\x19\x1FB\v"+
		"\x19\x3\x19\a\x19\x1FE\n\x19\f\x19\xE\x19\x201\v\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x5\x19\x207\n\x19\x3\x19\x3\x19\x5\x19\x20B\n\x19\x3\x19\x3"+
		"\x19\x3\x19\a\x19\x210\n\x19\f\x19\xE\x19\x213\v\x19\x3\x19\a\x19\x216"+
		"\n\x19\f\x19\xE\x19\x219\v\x19\x3\x19\x3\x19\x3\x19\x5\x19\x21E\n\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x224\n\x19\f\x19\xE\x19\x227\v\x19"+
		"\x3\x19\a\x19\x22A\n\x19\f\x19\xE\x19\x22D\v\x19\x3\x19\x3\x19\x3\x19"+
		"\a\x19\x232\n\x19\f\x19\xE\x19\x235\v\x19\x3\x19\a\x19\x238\n\x19\f\x19"+
		"\xE\x19\x23B\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x241\n\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\a\x19\x247\n\x19\f\x19\xE\x19\x24A\v\x19\x3\x19"+
		"\a\x19\x24D\n\x19\f\x19\xE\x19\x250\v\x19\x3\x19\x3\x19\x3\x19\a\x19\x255"+
		"\n\x19\f\x19\xE\x19\x258\v\x19\x3\x19\a\x19\x25B\n\x19\f\x19\xE\x19\x25E"+
		"\v\x19\x3\x19\x3\x19\x5\x19\x262\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x268\n\x19\f\x19\xE\x19\x26B\v\x19\x3\x19\a\x19\x26E\n\x19\f\x19\xE\x19"+
		"\x271\v\x19\x3\x19\x3\x19\x3\x19\a\x19\x276\n\x19\f\x19\xE\x19\x279\v"+
		"\x19\x3\x19\a\x19\x27C\n\x19\f\x19\xE\x19\x27F\v\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\a\x19\x287\n\x19\f\x19\xE\x19\x28A\v\x19\x3"+
		"\x19\a\x19\x28D\n\x19\f\x19\xE\x19\x290\v\x19\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x295\n\x19\f\x19\xE\x19\x298\v\x19\x3\x19\a\x19\x29B\n\x19\f\x19\xE\x19"+
		"\x29E\v\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2A3\n\x19\x3\x19\x5\x19\x2A6"+
		"\n\x19\x3\x19\a\x19\x2A9\n\x19\f\x19\xE\x19\x2AC\v\x19\x3\x19\x3\x19\a"+
		"\x19\x2B0\n\x19\f\x19\xE\x19\x2B3\v\x19\x3\x19\x3\x19\x5\x19\x2B7\n\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x2BD\n\x1A\f\x1A\xE\x1A\x2C0\v\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2C6\n\x1A\x3\x1B\a\x1B\x2C9\n\x1B"+
		"\f\x1B\xE\x1B\x2CC\v\x1B\x3\x1B\x5\x1B\x2CF\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\a\x1B\x2D4\n\x1B\f\x1B\xE\x1B\x2D7\v\x1B\x3\x1B\x5\x1B\x2DA\n\x1B\x3"+
		"\x1B\x5\x1B\x2DD\n\x1B\x3\x1B\x5\x1B\x2E0\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x5\x1D\x2F0\n\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x2F5\n\x1E\f\x1E\xE"+
		"\x1E\x2F8\v\x1E\x3\x1E\x5\x1E\x2FB\n\x1E\x3\x1F\x3\x1F\a\x1F\x2FF\n\x1F"+
		"\f\x1F\xE\x1F\x302\v\x1F\x3\x1F\x3\x1F\x5\x1F\x306\n\x1F\x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x314\n \x3!\x3!\x3!\x3!\x3!\x3!"+
		"\a!\x31C\n!\f!\xE!\x31F\v!\x3!\x3!\x3!\a!\x324\n!\f!\xE!\x327\v!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x5!\x330\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x3!\x3!\x3!\x5!\x33E\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x347\n!\x3!\x3"+
		"!\x3!\x3!\x5!\x34D\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!"+
		"\x35A\n!\x3\"\x3\"\x3\"\x5\"\x35F\n\"\x3\"\x3\"\x5\"\x363\n\"\x3\"\x3"+
		"\"\x5\"\x367\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x37E\n#\x3#\x3#\x3#\x3#\x3#\a#\x385"+
		"\n#\f#\xE#\x388\v#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x394\n"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#"+
		"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#"+
		"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x3D2\n#\f#\xE#\x3D5\v#\x3#\x2\x5\x1E"+
		" \x44$\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30"+
		"\x32\x34\x36\x38:<>@\x42\x44\x2\f\x3\x2\x15\x16\x4\x2\\]ij\x3\x2\x17\x18"+
		"\x6\x2\x62\x62\x64\x64lmss\x3\x2(*\x4\x2\x62\x62nn\x3\x2lm\x3\x2gh\x3"+
		"\x2t{\x3\x2\x31\x33\x47F\x2I\x3\x2\x2\x2\x4T\x3\x2\x2\x2\x6Z\x3\x2\x2"+
		"\x2\b\\\x3\x2\x2\x2\n\xD1\x3\x2\x2\x2\f\xD7\x3\x2\x2\x2\xE\xD9\x3\x2\x2"+
		"\x2\x10\xDE\x3\x2\x2\x2\x12\xFA\x3\x2\x2\x2\x14\xFC\x3\x2\x2\x2\x16\x110"+
		"\x3\x2\x2\x2\x18\x112\x3\x2\x2\x2\x1A\x127\x3\x2\x2\x2\x1C\x12D\x3\x2"+
		"\x2\x2\x1E\x12F\x3\x2\x2\x2 \x14F\x3\x2\x2\x2\"\x168\x3\x2\x2\x2$\x16E"+
		"\x3\x2\x2\x2&\x17D\x3\x2\x2\x2(\x182\x3\x2\x2\x2*\x18A\x3\x2\x2\x2,\x19C"+
		"\x3\x2\x2\x2.\x1A3\x3\x2\x2\x2\x30\x2B6\x3\x2\x2\x2\x32\x2C5\x3\x2\x2"+
		"\x2\x34\x2DF\x3\x2\x2\x2\x36\x2E1\x3\x2\x2\x2\x38\x2EF\x3\x2\x2\x2:\x2FA"+
		"\x3\x2\x2\x2<\x305\x3\x2\x2\x2>\x313\x3\x2\x2\x2@\x359\x3\x2\x2\x2\x42"+
		"\x35B\x3\x2\x2\x2\x44\x393\x3\x2\x2\x2\x46H\x5\x4\x3\x2G\x46\x3\x2\x2"+
		"\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JO\x3\x2\x2\x2KI\x3\x2\x2"+
		"\x2LN\x5\n\x6\x2ML\x3\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2"+
		"\x2PR\x3\x2\x2\x2QO\x3\x2\x2\x2RS\a\x2\x2\x3S\x3\x3\x2\x2\x2TU\a\n\x2"+
		"\x2UV\x5\b\x5\x2VW\aR\x2\x2W\x5\x3\x2\x2\x2X[\a}\x2\x2Y[\a~\x2\x2ZX\x3"+
		"\x2\x2\x2ZY\x3\x2\x2\x2[\a\x3\x2\x2\x2\\\x61\x5\x6\x4\x2]^\aT\x2\x2^`"+
		"\x5\x6\x4\x2_]\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x61\x62\x3"+
		"\x2\x2\x2\x62\t\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x64\x65\a\v\x2\x2\x65"+
		"\x66\x5\b\x5\x2\x66j\aZ\x2\x2gi\x5\x4\x3\x2hg\x3\x2\x2\x2il\x3\x2\x2\x2"+
		"jh\x3\x2\x2\x2jk\x3\x2\x2\x2kp\x3\x2\x2\x2lj\x3\x2\x2\x2mo\x5\n\x6\x2"+
		"nm\x3\x2\x2\x2or\x3\x2\x2\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2qs\x3\x2\x2\x2"+
		"rp\x3\x2\x2\x2st\a[\x2\x2t\xD2\x3\x2\x2\x2uw\x5\xE\b\x2vu\x3\x2\x2\x2"+
		"wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y~\x3\x2\x2\x2zx\x3\x2\x2\x2"+
		"{}\x5\x12\n\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2"+
		"\x2\x2\x7F\x81\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x82\a\f\x2\x2\x82\x84"+
		"\x5\x6\x4\x2\x83\x85\x5\x14\v\x2\x84\x83\x3\x2\x2\x2\x84\x85\x3\x2\x2"+
		"\x2\x85\x87\x3\x2\x2\x2\x86\x88\x5\x10\t\x2\x87\x86\x3\x2\x2\x2\x87\x88"+
		"\x3\x2\x2\x2\x88\x8C\x3\x2\x2\x2\x89\x8B\x5,\x17\x2\x8A\x89\x3\x2\x2\x2"+
		"\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x3"+
		"\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x93\aZ\x2\x2\x90\x92\x5\x30\x19\x2\x91"+
		"\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3\x2"+
		"\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x97\a[\x2\x2\x97\xD2"+
		"\x3\x2\x2\x2\x98\x9A\x5\xE\b\x2\x99\x98\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2"+
		"\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\xA1\x3\x2\x2\x2\x9D\x9B\x3"+
		"\x2\x2\x2\x9E\xA0\x5\x12\n\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2"+
		"\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA1\x3"+
		"\x2\x2\x2\xA4\xA5\t\x2\x2\x2\xA5\xA8\x5\x6\x4\x2\xA6\xA7\aS\x2\x2\xA7"+
		"\xA9\x5\"\x12\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAC\x3\x2"+
		"\x2\x2\xAA\xAB\at\x2\x2\xAB\xAD\x5\x44#\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD"+
		"\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\aR\x2\x2\xAF\xD2\x3\x2\x2\x2"+
		"\xB0\xB2\x5\xE\b\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB5\x3\x2\x2\x2\xB3\xB1\x3"+
		"\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB9\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2"+
		"\xB6\xB8\x5\x12\n\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3"+
		"\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2"+
		"\xBC\xBE\x5\x6\x4\x2\xBD\xBF\x5\x18\r\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3"+
		"\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\x5\x32\x1A\x2\xC1\xC2\aY\x2\x2\xC2"+
		"\xC6\x5\"\x12\x2\xC3\xC5\x5,\x17\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC8\x3\x2"+
		"\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xCC\x3\x2\x2\x2\xC8"+
		"\xC6\x3\x2\x2\x2\xC9\xCB\x5\f\a\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2\x2"+
		"\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF\x3\x2\x2\x2\xCE\xCC"+
		"\x3\x2\x2\x2\xCF\xD0\x5<\x1F\x2\xD0\xD2\x3\x2\x2\x2\xD1\x64\x3\x2\x2\x2"+
		"\xD1x\x3\x2\x2\x2\xD1\x9B\x3\x2\x2\x2\xD1\xB3\x3\x2\x2\x2\xD2\v\x3\x2"+
		"\x2\x2\xD3\xD4\a?\x2\x2\xD4\xD8\x5\x44#\x2\xD5\xD6\a@\x2\x2\xD6\xD8\x5"+
		"\x44#\x2\xD7\xD3\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8\r\x3\x2\x2\x2\xD9"+
		"\xDC\a~\x2\x2\xDA\xDB\a`\x2\x2\xDB\xDD\a\x61\x2\x2\xDC\xDA\x3\x2\x2\x2"+
		"\xDC\xDD\x3\x2\x2\x2\xDD\xF\x3\x2\x2\x2\xDE\xE0\aS\x2\x2\xDF\xE1\x5\x1E"+
		"\x10\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xEB\x3\x2\x2\x2\xE2"+
		"\xE3\aS\x2\x2\xE3\xE8\x5\x1E\x10\x2\xE4\xE5\aX\x2\x2\xE5\xE7\x5\x1E\x10"+
		"\x2\xE6\xE4\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9"+
		"\x3\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB\xE2\x3\x2\x2"+
		"\x2\xEB\xEC\x3\x2\x2\x2\xEC\x11\x3\x2\x2\x2\xED\xFB\a\x34\x2\x2\xEE\xFB"+
		"\a\x35\x2\x2\xEF\xFB\a\x36\x2\x2\xF0\xFB\a\x37\x2\x2\xF1\xFB\a\x38\x2"+
		"\x2\xF2\xFB\a\x39\x2\x2\xF3\xFB\a\x1B\x2\x2\xF4\xFB\a.\x2\x2\xF5\xFB\a"+
		"/\x2\x2\xF6\xFB\a\x19\x2\x2\xF7\xFB\a\x1A\x2\x2\xF8\xFB\a=\x2\x2\xF9\xFB"+
		"\a\x1D\x2\x2\xFA\xED\x3\x2\x2\x2\xFA\xEE\x3\x2\x2\x2\xFA\xEF\x3\x2\x2"+
		"\x2\xFA\xF0\x3\x2\x2\x2\xFA\xF1\x3\x2\x2\x2\xFA\xF2\x3\x2\x2\x2\xFA\xF3"+
		"\x3\x2\x2\x2\xFA\xF4\x3\x2\x2\x2\xFA\xF5\x3\x2\x2\x2\xFA\xF6\x3\x2\x2"+
		"\x2\xFA\xF7\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xF9\x3\x2\x2\x2\xFB\x13"+
		"\x3\x2\x2\x2\xFC\xFD\a\\\x2\x2\xFD\x102\x5\x16\f\x2\xFE\xFF\aX\x2\x2\xFF"+
		"\x101\x5\x16\f\x2\x100\xFE\x3\x2\x2\x2\x101\x104\x3\x2\x2\x2\x102\x100"+
		"\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2\x2\x2\x104\x102\x3"+
		"\x2\x2\x2\x105\x106\a]\x2\x2\x106\x15\x3\x2\x2\x2\x107\x109\x5\x6\x4\x2"+
		"\x108\x10A\ak\x2\x2\x109\x108\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10D"+
		"\x3\x2\x2\x2\x10B\x10C\aS\x2\x2\x10C\x10E\x5 \x11\x2\x10D\x10B\x3\x2\x2"+
		"\x2\x10D\x10E\x3\x2\x2\x2\x10E\x111\x3\x2\x2\x2\x10F\x111\x5$\x13\x2\x110"+
		"\x107\x3\x2\x2\x2\x110\x10F\x3\x2\x2\x2\x111\x17\x3\x2\x2\x2\x112\x113"+
		"\a\\\x2\x2\x113\x118\x5\"\x12\x2\x114\x115\aX\x2\x2\x115\x117\x5\"\x12"+
		"\x2\x116\x114\x3\x2\x2\x2\x117\x11A\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2"+
		"\x118\x119\x3\x2\x2\x2\x119\x11B\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11B"+
		"\x11C\a]\x2\x2\x11C\x19\x3\x2\x2\x2\x11D\x128\x5\x6\x4\x2\x11E\x128\a"+
		"\x41\x2\x2\x11F\x128\a\x42\x2\x2\x120\x128\a\x43\x2\x2\x121\x128\a\x44"+
		"\x2\x2\x122\x128\a\x45\x2\x2\x123\x128\a\x46\x2\x2\x124\x128\aI\x2\x2"+
		"\x125\x128\aJ\x2\x2\x126\x128\aK\x2\x2\x127\x11D\x3\x2\x2\x2\x127\x11E"+
		"\x3\x2\x2\x2\x127\x11F\x3\x2\x2\x2\x127\x120\x3\x2\x2\x2\x127\x121\x3"+
		"\x2\x2\x2\x127\x122\x3\x2\x2\x2\x127\x123\x3\x2\x2\x2\x127\x124\x3\x2"+
		"\x2\x2\x127\x125\x3\x2\x2\x2\x127\x126\x3\x2\x2\x2\x128\x1B\x3\x2\x2\x2"+
		"\x129\x12E\x5\x1A\xE\x2\x12A\x12B\x5\x1A\xE\x2\x12B\x12C\x5\x18\r\x2\x12C"+
		"\x12E\x3\x2\x2\x2\x12D\x129\x3\x2\x2\x2\x12D\x12A\x3\x2\x2\x2\x12E\x1D"+
		"\x3\x2\x2\x2\x12F\x130\b\x10\x1\x2\x130\x131\x5\x1C\xF\x2\x131\x137\x3"+
		"\x2\x2\x2\x132\x133\f\x3\x2\x2\x133\x134\aT\x2\x2\x134\x136\x5\x1C\xF"+
		"\x2\x135\x132\x3\x2\x2\x2\x136\x139\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2"+
		"\x137\x138\x3\x2\x2\x2\x138\x1F\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A"+
		"\x13B\b\x11\x1\x2\x13B\x150\x5\x1E\x10\x2\x13C\x13D\a^\x2\x2\x13D\x142"+
		"\x5 \x11\x2\x13E\x13F\aX\x2\x2\x13F\x141\x5 \x11\x2\x140\x13E\x3\x2\x2"+
		"\x2\x141\x144\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2"+
		"\x143\x145\x3\x2\x2\x2\x144\x142\x3\x2\x2\x2\x145\x146\a_\x2\x2\x146\x14A"+
		"\x3\x2\x2\x2\x147\x148\a^\x2\x2\x148\x14A\a_\x2\x2\x149\x13C\x3\x2\x2"+
		"\x2\x149\x147\x3\x2\x2\x2\x14A\x150\x3\x2\x2\x2\x14B\x14C\x5&\x14\x2\x14C"+
		"\x14D\aY\x2\x2\x14D\x14E\x5\"\x12\x2\x14E\x150\x3\x2\x2\x2\x14F\x13A\x3"+
		"\x2\x2\x2\x14F\x149\x3\x2\x2\x2\x14F\x14B\x3\x2\x2\x2\x150\x157\x3\x2"+
		"\x2\x2\x151\x152\f\x6\x2\x2\x152\x156\a\x66\x2\x2\x153\x154\f\x5\x2\x2"+
		"\x154\x156\a\x62\x2\x2\x155\x151\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x156"+
		"\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158!\x3"+
		"\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15C\x5$\x13\x2\x15B\x15A\x3\x2\x2"+
		"\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x169\x5 \x11\x2\x15E"+
		"\x160\x5$\x13\x2\x15F\x15E\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161"+
		"\x3\x2\x2\x2\x161\x162\a;\x2\x2\x162\x169\x5 \x11\x2\x163\x164\a:\x2\x2"+
		"\x164\x169\x5 \x11\x2\x165\x166\a:\x2\x2\x166\x167\a;\x2\x2\x167\x169"+
		"\x5 \x11\x2\x168\x15B\x3\x2\x2\x2\x168\x15F\x3\x2\x2\x2\x168\x163\x3\x2"+
		"\x2\x2\x168\x165\x3\x2\x2\x2\x169#\x3\x2\x2\x2\x16A\x16B\aW\x2\x2\x16B"+
		"\x16F\x5\x6\x4\x2\x16C\x16D\aW\x2\x2\x16D\x16F\a\x10\x2\x2\x16E\x16A\x3"+
		"\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16F%\x3\x2\x2\x2\x170\x171\a`\x2\x2\x171"+
		"\x176\x5(\x15\x2\x172\x173\aX\x2\x2\x173\x175\x5(\x15\x2\x174\x172\x3"+
		"\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2"+
		"\x2\x2\x177\x179\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x179\x17A\a\x61\x2"+
		"\x2\x17A\x17E\x3\x2\x2\x2\x17B\x17C\a`\x2\x2\x17C\x17E\a\x61\x2\x2\x17D"+
		"\x170\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E\'\x3\x2\x2\x2\x17F\x181\x5"+
		"\x36\x1C\x2\x180\x17F\x3\x2\x2\x2\x181\x184\x3\x2\x2\x2\x182\x180\x3\x2"+
		"\x2\x2\x182\x183\x3\x2\x2\x2\x183\x185\x3\x2\x2\x2\x184\x182\x3\x2\x2"+
		"\x2\x185\x186\x5\"\x12\x2\x186)\x3\x2\x2\x2\x187\x18B\aN\x2\x2\x188\x18B"+
		"\aP\x2\x2\x189\x18B\x5\x6\x4\x2\x18A\x187\x3\x2\x2\x2\x18A\x188\x3\x2"+
		"\x2\x2\x18A\x189\x3\x2\x2\x2\x18B+\x3\x2\x2\x2\x18C\x18D\a\x12\x2\x2\x18D"+
		"\x18E\x5\x16\f\x2\x18E\x18F\aS\x2\x2\x18F\x194\x5.\x18\x2\x190\x191\a"+
		"X\x2\x2\x191\x193\x5.\x18\x2\x192\x190\x3\x2\x2\x2\x193\x196\x3\x2\x2"+
		"\x2\x194\x192\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195\x19D\x3\x2\x2\x2"+
		"\x196\x194\x3\x2\x2\x2\x197\x198\a\x12\x2\x2\x198\x199\x5\x16\f\x2\x199"+
		"\x19A\t\x3\x2\x2\x19A\x19B\aN\x2\x2\x19B\x19D\x3\x2\x2\x2\x19C\x18C\x3"+
		"\x2\x2\x2\x19C\x197\x3\x2\x2\x2\x19D-\x3\x2\x2\x2\x19E\x19F\a\xE\x2\x2"+
		"\x19F\x1A0\a`\x2\x2\x1A0\x1A4\a\x61\x2\x2\x1A1\x1A4\x5 \x11\x2\x1A2\x1A4"+
		"\x5\x16\f\x2\x1A3\x19E\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A2\x3"+
		"\x2\x2\x2\x1A4/\x3\x2\x2\x2\x1A5\x1A7\x5\xE\b\x2\x1A6\x1A5\x3\x2\x2\x2"+
		"\x1A7\x1AA\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9"+
		"\x1AE\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AB\x1AD\x5\x12\n\x2\x1AC\x1AB"+
		"\x3\x2\x2\x2\x1AD\x1B0\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3"+
		"\x2\x2\x2\x1AF\x1B1\x3\x2\x2\x2\x1B0\x1AE\x3\x2\x2\x2\x1B1\x1B3\a\xE\x2"+
		"\x2\x1B2\x1B4\x5\x6\x4\x2\x1B3\x1B2\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2"+
		"\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B8\x5\x32\x1A\x2\x1B6\x1B7\aY\x2\x2\x1B7"+
		"\x1B9\x5\"\x12\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BB"+
		"\x3\x2\x2\x2\x1BA\x1BC\x5\x38\x1D\x2\x1BB\x1BA\x3\x2\x2\x2\x1BB\x1BC\x3"+
		"\x2\x2\x2\x1BC\x1C0\x3\x2\x2\x2\x1BD\x1BF\x5\f\a\x2\x1BE\x1BD\x3\x2\x2"+
		"\x2\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2"+
		"\x1C1\x1C3\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C4\x5<\x1F\x2\x1C4"+
		"\x2B7\x3\x2\x2\x2\x1C5\x1C7\x5\xE\b\x2\x1C6\x1C5\x3\x2\x2\x2\x1C7\x1CA"+
		"\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CE\x3"+
		"\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CB\x1CD\x5\x12\n\x2\x1CC\x1CB\x3\x2"+
		"\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2"+
		"\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D1\x1D2\a\xF\x2\x2\x1D2"+
		"\x1D3\x5\x32\x1A\x2\x1D3\x1D4\x5<\x1F\x2\x1D4\x2B7\x3\x2\x2\x2\x1D5\x1D7"+
		"\x5\xE\b\x2\x1D6\x1D5\x3\x2\x2\x2\x1D7\x1DA\x3\x2\x2\x2\x1D8\x1D6\x3\x2"+
		"\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DE\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2"+
		"\x2\x1DB\x1DD\x5\x12\n\x2\x1DC\x1DB\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2"+
		"\x1DE\x1DC\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0"+
		"\x1DE\x3\x2\x2\x2\x1E1\x1E3\a\x30\x2\x2\x1E2\x1E4\x5\x18\r\x2\x1E3\x1E2"+
		"\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E6\x5"+
		"\x32\x1A\x2\x1E6\x1E7\aY\x2\x2\x1E7\x1EB\x5\"\x12\x2\x1E8\x1EA\x5,\x17"+
		"\x2\x1E9\x1E8\x3\x2\x2\x2\x1EA\x1ED\x3\x2\x2\x2\x1EB\x1E9\x3\x2\x2\x2"+
		"\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1F1\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1EE"+
		"\x1F0\x5\f\a\x2\x1EF\x1EE\x3\x2\x2\x2\x1F0\x1F3\x3\x2\x2\x2\x1F1\x1EF"+
		"\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1F4\x3\x2\x2\x2\x1F3\x1F1\x3"+
		"\x2\x2\x2\x1F4\x1F5\x5<\x1F\x2\x1F5\x2B7\x3\x2\x2\x2\x1F6\x1F8\x5\xE\b"+
		"\x2\x1F7\x1F6\x3\x2\x2\x2\x1F8\x1FB\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2"+
		"\x1F9\x1FA\x3\x2\x2\x2\x1FA\x1FF\x3\x2\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FC"+
		"\x1FE\x5\x12\n\x2\x1FD\x1FC\x3\x2\x2\x2\x1FE\x201\x3\x2\x2\x2\x1FF\x1FD"+
		"\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x202\x3\x2\x2\x2\x201\x1FF\x3"+
		"\x2\x2\x2\x202\x203\t\x2\x2\x2\x203\x206\x5\x6\x4\x2\x204\x205\aS\x2\x2"+
		"\x205\x207\x5\"\x12\x2\x206\x204\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207"+
		"\x20A\x3\x2\x2\x2\x208\x209\at\x2\x2\x209\x20B\x5\x44#\x2\x20A\x208\x3"+
		"\x2\x2\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\aR\x2"+
		"\x2\x20D\x2B7\x3\x2\x2\x2\x20E\x210\x5\xE\b\x2\x20F\x20E\x3\x2\x2\x2\x210"+
		"\x213\x3\x2\x2\x2\x211\x20F\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x217"+
		"\x3\x2\x2\x2\x213\x211\x3\x2\x2\x2\x214\x216\x5\x12\n\x2\x215\x214\x3"+
		"\x2\x2\x2\x216\x219\x3\x2\x2\x2\x217\x215\x3\x2\x2\x2\x217\x218\x3\x2"+
		"\x2\x2\x218\x21A\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x21A\x21B\t\x4\x2\x2"+
		"\x21B\x21D\x5\x6\x4\x2\x21C\x21E\x5\x18\r\x2\x21D\x21C\x3\x2\x2\x2\x21D"+
		"\x21E\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\x5\x32\x1A\x2\x220\x221"+
		"\aY\x2\x2\x221\x225\x5\"\x12\x2\x222\x224\x5,\x17\x2\x223\x222\x3\x2\x2"+
		"\x2\x224\x227\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2"+
		"\x226\x22B\x3\x2\x2\x2\x227\x225\x3\x2\x2\x2\x228\x22A\x5\f\a\x2\x229"+
		"\x228\x3\x2\x2\x2\x22A\x22D\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22B\x22C"+
		"\x3\x2\x2\x2\x22C\x22E\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2\x22E\x22F\x5"+
		"<\x1F\x2\x22F\x2B7\x3\x2\x2\x2\x230\x232\x5\xE\b\x2\x231\x230\x3\x2\x2"+
		"\x2\x232\x235\x3\x2\x2\x2\x233\x231\x3\x2\x2\x2\x233\x234\x3\x2\x2\x2"+
		"\x234\x239\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2\x236\x238\x5\x12\n\x2\x237"+
		"\x236\x3\x2\x2\x2\x238\x23B\x3\x2\x2\x2\x239\x237\x3\x2\x2\x2\x239\x23A"+
		"\x3\x2\x2\x2\x23A\x23C\x3\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23C\x23D\t\x4"+
		"\x2\x2\x23D\x23E\a^\x2\x2\x23E\x240\a_\x2\x2\x23F\x241\x5\x18\r\x2\x240"+
		"\x23F\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243"+
		"\x5\x32\x1A\x2\x243\x244\aY\x2\x2\x244\x248\x5\"\x12\x2\x245\x247\x5,"+
		"\x17\x2\x246\x245\x3\x2\x2\x2\x247\x24A\x3\x2\x2\x2\x248\x246\x3\x2\x2"+
		"\x2\x248\x249\x3\x2\x2\x2\x249\x24E\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2"+
		"\x24B\x24D\x5\f\a\x2\x24C\x24B\x3\x2\x2\x2\x24D\x250\x3\x2\x2\x2\x24E"+
		"\x24C\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x251\x3\x2\x2\x2\x250\x24E"+
		"\x3\x2\x2\x2\x251\x252\x5<\x1F\x2\x252\x2B7\x3\x2\x2\x2\x253\x255\x5\xE"+
		"\b\x2\x254\x253\x3\x2\x2\x2\x255\x258\x3\x2\x2\x2\x256\x254\x3\x2\x2\x2"+
		"\x256\x257\x3\x2\x2\x2\x257\x25C\x3\x2\x2\x2\x258\x256\x3\x2\x2\x2\x259"+
		"\x25B\x5\x12\n\x2\x25A\x259\x3\x2\x2\x2\x25B\x25E\x3\x2\x2\x2\x25C\x25A"+
		"\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25F\x3\x2\x2\x2\x25E\x25C\x3"+
		"\x2\x2\x2\x25F\x261\x5\x6\x4\x2\x260\x262\x5\x18\r\x2\x261\x260\x3\x2"+
		"\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x5\x32\x1A"+
		"\x2\x264\x265\aY\x2\x2\x265\x269\x5\"\x12\x2\x266\x268\x5,\x17\x2\x267"+
		"\x266\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269\x267\x3\x2\x2\x2\x269\x26A"+
		"\x3\x2\x2\x2\x26A\x26F\x3\x2\x2\x2\x26B\x269\x3\x2\x2\x2\x26C\x26E\x5"+
		"\f\a\x2\x26D\x26C\x3\x2\x2\x2\x26E\x271\x3\x2\x2\x2\x26F\x26D\x3\x2\x2"+
		"\x2\x26F\x270\x3\x2\x2\x2\x270\x272\x3\x2\x2\x2\x271\x26F\x3\x2\x2\x2"+
		"\x272\x273\x5<\x1F\x2\x273\x2B7\x3\x2\x2\x2\x274\x276\x5\xE\b\x2\x275"+
		"\x274\x3\x2\x2\x2\x276\x279\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x277\x278"+
		"\x3\x2\x2\x2\x278\x27D\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x27A\x27C\x5"+
		"\x12\n\x2\x27B\x27A\x3\x2\x2\x2\x27C\x27F\x3\x2\x2\x2\x27D\x27B\x3\x2"+
		"\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x280\x3\x2\x2\x2\x27F\x27D\x3\x2\x2"+
		"\x2\x280\x281\a\x14\x2\x2\x281\x282\x5> \x2\x282\x283\x5\x32\x1A\x2\x283"+
		"\x284\aY\x2\x2\x284\x288\x5\"\x12\x2\x285\x287\x5,\x17\x2\x286\x285\x3"+
		"\x2\x2\x2\x287\x28A\x3\x2\x2\x2\x288\x286\x3\x2\x2\x2\x288\x289\x3\x2"+
		"\x2\x2\x289\x28E\x3\x2\x2\x2\x28A\x288\x3\x2\x2\x2\x28B\x28D\x5\f\a\x2"+
		"\x28C\x28B\x3\x2\x2\x2\x28D\x290\x3\x2\x2\x2\x28E\x28C\x3\x2\x2\x2\x28E"+
		"\x28F\x3\x2\x2\x2\x28F\x291\x3\x2\x2\x2\x290\x28E\x3\x2\x2\x2\x291\x292"+
		"\x5<\x1F\x2\x292\x2B7\x3\x2\x2\x2\x293\x295\x5\xE\b\x2\x294\x293\x3\x2"+
		"\x2\x2\x295\x298\x3\x2\x2\x2\x296\x294\x3\x2\x2\x2\x296\x297\x3\x2\x2"+
		"\x2\x297\x29C\x3\x2\x2\x2\x298\x296\x3\x2\x2\x2\x299\x29B\x5\x12\n\x2"+
		"\x29A\x299\x3\x2\x2\x2\x29B\x29E\x3\x2\x2\x2\x29C\x29A\x3\x2\x2\x2\x29C"+
		"\x29D\x3\x2\x2\x2\x29D\x29F\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29F\x2A0"+
		"\a\f\x2\x2\x2A0\x2A2\x5\x6\x4\x2\x2A1\x2A3\x5\x14\v\x2\x2A2\x2A1\x3\x2"+
		"\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A5\x3\x2\x2\x2\x2A4\x2A6\x5\x10\t"+
		"\x2\x2A5\x2A4\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2AA\x3\x2\x2\x2"+
		"\x2A7\x2A9\x5,\x17\x2\x2A8\x2A7\x3\x2\x2\x2\x2A9\x2AC\x3\x2\x2\x2\x2AA"+
		"\x2A8\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB\x2AD\x3\x2\x2\x2\x2AC\x2AA"+
		"\x3\x2\x2\x2\x2AD\x2B1\aZ\x2\x2\x2AE\x2B0\x5\x30\x19\x2\x2AF\x2AE\x3\x2"+
		"\x2\x2\x2B0\x2B3\x3\x2\x2\x2\x2B1\x2AF\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2"+
		"\x2\x2B2\x2B4\x3\x2\x2\x2\x2B3\x2B1\x3\x2\x2\x2\x2B4\x2B5\a[\x2\x2\x2B5"+
		"\x2B7\x3\x2\x2\x2\x2B6\x1A8\x3\x2\x2\x2\x2B6\x1C8\x3\x2\x2\x2\x2B6\x1D8"+
		"\x3\x2\x2\x2\x2B6\x1F9\x3\x2\x2\x2\x2B6\x211\x3\x2\x2\x2\x2B6\x233\x3"+
		"\x2\x2\x2\x2B6\x256\x3\x2\x2\x2\x2B6\x277\x3\x2\x2\x2\x2B6\x296\x3\x2"+
		"\x2\x2\x2B7\x31\x3\x2\x2\x2\x2B8\x2B9\a`\x2\x2\x2B9\x2BE\x5\x34\x1B\x2"+
		"\x2BA\x2BB\aX\x2\x2\x2BB\x2BD\x5\x34\x1B\x2\x2BC\x2BA\x3\x2\x2\x2\x2BD"+
		"\x2C0\x3\x2\x2\x2\x2BE\x2BC\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C1"+
		"\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2\x2\x2C1\x2C2\a\x61\x2\x2\x2C2\x2C6\x3"+
		"\x2\x2\x2\x2C3\x2C4\a`\x2\x2\x2C4\x2C6\a\x61\x2\x2\x2C5\x2B8\x3\x2\x2"+
		"\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x33\x3\x2\x2\x2\x2C7\x2C9\x5\x36\x1C\x2"+
		"\x2C8\x2C7\x3\x2\x2\x2\x2C9\x2CC\x3\x2\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CA"+
		"\x2CB\x3\x2\x2\x2\x2CB\x2CE\x3\x2\x2\x2\x2CC\x2CA\x3\x2\x2\x2\x2CD\x2CF"+
		"\x5\x6\x4\x2\x2CE\x2CD\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D0\x3"+
		"\x2\x2\x2\x2D0\x2D1\aS\x2\x2\x2D1\x2E0\x5\"\x12\x2\x2D2\x2D4\x5\x36\x1C"+
		"\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\x2D7\x3\x2\x2\x2\x2D5\x2D3\x3\x2\x2\x2"+
		"\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7\x2D5\x3\x2\x2\x2\x2D8"+
		"\x2DA\a:\x2\x2\x2D9\x2D8\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2DC\x3"+
		"\x2\x2\x2\x2DB\x2DD\a;\x2\x2\x2DC\x2DB\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2"+
		"\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2E0\a\x10\x2\x2\x2DF\x2CA\x3\x2\x2\x2"+
		"\x2DF\x2D5\x3\x2\x2\x2\x2E0\x35\x3\x2\x2\x2\x2E1\x2E2\a\x1C\x2\x2\x2E2"+
		"\x37\x3\x2\x2\x2\x2E3\x2E4\aS\x2\x2\x2E4\x2E5\a\x13\x2\x2\x2E5\x2E6\a"+
		"`\x2\x2\x2E6\x2E7\x5:\x1E\x2\x2E7\x2E8\a\x61\x2\x2\x2E8\x2F0\x3\x2\x2"+
		"\x2\x2E9\x2EA\aS\x2\x2\x2EA\x2EB\a\x10\x2\x2\x2EB\x2EC\a`\x2\x2\x2EC\x2ED"+
		"\x5:\x1E\x2\x2ED\x2EE\a\x61\x2\x2\x2EE\x2F0\x3\x2\x2\x2\x2EF\x2E3\x3\x2"+
		"\x2\x2\x2EF\x2E9\x3\x2\x2\x2\x2F0\x39\x3\x2\x2\x2\x2F1\x2F6\x5\x44#\x2"+
		"\x2F2\x2F3\aX\x2\x2\x2F3\x2F5\x5\x44#\x2\x2F4\x2F2\x3\x2\x2\x2\x2F5\x2F8"+
		"\x3\x2\x2\x2\x2F6\x2F4\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x2FB\x3"+
		"\x2\x2\x2\x2F8\x2F6\x3\x2\x2\x2\x2F9\x2FB\x3\x2\x2\x2\x2FA\x2F1\x3\x2"+
		"\x2\x2\x2FA\x2F9\x3\x2\x2\x2\x2FB;\x3\x2\x2\x2\x2FC\x300\aZ\x2\x2\x2FD"+
		"\x2FF\x5@!\x2\x2FE\x2FD\x3\x2\x2\x2\x2FF\x302\x3\x2\x2\x2\x300\x2FE\x3"+
		"\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x303\x3\x2\x2\x2\x302\x300\x3\x2"+
		"\x2\x2\x303\x306\a[\x2\x2\x304\x306\aR\x2\x2\x305\x2FC\x3\x2\x2\x2\x305"+
		"\x304\x3\x2\x2\x2\x306=\x3\x2\x2\x2\x307\x314\a\x62\x2\x2\x308\x314\a"+
		"\x64\x2\x2\x309\x314\ar\x2\x2\x30A\x314\ap\x2\x2\x30B\x314\aq\x2\x2\x30C"+
		"\x314\a\x66\x2\x2\x30D\x314\a\x65\x2\x2\x30E\x314\aT\x2\x2\x30F\x310\a"+
		"^\x2\x2\x310\x314\a_\x2\x2\x311\x312\ao\x2\x2\x312\x314\ao\x2\x2\x313"+
		"\x307\x3\x2\x2\x2\x313\x308\x3\x2\x2\x2\x313\x309\x3\x2\x2\x2\x313\x30A"+
		"\x3\x2\x2\x2\x313\x30B\x3\x2\x2\x2\x313\x30C\x3\x2\x2\x2\x313\x30D\x3"+
		"\x2\x2\x2\x313\x30E\x3\x2\x2\x2\x313\x30F\x3\x2\x2\x2\x313\x311\x3\x2"+
		"\x2\x2\x314?\x3\x2\x2\x2\x315\x316\x5\x42\"\x2\x316\x317\aR\x2\x2\x317"+
		"\x35A\x3\x2\x2\x2\x318\x319\a\x39\x2\x2\x319\x31D\aZ\x2\x2\x31A\x31C\x5"+
		"@!\x2\x31B\x31A\x3\x2\x2\x2\x31C\x31F\x3\x2\x2\x2\x31D\x31B\x3\x2\x2\x2"+
		"\x31D\x31E\x3\x2\x2\x2\x31E\x320\x3\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x320"+
		"\x35A\a[\x2\x2\x321\x325\aZ\x2\x2\x322\x324\x5@!\x2\x323\x322\x3\x2\x2"+
		"\x2\x324\x327\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2"+
		"\x326\x328\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2\x328\x35A\a[\x2\x2\x329\x35A"+
		"\aR\x2\x2\x32A\x32B\x5\x44#\x2\x32B\x32C\aR\x2\x2\x32C\x35A\x3\x2\x2\x2"+
		"\x32D\x32F\a\'\x2\x2\x32E\x330\x5\x44#\x2\x32F\x32E\x3\x2\x2\x2\x32F\x330"+
		"\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x35A\aR\x2\x2\x332\x333\a-\x2"+
		"\x2\x333\x334\x5\x44#\x2\x334\x335\aR\x2\x2\x335\x35A\x3\x2\x2\x2\x336"+
		"\x337\a \x2\x2\x337\x338\a`\x2\x2\x338\x339\x5\x44#\x2\x339\x33A\a\x61"+
		"\x2\x2\x33A\x33D\x5@!\x2\x33B\x33C\a!\x2\x2\x33C\x33E\x5@!\x2\x33D\x33B"+
		"\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x35A\x3\x2\x2\x2\x33F\x340\a "+
		"\x2\x2\x340\x341\a`\x2\x2\x341\x342\x5\x42\"\x2\x342\x343\a\x61\x2\x2"+
		"\x343\x346\x5@!\x2\x344\x345\a!\x2\x2\x345\x347\x5@!\x2\x346\x344\x3\x2"+
		"\x2\x2\x346\x347\x3\x2\x2\x2\x347\x35A\x3\x2\x2\x2\x348\x349\a\"\x2\x2"+
		"\x349\x34C\a`\x2\x2\x34A\x34D\x5\x42\"\x2\x34B\x34D\a|\x2\x2\x34C\x34A"+
		"\x3\x2\x2\x2\x34C\x34B\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34F\a#"+
		"\x2\x2\x34F\x350\x5\x44#\x2\x350\x351\a\x61\x2\x2\x351\x352\x5@!\x2\x352"+
		"\x35A\x3\x2\x2\x2\x353\x354\a\xF\x2\x2\x354\x355\x5\x44#\x2\x355\x356"+
		"\aR\x2\x2\x356\x35A\x3\x2\x2\x2\x357\x358\a&\x2\x2\x358\x35A\aR\x2\x2"+
		"\x359\x315\x3\x2\x2\x2\x359\x318\x3\x2\x2\x2\x359\x321\x3\x2\x2\x2\x359"+
		"\x329\x3\x2\x2\x2\x359\x32A\x3\x2\x2\x2\x359\x32D\x3\x2\x2\x2\x359\x332"+
		"\x3\x2\x2\x2\x359\x336\x3\x2\x2\x2\x359\x33F\x3\x2\x2\x2\x359\x348\x3"+
		"\x2\x2\x2\x359\x353\x3\x2\x2\x2\x359\x357\x3\x2\x2\x2\x35A\x41\x3\x2\x2"+
		"\x2\x35B\x35C\t\x2\x2\x2\x35C\x35E\x5\x6\x4\x2\x35D\x35F\a\x66\x2\x2\x35E"+
		"\x35D\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x362\x3\x2\x2\x2\x360\x361"+
		"\aS\x2\x2\x361\x363\x5\"\x12\x2\x362\x360\x3\x2\x2\x2\x362\x363\x3\x2"+
		"\x2\x2\x363\x366\x3\x2\x2\x2\x364\x365\at\x2\x2\x365\x367\x5\x44#\x2\x366"+
		"\x364\x3\x2\x2\x2\x366\x367\x3\x2\x2\x2\x367\x43\x3\x2\x2\x2\x368\x369"+
		"\b#\x1\x2\x369\x36A\t\x5\x2\x2\x36A\x394\x5\x44#\x1A\x36B\x36C\t\x6\x2"+
		"\x2\x36C\x394\x5\x44#\r\x36D\x36E\a`\x2\x2\x36E\x36F\x5\x44#\x2\x36F\x370"+
		"\a\x61\x2\x2\x370\x394\x3\x2\x2\x2\x371\x372\ao\x2\x2\x372\x373\x5\x44"+
		"#\x2\x373\x374\ao\x2\x2\x374\x394\x3\x2\x2\x2\x375\x376\a\xE\x2\x2\x376"+
		"\x377\x5\x1E\x10\x2\x377\x378\a`\x2\x2\x378\x379\x5:\x1E\x2\x379\x37A"+
		"\a\x61\x2\x2\x37A\x394\x3\x2\x2\x2\x37B\x37D\a\xE\x2\x2\x37C\x37E\x5\x10"+
		"\t\x2\x37D\x37C\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2"+
		"\x37F\x380\a`\x2\x2\x380\x381\x5:\x1E\x2\x381\x382\a\x61\x2\x2\x382\x386"+
		"\aZ\x2\x2\x383\x385\x5\x30\x19\x2\x384\x383\x3\x2\x2\x2\x385\x388\x3\x2"+
		"\x2\x2\x386\x384\x3\x2\x2\x2\x386\x387\x3\x2\x2\x2\x387\x389\x3\x2\x2"+
		"\x2\x388\x386\x3\x2\x2\x2\x389\x38A\a[\x2\x2\x38A\x394\x3\x2\x2\x2\x38B"+
		"\x394\x5\x1C\xF\x2\x38C\x394\aO\x2\x2\x38D\x394\a\x10\x2\x2\x38E\x394"+
		"\aM\x2\x2\x38F\x394\aN\x2\x2\x390\x394\a\x11\x2\x2\x391\x394\aP\x2\x2"+
		"\x392\x394\aQ\x2\x2\x393\x368\x3\x2\x2\x2\x393\x36B\x3\x2\x2\x2\x393\x36D"+
		"\x3\x2\x2\x2\x393\x371\x3\x2\x2\x2\x393\x375\x3\x2\x2\x2\x393\x37B\x3"+
		"\x2\x2\x2\x393\x38B\x3\x2\x2\x2\x393\x38C\x3\x2\x2\x2\x393\x38D\x3\x2"+
		"\x2\x2\x393\x38E\x3\x2\x2\x2\x393\x38F\x3\x2\x2\x2\x393\x390\x3\x2\x2"+
		"\x2\x393\x391\x3\x2\x2\x2\x393\x392\x3\x2\x2\x2\x394\x3D3\x3\x2\x2\x2"+
		"\x395\x396\f\x1F\x2\x2\x396\x397\aU\x2\x2\x397\x3D2\x5\x44# \x398\x399"+
		"\f\x19\x2\x2\x399\x39A\t\a\x2\x2\x39A\x3D2\x5\x44#\x1A\x39B\x39C\f\x18"+
		"\x2\x2\x39C\x39D\t\b\x2\x2\x39D\x3D2\x5\x44#\x19\x39E\x39F\f\x17\x2\x2"+
		"\x39F\x3A0\t\x3\x2\x2\x3A0\x3D2\x5\x44#\x18\x3A1\x3A2\f\x16\x2\x2\x3A2"+
		"\x3A3\t\t\x2\x2\x3A3\x3D2\x5\x44#\x17\x3A4\x3A5\f\x15\x2\x2\x3A5\x3A6"+
		"\ap\x2\x2\x3A6\x3D2\x5\x44#\x16\x3A7\x3A8\f\x14\x2\x2\x3A8\x3A9\aq\x2"+
		"\x2\x3A9\x3D2\x5\x44#\x15\x3AA\x3AB\f\x13\x2\x2\x3AB\x3AC\ar\x2\x2\x3AC"+
		"\x3D2\x5\x44#\x14\x3AD\x3AE\f\x12\x2\x2\x3AE\x3AF\a\x65\x2\x2\x3AF\x3D2"+
		"\x5\x44#\x13\x3B0\x3B1\f\x11\x2\x2\x3B1\x3B2\a#\x2\x2\x3B2\x3D2\x5\x44"+
		"#\x12\x3B3\x3B4\f\f\x2\x2\x3B4\x3B5\a\x66\x2\x2\x3B5\x3B6\x5\x44#\x2\x3B6"+
		"\x3B7\aS\x2\x2\x3B7\x3B8\x5\x44#\f\x3B8\x3D2\x3\x2\x2\x2\x3B9\x3BA\f\v"+
		"\x2\x2\x3BA\x3BB\t\n\x2\x2\x3BB\x3D2\x5\x44#\v\x3BC\x3BD\f \x2\x2\x3BD"+
		"\x3BE\aT\x2\x2\x3BE\x3D2\x5\x6\x4\x2\x3BF\x3C0\f\x1E\x2\x2\x3C0\x3C1\a"+
		"Y\x2\x2\x3C1\x3D2\x5\x6\x4\x2\x3C2\x3C3\f\x1D\x2\x2\x3C3\x3C4\a`\x2\x2"+
		"\x3C4\x3C5\x5:\x1E\x2\x3C5\x3C6\a\x61\x2\x2\x3C6\x3D2\x3\x2\x2\x2\x3C7"+
		"\x3C8\f\x1C\x2\x2\x3C8\x3C9\a^\x2\x2\x3C9\x3CA\x5:\x1E\x2\x3CA\x3CB\a"+
		"_\x2\x2\x3CB\x3D2\x3\x2\x2\x2\x3CC\x3CD\f\x1B\x2\x2\x3CD\x3D2\a\x66\x2"+
		"\x2\x3CE\x3CF\f\xE\x2\x2\x3CF\x3D0\t\v\x2\x2\x3D0\x3D2\x5 \x11\x2\x3D1"+
		"\x395\x3\x2\x2\x2\x3D1\x398\x3\x2\x2\x2\x3D1\x39B\x3\x2\x2\x2\x3D1\x39E"+
		"\x3\x2\x2\x2\x3D1\x3A1\x3\x2\x2\x2\x3D1\x3A4\x3\x2\x2\x2\x3D1\x3A7\x3"+
		"\x2\x2\x2\x3D1\x3AA\x3\x2\x2\x2\x3D1\x3AD\x3\x2\x2\x2\x3D1\x3B0\x3\x2"+
		"\x2\x2\x3D1\x3B3\x3\x2\x2\x2\x3D1\x3B9\x3\x2\x2\x2\x3D1\x3BC\x3\x2\x2"+
		"\x2\x3D1\x3BF\x3\x2\x2\x2\x3D1\x3C2\x3\x2\x2\x2\x3D1\x3C7\x3\x2\x2\x2"+
		"\x3D1\x3CC\x3\x2\x2\x2\x3D1\x3CE\x3\x2\x2\x2\x3D2\x3D5\x3\x2\x2\x2\x3D3"+
		"\x3D1\x3\x2\x2\x2\x3D3\x3D4\x3\x2\x2\x2\x3D4\x45\x3\x2\x2\x2\x3D5\x3D3"+
		"\x3\x2\x2\x2~IOZ\x61jpx~\x84\x87\x8C\x93\x9B\xA1\xA8\xAC\xB3\xB9\xBE\xC6"+
		"\xCC\xD1\xD7\xDC\xE0\xE8\xEB\xFA\x102\x109\x10D\x110\x118\x127\x12D\x137"+
		"\x142\x149\x14F\x155\x157\x15B\x15F\x168\x16E\x176\x17D\x182\x18A\x194"+
		"\x19C\x1A3\x1A8\x1AE\x1B3\x1B8\x1BB\x1C0\x1C8\x1CE\x1D8\x1DE\x1E3\x1EB"+
		"\x1F1\x1F9\x1FF\x206\x20A\x211\x217\x21D\x225\x22B\x233\x239\x240\x248"+
		"\x24E\x256\x25C\x261\x269\x26F\x277\x27D\x288\x28E\x296\x29C\x2A2\x2A5"+
		"\x2AA\x2B1\x2B6\x2BE\x2C5\x2CA\x2CE\x2D5\x2D9\x2DC\x2DF\x2EF\x2F6\x2FA"+
		"\x300\x305\x313\x31D\x325\x32F\x33D\x346\x34C\x359\x35E\x362\x366\x37D"+
		"\x386\x393\x3D1\x3D3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Parser
