//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Struct=11, Enum=12, New=13, NewPanic=14, NewResult=15, NewPointer=16, 
		NewPointerPanic=17, NewNullablePointer=18, Delete=19, Self=20, Uninitialized=21, 
		Where=22, Base=23, Operator=24, External=25, Var=26, Let=27, Get=28, Set=29, 
		Sealed=30, Override=31, Abstract=32, Params=33, Do=34, While=35, If=36, 
		Else=37, For=38, In=39, Switch=40, Break=41, Continue=42, Return=43, Try=44, 
		TryPanic=45, TryResult=46, Catch=47, Finally=48, Throw=49, Implicit=50, 
		Explicit=51, Conversion=52, As=53, AsPanic=54, AsResult=55, Public=56, 
		Private=57, Protected=58, Internal=59, Safe=60, Unsafe=61, Own=62, Mutable=63, 
		Immutable=64, Copy=65, Move=66, Ref=67, Async=68, Await=69, Requires=70, 
		Ensures=71, Void=72, String=73, ByteType=74, IntType=75, UIntType=76, 
		FloatType=77, SizeType=78, OffsetType=79, UnsafeArrayType=80, Panic=81, 
		ReservedWord=82, BooleanLiteral=83, IntLiteral=84, NullLiteral=85, StringLiteral=86, 
		CharLiteral=87, Semicolon=88, Colon=89, Dot=90, DotDot=91, ColonColon=92, 
		Tilde=93, Comma=94, Lambda=95, LeftBrace=96, RightBrace=97, LeftAngle=98, 
		RightAngle=99, LeftBracket=100, RightBracket=101, LeftParen=102, RightParen=103, 
		Asterisk=104, AtSign=105, AddressOf=106, Coalesce=107, IsNull=108, Equal=109, 
		NotEqual=110, LessThanOrEqual=111, GreaterThanOrEqual=112, TypeList=113, 
		Plus=114, Minus=115, Divide=116, Pipe=117, And=118, Xor=119, Or=120, Not=121, 
		Assign=122, AddAssign=123, SubtractAssign=124, MultiplyAssign=125, DivideAssign=126, 
		AndAssign=127, XorAssign=128, OrAssign=129, PlaceHolder=130, Identifier=131, 
		EscapedIdentifier=132, Unknown=133;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_contract = 5, RULE_attribute = 6, 
		RULE_baseTypes = 7, RULE_accessModifier = 8, RULE_safetyModifier = 9, 
		RULE_classInheritanceModifier = 10, RULE_methodInheritanceModifier = 11, 
		RULE_conversionModifier = 12, RULE_asyncModifier = 13, RULE_typeParameters = 14, 
		RULE_typeParameter = 15, RULE_typeArguments = 16, RULE_identifierOrPredefinedType = 17, 
		RULE_simpleName = 18, RULE_name = 19, RULE_typeName = 20, RULE_valueType = 21, 
		RULE_type = 22, RULE_returnType = 23, RULE_lifetime = 24, RULE_funcTypeParameterList = 25, 
		RULE_funcTypeParameter = 26, RULE_constExpression = 27, RULE_typeParameterConstraintClause = 28, 
		RULE_typeParameterConstraint = 29, RULE_member = 30, RULE_parameterList = 31, 
		RULE_parameter = 32, RULE_parameterModifier = 33, RULE_constructorInitializer = 34, 
		RULE_argumentList = 35, RULE_methodBody = 36, RULE_overloadableOperator = 37, 
		RULE_statement = 38, RULE_localVariableDeclaration = 39, RULE_expression = 40;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"contract", "attribute", "baseTypes", "accessModifier", "safetyModifier", 
		"classInheritanceModifier", "methodInheritanceModifier", "conversionModifier", 
		"asyncModifier", "typeParameters", "typeParameter", "typeArguments", "identifierOrPredefinedType", 
		"simpleName", "name", "typeName", "valueType", "type", "returnType", "lifetime", 
		"funcTypeParameterList", "funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "localVariableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'struct'", "'enum'", "'new'", "'new!'", "'new?'", "'new*'", 
		"'new*!'", "'new*?'", "'delete'", "'self'", "'uninitialized'", "'where'", 
		"'base'", "'operator'", "'external'", "'var'", "'let'", "'get'", "'set'", 
		"'sealed'", "'override'", "'abstract'", "'params'", "'do'", "'while'", 
		"'if'", "'else'", "'for'", "'in'", "'switch'", "'break'", "'continue'", 
		"'return'", "'try'", "'try!'", "'try?'", "'catch'", "'finally'", "'throw'", 
		"'implicit'", "'explicit'", "'conversion'", "'as'", "'as!'", "'as?'", 
		"'public'", "'private'", "'protected'", "'internal'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", "'immut'", "'copy'", "'move'", "'ref'", "'async'", "'await'", 
		"'requires'", "'ensures'", "'void'", "'string'", "'byte'", null, null, 
		null, "'size'", "'offset'", "'UnsafeArray'", "'!'", null, null, null, 
		"'null'", null, null, "';'", "':'", "'.'", "'..'", "'::'", "'~'", "','", 
		"'->'", "'{'", "'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", "'*'", 
		"'@'", "'&'", "'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", 
		"'+'", "'-'", "'/'", "'|'", "'and'", "'xor'", "'or'", "'not'", "'='", 
		"'+='", "'-='", "'*='", "'/='", "'and='", "'xor='", "'or='", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Struct", "Enum", "New", "NewPanic", "NewResult", "NewPointer", 
		"NewPointerPanic", "NewNullablePointer", "Delete", "Self", "Uninitialized", 
		"Where", "Base", "Operator", "External", "Var", "Let", "Get", "Set", "Sealed", 
		"Override", "Abstract", "Params", "Do", "While", "If", "Else", "For", 
		"In", "Switch", "Break", "Continue", "Return", "Try", "TryPanic", "TryResult", 
		"Catch", "Finally", "Throw", "Implicit", "Explicit", "Conversion", "As", 
		"AsPanic", "AsResult", "Public", "Private", "Protected", "Internal", "Safe", 
		"Unsafe", "Own", "Mutable", "Immutable", "Copy", "Move", "Ref", "Async", 
		"Await", "Requires", "Ensures", "Void", "String", "ByteType", "IntType", 
		"UIntType", "FloatType", "SizeType", "OffsetType", "UnsafeArrayType", 
		"Panic", "ReservedWord", "BooleanLiteral", "IntLiteral", "NullLiteral", 
		"StringLiteral", "CharLiteral", "Semicolon", "Colon", "Dot", "DotDot", 
		"ColonColon", "Tilde", "Comma", "Lambda", "LeftBrace", "RightBrace", "LeftAngle", 
		"RightAngle", "LeftBracket", "RightBracket", "LeftParen", "RightParen", 
		"Asterisk", "AtSign", "AddressOf", "Coalesce", "IsNull", "Equal", "NotEqual", 
		"LessThanOrEqual", "GreaterThanOrEqual", "TypeList", "Plus", "Minus", 
		"Divide", "Pipe", "And", "Xor", "Or", "Not", "Assign", "AddAssign", "SubtractAssign", 
		"MultiplyAssign", "DivideAssign", "AndAssign", "XorAssign", "OrAssign", 
		"PlaceHolder", "Identifier", "EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 82; usingDirective();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 88; declaration();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 94; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(Using);
			State = 97; namespaceName();
			State = 98; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 102;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; identifier();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 105; Match(Dot);
				State = 106; identifier();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalDeclarationContext : DeclarationContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ExternalDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDeclarationContext : DeclarationContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public StructDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 258;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; Match(Namespace);
				State = 113; namespaceName();
				State = 114; Match(LeftBrace);
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 115; usingDirective();
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 121; declaration();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 127; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 129; attribute();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 135; accessModifier();
				State = 137;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 136; safetyModifier();
					}
				}

				State = 140;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 139; classInheritanceModifier();
					}
				}

				State = 142; Match(Class);
				State = 143; identifier();
				State = 145;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 144; typeParameters();
					}
				}

				State = 148;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 147; baseTypes();
					}
				}

				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 150; typeParameterConstraintClause();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 156; Match(LeftBrace);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 157; member();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 163; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new StructDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 165; attribute();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 171; accessModifier();
				State = 173;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 172; safetyModifier();
					}
				}

				State = 175;
				((StructDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Copy || _la==Move) ) {
					((StructDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 176; Match(Struct);
				State = 177; identifier();
				State = 179;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 178; typeParameters();
					}
				}

				State = 182;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 181; baseTypes();
					}
				}

				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 184; typeParameterConstraintClause();
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 190; Match(LeftBrace);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 191; member();
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 197; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 199; attribute();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 205; accessModifier();
				State = 206;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 207; identifier();
				State = 210;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 208; Match(Colon);
					State = 209; valueType();
					}
				}

				State = 214;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 212; Match(Assign);
					State = 213; expression(0);
					}
				}

				State = 216; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 218; attribute();
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 224; accessModifier();
				State = 226;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 225; safetyModifier();
					}
				}

				State = 228; identifier();
				State = 230;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 229; typeArguments();
					}
				}

				State = 232; parameterList();
				State = 233; Match(Lambda);
				State = 234; returnType();
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 235; typeParameterConstraintClause();
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 241; contract();
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 247; methodBody();
				}
				break;
			case 6:
				_localctx = new ExternalDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 249; Match(External);
				State = 250; Match(LeftBrace);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << External) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 251; declaration();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 257; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 10, RULE_contract);
		try {
			State = 264;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; Match(Requires);
				State = 261; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; Match(Ensures);
				State = 263; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(EscapedIdentifier);
			State = 269;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 267; Match(LeftParen);
				State = 268; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 271; Match(Colon);
			State = 273;
			_la = TokenStream.La(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
				{
				State = 272; _localctx.baseType = name(0);
				}
			}

			State = 284;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 275; Match(Colon);
				State = 276; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 277; Match(Comma);
					State = 278; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public IToken token;
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_accessModifier);
		try {
			State = 290;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288; _localctx.token = Match(Protected);
				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 289; _localctx.token = Match(Internal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafetyModifierContext : ParserRuleContext {
		public IToken token;
		public SafetyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safetyModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSafetyModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSafetyModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafetyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafetyModifierContext safetyModifier() {
		SafetyModifierContext _localctx = new SafetyModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_safetyModifier);
		try {
			State = 294;
			switch (TokenStream.La(1)) {
			case Safe:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; _localctx.token = Match(Unsafe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public ClassInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritanceModifierContext classInheritanceModifier() {
		ClassInheritanceModifierContext _localctx = new ClassInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_classInheritanceModifier);
		try {
			State = 298;
			switch (TokenStream.La(1)) {
			case Abstract:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; _localctx.token = Match(Abstract);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; _localctx.token = Match(Sealed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public MethodInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInheritanceModifierContext methodInheritanceModifier() {
		MethodInheritanceModifierContext _localctx = new MethodInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodInheritanceModifier);
		try {
			State = 305;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; _localctx.token = Match(Abstract);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; _localctx.token = Match(Override);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302; _localctx.token = Match(Sealed);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 303; _localctx.token = Match(Sealed);
				State = 304; _localctx.token = Match(Override);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionModifierContext : ParserRuleContext {
		public IToken token;
		public ConversionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionModifierContext conversionModifier() {
		ConversionModifierContext _localctx = new ConversionModifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_conversionModifier);
		try {
			State = 309;
			switch (TokenStream.La(1)) {
			case Implicit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; _localctx.token = Match(Explicit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsyncModifierContext : ParserRuleContext {
		public IToken token;
		public AsyncModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asyncModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAsyncModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAsyncModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsyncModifierContext asyncModifier() {
		AsyncModifierContext _localctx = new AsyncModifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_asyncModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; _localctx.token = Match(Async);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(LeftAngle);
			State = 314; typeParameter();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 315; Match(Comma);
				State = 316; typeParameter();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 322; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public TypeNameContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeParameter);
		int _la;
		try {
			State = 333;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; identifier();
				State = 326;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 325; _localctx.isList = Match(TypeList);
					}
				}

				State = 330;
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 328; Match(Colon);
					State = 329; _localctx.baseType = typeName(0);
					}
					break;
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(LeftAngle);
			State = 336; type();
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 337; Match(Comma);
				State = 338; type();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 344; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifierOrPredefinedType);
		try {
			State = 355;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; identifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 349; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 350; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 351; _localctx.token = Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 352; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 353; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 354; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleName);
		try {
			State = 361;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; identifierOrPredefinedType();
				State = 359; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnqualifiedNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public UnqualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnqualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnqualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new UnqualifiedNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 364; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 366;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 367; Match(Dot);
					State = 368; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
	 
		public TypeNameContext() { }
		public virtual void CopyFrom(TypeNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : TypeNameContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : TypeNameContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : TypeNameContext {
		public TypeNameContext _typeName;
		public IList<TypeNameContext> _types = new List<TypeNameContext>();
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public TupleTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : TypeNameContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MaybeTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : TypeNameContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PointerTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			switch (TokenStream.La(1)) {
			case Asterisk:
				{
				_localctx = new PointerTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 375; Match(Asterisk);
				State = 377;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 376; ((PointerTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 379; typeName(3);
				}
				break;
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 380; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 381; Match(LeftBracket);
					State = 382; ((TupleTypeContext)_localctx)._typeName = typeName(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._typeName);
					State = 387;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 383; Match(Comma);
						State = 384; ((TupleTypeContext)_localctx)._typeName = typeName(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._typeName);
						}
						}
						State = 389;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 390; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 392; Match(LeftBracket);
					State = 393; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396; funcTypeParameterList();
				State = 397; Match(Lambda);
				State = 398; returnType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 406;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MaybeTypeContext(new TypeNameContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 402;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 403; Match(IsNull);
					}
					} 
				}
				State = 408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RefTypeContext : ValueTypeContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public RefTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterRefType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitRefType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedTypeContext : ValueTypeContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public OwnedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LifetimeTypeContext : ValueTypeContext {
		public IToken isMut;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public LifetimeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetimeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetimeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetimeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		ValueTypeContext _localctx = new ValueTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_valueType);
		int _la;
		try {
			State = 429;
			switch (TokenStream.La(1)) {
			case Mutable:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new LifetimeTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 409; lifetime();
					}
				}

				State = 413;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 412; ((LifetimeTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 415; typeName(0);
				}
				break;
			case Own:
				_localctx = new OwnedTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; Match(Own);
				State = 418;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 417; ((OwnedTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 420; typeName(0);
				}
				break;
			case Ref:
				_localctx = new RefTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 421; Match(Ref);
				State = 423;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 422; Match(Var);
					}
				}

				State = 426;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 425; ((RefTypeContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 428; typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_type);
		try {
			State = 433;
			switch (TokenStream.La(1)) {
			case Own:
			case Mutable:
			case Ref:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; valueType();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_returnType);
		try {
			State = 437;
			switch (TokenStream.La(1)) {
			case Own:
			case Mutable:
			case Ref:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Tilde:
			case LeftBracket:
			case LeftParen:
			case Asterisk:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435; type();
				}
				break;
			case Panic:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436; Match(Panic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 48, RULE_lifetime);
		try {
			State = 443;
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 439; Match(Tilde);
				State = 440; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441; Match(Tilde);
				State = 442; Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 458;
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; Match(LeftParen);
				State = 446; funcTypeParameter();
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 447; Match(Comma);
					State = 448; funcTypeParameter();
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 454; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456; Match(LeftParen);
				State = 457; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 460; parameterModifier();
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 466; valueType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_constExpression);
		try {
			State = 471;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 469; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 470; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 489;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473; Match(Where);
				State = 474; typeParameter();
				State = 475; Match(Colon);
				State = 476; typeParameterConstraint();
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 477; Match(Comma);
					State = 478; typeParameterConstraint();
					}
					}
					State = 483;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484; Match(Where);
				State = 485; typeParameter();
				State = 486;
				_la = TokenStream.La(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (LeftAngle - 98)) | (1L << (RightAngle - 98)) | (1L << (LessThanOrEqual - 98)) | (1L << (GreaterThanOrEqual - 98)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 487; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeParameterConstraint);
		try {
			State = 496;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; Match(New);
				State = 492; Match(LeftParen);
				State = 493; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 494; typeName(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 495; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ConversionModifierContext conversionModifier() {
			return GetRuleContext<ConversionModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 60, RULE_member);
		int _la;
		try {
			State = 778;
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 498; attribute();
					}
					}
					State = 503;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 504; accessModifier();
				State = 506;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 505; safetyModifier();
					}
				}

				State = 508; Match(New);
				State = 510;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 509; identifier();
					}
				}

				State = 512; parameterList();
				State = 515;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 513; Match(Lambda);
					State = 514; returnType();
					}
				}

				State = 518;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 517; constructorInitializer();
					}
				}

				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 520; contract();
					}
					}
					State = 525;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 526; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 528; attribute();
					}
					}
					State = 533;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 534; accessModifier();
				State = 536;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 535; safetyModifier();
					}
				}

				State = 538; Match(Delete);
				State = 539; parameterList();
				State = 540; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 542; attribute();
					}
					}
					State = 547;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 548; accessModifier();
				State = 550;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 549; safetyModifier();
					}
				}

				State = 552; conversionModifier();
				State = 553; Match(Conversion);
				State = 555;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 554; typeArguments();
					}
				}

				State = 557; parameterList();
				State = 558; Match(Lambda);
				State = 559; returnType();
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 560; typeParameterConstraintClause();
					}
					}
					State = 565;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 566; contract();
					}
					}
					State = 571;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 572; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 574; attribute();
					}
					}
					State = 579;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 580; accessModifier();
				State = 581;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 582; identifier();
				State = 585;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 583; Match(Colon);
					State = 584; valueType();
					}
				}

				State = 589;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 587; Match(Assign);
					State = 588; expression(0);
					}
				}

				State = 591; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 593; attribute();
					}
					}
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 599; accessModifier();
				State = 601;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 600; methodInheritanceModifier();
					}
				}

				State = 604;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 603; safetyModifier();
					}
				}

				State = 607;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 606; asyncModifier();
					}
				}

				State = 609;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 610; identifier();
				State = 612;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 611; typeArguments();
					}
				}

				State = 614; parameterList();
				State = 615; Match(Lambda);
				State = 616; returnType();
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 617; typeParameterConstraintClause();
					}
					}
					State = 622;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 623; contract();
					}
					}
					State = 628;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 629; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 631; attribute();
					}
					}
					State = 636;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 637; accessModifier();
				State = 639;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 638; methodInheritanceModifier();
					}
				}

				State = 642;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 641; safetyModifier();
					}
				}

				State = 645;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 644; asyncModifier();
					}
				}

				State = 647;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 648; Match(LeftBracket);
				State = 649; Match(RightBracket);
				State = 651;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 650; typeArguments();
					}
				}

				State = 653; parameterList();
				State = 654; Match(Lambda);
				State = 655; returnType();
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 656; typeParameterConstraintClause();
					}
					}
					State = 661;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 662; contract();
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 668; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 673;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 670; attribute();
					}
					}
					State = 675;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 676; accessModifier();
				State = 678;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 677; methodInheritanceModifier();
					}
				}

				State = 681;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 680; safetyModifier();
					}
				}

				State = 684;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 683; asyncModifier();
					}
				}

				State = 686; identifier();
				State = 688;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 687; typeArguments();
					}
				}

				State = 690; parameterList();
				State = 691; Match(Lambda);
				State = 692; returnType();
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 693; typeParameterConstraintClause();
					}
					}
					State = 698;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 699; contract();
					}
					}
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 705; methodBody();
				}
				break;
			case 8:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 707; attribute();
					}
					}
					State = 712;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 713; accessModifier();
				State = 715;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 714; methodInheritanceModifier();
					}
				}

				State = 718;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 717; safetyModifier();
					}
				}

				State = 721;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 720; asyncModifier();
					}
				}

				State = 723; Match(Operator);
				State = 724; overloadableOperator();
				State = 725; parameterList();
				State = 726; Match(Lambda);
				State = 727; returnType();
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 728; typeParameterConstraintClause();
					}
					}
					State = 733;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 734; contract();
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 740; methodBody();
				}
				break;
			case 9:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 742; attribute();
					}
					}
					State = 747;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 748; accessModifier();
				State = 750;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 749; safetyModifier();
					}
				}

				State = 753;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 752; classInheritanceModifier();
					}
				}

				State = 755; Match(Class);
				State = 756; identifier();
				State = 758;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 757; typeParameters();
					}
				}

				State = 761;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 760; baseTypes();
					}
				}

				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 763; typeParameterConstraintClause();
					}
					}
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 769; Match(LeftBrace);
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 770; member();
					}
					}
					State = 775;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 776; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 62, RULE_parameterList);
		int _la;
		try {
			State = 793;
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 780; Match(LeftParen);
				State = 781; parameter();
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 782; Match(Comma);
					State = 783; parameter();
					}
					}
					State = 788;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 789; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791; Match(LeftParen);
				State = 792; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public IToken isVar;
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public IToken isOwn;
		public IToken isMut;
		public IToken token;
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameter);
		int _la;
		try {
			State = 816;
			switch (TokenStream.La(1)) {
			case Var:
			case Params:
			case Colon:
			case Identifier:
			case EscapedIdentifier:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 796;
				_la = TokenStream.La(1);
				if (_la==Var) {
					{
					State = 795; ((NamedParameterContext)_localctx).isVar = Match(Var);
					}
				}

				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 798; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 803;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 805;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 804; identifier();
					}
				}

				State = 807; Match(Colon);
				State = 808; valueType();
				}
				break;
			case Self:
			case Own:
			case Mutable:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 809; ((SelfParameterContext)_localctx).isOwn = Match(Own);
					}
				}

				State = 813;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 812; ((SelfParameterContext)_localctx).isMut = Match(Mutable);
					}
				}

				State = 815; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 68, RULE_constructorInitializer);
		try {
			State = 832;
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 820; Match(Colon);
				State = 821; Match(Base);
				State = 822; Match(LeftParen);
				State = 823; argumentList();
				State = 824; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 826; Match(Colon);
				State = 827; Match(Self);
				State = 828; Match(LeftParen);
				State = 829; argumentList();
				State = 830; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 70, RULE_argumentList);
		int _la;
		try {
			State = 843;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case Try:
			case TryPanic:
			case TryResult:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case CharLiteral:
			case LeftParen:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 834; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 839;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 835; Match(Comma);
					State = 836; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 841;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
	 
		public MethodBodyContext() { }
		public virtual void CopyFrom(MethodBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockMethodBodyContext : MethodBodyContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoMethodBodyContext : MethodBodyContext {
		public NoMethodBodyContext(MethodBodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNoMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNoMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 72, RULE_methodBody);
		int _la;
		try {
			State = 854;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				_localctx = new BlockMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 845; Match(LeftBrace);
				State = 849;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (IntLiteral - 73)) | (1L << (NullLiteral - 73)) | (1L << (StringLiteral - 73)) | (1L << (CharLiteral - 73)) | (1L << (Semicolon - 73)) | (1L << (LeftBrace - 73)) | (1L << (LeftParen - 73)) | (1L << (Asterisk - 73)) | (1L << (AddressOf - 73)) | (1L << (Plus - 73)) | (1L << (Minus - 73)) | (1L << (Pipe - 73)) | (1L << (Not - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
					{
					{
					State = 846; ((BlockMethodBodyContext)_localctx)._statement = statement();
					((BlockMethodBodyContext)_localctx)._statements.Add(((BlockMethodBodyContext)_localctx)._statement);
					}
					}
					State = 851;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 852; Match(RightBrace);
				}
				break;
			case Semicolon:
				_localctx = new NoMethodBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 853; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_overloadableOperator);
		try {
			State = 868;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 856; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 857; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 858; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 859; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 860; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 861; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 862; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 863; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 864; Match(LeftBracket);
				State = 865; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 866; Match(Pipe);
				State = 867; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public StatementContext then;
		public StatementContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		int _la;
		try {
			State = 944;
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 870; localVariableDeclaration();
				State = 871; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 873; Match(Unsafe);
				State = 874; Match(LeftBrace);
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (IntLiteral - 73)) | (1L << (NullLiteral - 73)) | (1L << (StringLiteral - 73)) | (1L << (CharLiteral - 73)) | (1L << (Semicolon - 73)) | (1L << (LeftBrace - 73)) | (1L << (LeftParen - 73)) | (1L << (Asterisk - 73)) | (1L << (AddressOf - 73)) | (1L << (Plus - 73)) | (1L << (Minus - 73)) | (1L << (Pipe - 73)) | (1L << (Not - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
					{
					{
					State = 875; statement();
					}
					}
					State = 880;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 881; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 882; Match(LeftBrace);
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (IntLiteral - 73)) | (1L << (NullLiteral - 73)) | (1L << (StringLiteral - 73)) | (1L << (CharLiteral - 73)) | (1L << (Semicolon - 73)) | (1L << (LeftBrace - 73)) | (1L << (LeftParen - 73)) | (1L << (Asterisk - 73)) | (1L << (AddressOf - 73)) | (1L << (Plus - 73)) | (1L << (Minus - 73)) | (1L << (Pipe - 73)) | (1L << (Not - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
					{
					{
					State = 883; statement();
					}
					}
					State = 888;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 889; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 890; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 891; expression(0);
				State = 892; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 894; Match(Return);
				State = 896;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized) | (1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (IntLiteral - 73)) | (1L << (NullLiteral - 73)) | (1L << (StringLiteral - 73)) | (1L << (CharLiteral - 73)) | (1L << (LeftParen - 73)) | (1L << (Asterisk - 73)) | (1L << (AddressOf - 73)) | (1L << (Plus - 73)) | (1L << (Minus - 73)) | (1L << (Pipe - 73)) | (1L << (Not - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
					{
					State = 895; expression(0);
					}
				}

				State = 898; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 899; Match(Throw);
				State = 900; expression(0);
				State = 901; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 903; Match(If);
				State = 904; Match(LeftParen);
				State = 905; ((IfStatementContext)_localctx).condition = expression(0);
				State = 906; Match(RightParen);
				State = 907; ((IfStatementContext)_localctx).then = statement();
				State = 910;
				switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
				case 1:
					{
					State = 908; Match(Else);
					State = 909; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 912; Match(If);
				State = 913; Match(LeftParen);
				State = 914; localVariableDeclaration();
				State = 915; Match(RightParen);
				State = 916; ((LetIfStatementContext)_localctx).then = statement();
				State = 919;
				switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
				case 1:
					{
					State = 917; Match(Else);
					State = 918; ((LetIfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 921; Match(For);
				State = 922; Match(LeftParen);
				State = 925;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 923; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 924; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 927; Match(In);
				State = 928; expression(0);
				State = 929; Match(RightParen);
				State = 930; statement();
				}
				break;
			case 11:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 932; Match(While);
				State = 933; Match(LeftParen);
				State = 934; expression(0);
				State = 935; Match(RightParen);
				State = 936; statement();
				}
				break;
			case 12:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 938; Match(Delete);
				State = 939; expression(0);
				State = 940; Match(Semicolon);
				}
				break;
			case 13:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 942; Match(Continue);
				State = 943; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_localVariableDeclaration);
		int _la;
		try {
			State = 974;
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 946;
				_localctx.kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					_localctx.kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 947; identifier();
				State = 949;
				_la = TokenStream.La(1);
				if (_la==IsNull) {
					{
					State = 948; Match(IsNull);
					}
				}

				State = 951; Match(Colon);
				State = 952; valueType();
				State = 955;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 953; Match(Assign);
					State = 954; expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 957;
				_localctx.kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					_localctx.kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 958; Match(LeftBracket);
				State = 959; identifier();
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 960; Match(Comma);
					State = 961; identifier();
					}
					}
					State = 966;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 967; Match(RightBracket);
				State = 968; Match(Colon);
				State = 969; valueType();
				State = 972;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 970; Match(Assign);
					State = 971; expression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken kind;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 977;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (Asterisk - 104)) | (1L << (AddressOf - 104)) | (1L << (Plus - 104)) | (1L << (Minus - 104)) | (1L << (Not - 104)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 978; expression(25);
				}
				break;
			case 2:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 979;
				((TryExpressionContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 980; expression(12);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 981; Match(LeftParen);
				State = 982; expression(0);
				State = 983; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 985; Match(Pipe);
				State = 986; expression(0);
				State = 987; Match(Pipe);
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 989; Match(New);
				State = 990; name(0);
				State = 991; Match(LeftParen);
				State = 992; argumentList();
				State = 993; Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 995; Match(New);
				State = 997;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 996; baseTypes();
					}
				}

				State = 999; Match(LeftParen);
				State = 1000; argumentList();
				State = 1001; Match(RightParen);
				State = 1002; Match(LeftBrace);
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 1003; member();
					}
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1009; Match(RightBrace);
				}
				break;
			case 7:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 1013;
				switch (TokenStream.La(1)) {
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1011; identifier();
					}
					break;
				case LeftParen:
					{
					State = 1012; parameterList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1015; Match(Lambda);
				State = 1025;
				switch (TokenStream.La(1)) {
				case New:
				case Self:
				case Uninitialized:
				case Try:
				case TryPanic:
				case TryResult:
				case String:
				case ByteType:
				case IntType:
				case UIntType:
				case FloatType:
				case SizeType:
				case OffsetType:
				case UnsafeArrayType:
				case BooleanLiteral:
				case IntLiteral:
				case NullLiteral:
				case StringLiteral:
				case CharLiteral:
				case LeftParen:
				case Asterisk:
				case AddressOf:
				case Plus:
				case Minus:
				case Pipe:
				case Not:
				case Identifier:
				case EscapedIdentifier:
					{
					State = 1016; expression(0);
					}
					break;
				case LeftBrace:
					{
					State = 1017; Match(LeftBrace);
					State = 1021;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << While) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (String - 73)) | (1L << (ByteType - 73)) | (1L << (IntType - 73)) | (1L << (UIntType - 73)) | (1L << (FloatType - 73)) | (1L << (SizeType - 73)) | (1L << (OffsetType - 73)) | (1L << (UnsafeArrayType - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (IntLiteral - 73)) | (1L << (NullLiteral - 73)) | (1L << (StringLiteral - 73)) | (1L << (CharLiteral - 73)) | (1L << (Semicolon - 73)) | (1L << (LeftBrace - 73)) | (1L << (LeftParen - 73)) | (1L << (Asterisk - 73)) | (1L << (AddressOf - 73)) | (1L << (Plus - 73)) | (1L << (Minus - 73)) | (1L << (Pipe - 73)) | (1L << (Not - 73)) | (1L << (Identifier - 73)) | (1L << (EscapedIdentifier - 73)))) != 0)) {
						{
						{
						State = 1018; ((LambdaExpressionContext)_localctx)._statement = statement();
						((LambdaExpressionContext)_localctx)._statements.Add(((LambdaExpressionContext)_localctx)._statement);
						}
						}
						State = 1023;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 1024; Match(RightBrace);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 8:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1027; simpleName();
				}
				break;
			case 9:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1028; Match(NullLiteral);
				}
				break;
			case 10:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1029; Match(Self);
				}
				break;
			case 11:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1030; Match(BooleanLiteral);
				}
				break;
			case 12:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1031; Match(IntLiteral);
				}
				break;
			case 13:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1032; Match(Uninitialized);
				}
				break;
			case 14:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1033; Match(StringLiteral);
				}
				break;
			case 15:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1034; Match(CharLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1096;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1094;
					switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1037;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1038; Match(DotDot);
						State = 1039; expression(30);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1040;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1041;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1042; expression(25);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1043;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1044;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1045; expression(24);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1046;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1047;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (LeftAngle - 98)) | (1L << (RightAngle - 98)) | (1L << (LessThanOrEqual - 98)) | (1L << (GreaterThanOrEqual - 98)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1048; expression(23);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1049;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1050;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1051; ((EqualityExpressionContext)_localctx).rhs = expression(22);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1052;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1053; Match(And);
						State = 1054; expression(21);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1055;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1056; Match(Xor);
						State = 1057; expression(20);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1058;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1059; Match(Or);
						State = 1060; expression(19);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1061;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1062; Match(Coalesce);
						State = 1063; expression(18);
						}
						break;
					case 10:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1064;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1065; Match(In);
						State = 1066; expression(17);
						}
						break;
					case 11:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1067;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1068; Match(IsNull);
						State = 1069; ((IfExpressionContext)_localctx).then = expression(0);
						State = 1070; Match(Colon);
						State = 1071; ((IfExpressionContext)_localctx).@else = expression(11);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1073;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1074;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (Assign - 122)) | (1L << (AddAssign - 122)) | (1L << (SubtractAssign - 122)) | (1L << (MultiplyAssign - 122)) | (1L << (DivideAssign - 122)) | (1L << (AndAssign - 122)) | (1L << (XorAssign - 122)) | (1L << (OrAssign - 122)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1075; ((AssignmentExpressionContext)_localctx).rvalue = expression(10);
						}
						break;
					case 13:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1076;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1077; Match(Dot);
						State = 1078; identifier();
						}
						break;
					case 14:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1079;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1080; Match(LeftParen);
						State = 1081; argumentList();
						State = 1082; Match(RightParen);
						}
						break;
					case 15:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1084;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1085; Match(LeftBracket);
						State = 1086; argumentList();
						State = 1087; Match(RightBracket);
						}
						break;
					case 16:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1089;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1090; Match(IsNull);
						}
						break;
					case 17:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1091;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1092;
						((CastExpressionContext)_localctx).kind = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).kind = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1093; typeName(0);
						}
						break;
					}
					} 
				}
				State = 1098;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return name_sempred((NameContext)_localctx, predIndex);
		case 20: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 40: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 29);
		case 3: return Precpred(Context, 24);
		case 4: return Precpred(Context, 23);
		case 5: return Precpred(Context, 22);
		case 6: return Precpred(Context, 21);
		case 7: return Precpred(Context, 20);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 16);
		case 12: return Precpred(Context, 11);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 30);
		case 15: return Precpred(Context, 28);
		case 16: return Precpred(Context, 27);
		case 17: return Precpred(Context, 26);
		case 18: return Precpred(Context, 13);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x87\x44E\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\a\x2V\n\x2\f\x2\xE\x2Y\v\x2\x3\x2\a\x2\\\n\x2\f\x2\xE\x2_\v\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4i\n\x4\x3\x5\x3"+
		"\x5\x3\x5\a\x5n\n\x5\f\x5\xE\x5q\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6w\n"+
		"\x6\f\x6\xE\x6z\v\x6\x3\x6\a\x6}\n\x6\f\x6\xE\x6\x80\v\x6\x3\x6\x3\x6"+
		"\x3\x6\a\x6\x85\n\x6\f\x6\xE\x6\x88\v\x6\x3\x6\x3\x6\x5\x6\x8C\n\x6\x3"+
		"\x6\x5\x6\x8F\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x94\n\x6\x3\x6\x5\x6\x97\n"+
		"\x6\x3\x6\a\x6\x9A\n\x6\f\x6\xE\x6\x9D\v\x6\x3\x6\x3\x6\a\x6\xA1\n\x6"+
		"\f\x6\xE\x6\xA4\v\x6\x3\x6\x3\x6\x3\x6\a\x6\xA9\n\x6\f\x6\xE\x6\xAC\v"+
		"\x6\x3\x6\x3\x6\x5\x6\xB0\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xB6\n\x6"+
		"\x3\x6\x5\x6\xB9\n\x6\x3\x6\a\x6\xBC\n\x6\f\x6\xE\x6\xBF\v\x6\x3\x6\x3"+
		"\x6\a\x6\xC3\n\x6\f\x6\xE\x6\xC6\v\x6\x3\x6\x3\x6\x3\x6\a\x6\xCB\n\x6"+
		"\f\x6\xE\x6\xCE\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xD5\n\x6\x3\x6"+
		"\x3\x6\x5\x6\xD9\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xDE\n\x6\f\x6\xE\x6\xE1\v"+
		"\x6\x3\x6\x3\x6\x5\x6\xE5\n\x6\x3\x6\x3\x6\x5\x6\xE9\n\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\a\x6\xEF\n\x6\f\x6\xE\x6\xF2\v\x6\x3\x6\a\x6\xF5\n\x6\f\x6"+
		"\xE\x6\xF8\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xFF\n\x6\f\x6\xE\x6"+
		"\x102\v\x6\x3\x6\x5\x6\x105\n\x6\x3\a\x3\a\x3\a\x3\a\x5\a\x10B\n\a\x3"+
		"\b\x3\b\x3\b\x5\b\x110\n\b\x3\t\x3\t\x5\t\x114\n\t\x3\t\x3\t\x3\t\x3\t"+
		"\a\t\x11A\n\t\f\t\xE\t\x11D\v\t\x5\t\x11F\n\t\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x125\n\n\x3\v\x3\v\x5\v\x129\n\v\x3\f\x3\f\x5\f\x12D\n\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x5\r\x134\n\r\x3\xE\x3\xE\x5\xE\x138\n\xE\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\x140\n\x10\f\x10\xE\x10\x143\v\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x5\x11\x149\n\x11\x3\x11\x3\x11\x5\x11\x14D"+
		"\n\x11\x3\x11\x5\x11\x150\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x156"+
		"\n\x12\f\x12\xE\x12\x159\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x166\n\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x5\x14\x16C\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\a\x15\x174\n\x15\f\x15\xE\x15\x177\v\x15\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x17C\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x184\n\x16"+
		"\f\x16\xE\x16\x187\v\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x18D\n\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x193\n\x16\x3\x16\x3\x16\a\x16\x197"+
		"\n\x16\f\x16\xE\x16\x19A\v\x16\x3\x17\x5\x17\x19D\n\x17\x3\x17\x5\x17"+
		"\x1A0\n\x17\x3\x17\x3\x17\x3\x17\x5\x17\x1A5\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x5\x17\x1AA\n\x17\x3\x17\x5\x17\x1AD\n\x17\x3\x17\x5\x17\x1B0\n\x17\x3"+
		"\x18\x3\x18\x5\x18\x1B4\n\x18\x3\x19\x3\x19\x5\x19\x1B8\n\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x1BE\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B"+
		"\x1C4\n\x1B\f\x1B\xE\x1B\x1C7\v\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x1CD\n\x1B\x3\x1C\a\x1C\x1D0\n\x1C\f\x1C\xE\x1C\x1D3\v\x1C\x3\x1C\x3"+
		"\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x1DA\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\a\x1E\x1E2\n\x1E\f\x1E\xE\x1E\x1E5\v\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1EC\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x1F3\n\x1F\x3 \a \x1F6\n \f \xE \x1F9\v \x3 \x3 \x5 \x1FD"+
		"\n \x3 \x3 \x5 \x201\n \x3 \x3 \x3 \x5 \x206\n \x3 \x5 \x209\n \x3 \a"+
		" \x20C\n \f \xE \x20F\v \x3 \x3 \x3 \a \x214\n \f \xE \x217\v \x3 \x3"+
		" \x5 \x21B\n \x3 \x3 \x3 \x3 \x3 \a \x222\n \f \xE \x225\v \x3 \x3 \x5"+
		" \x229\n \x3 \x3 \x3 \x5 \x22E\n \x3 \x3 \x3 \x3 \a \x234\n \f \xE \x237"+
		"\v \x3 \a \x23A\n \f \xE \x23D\v \x3 \x3 \x3 \a \x242\n \f \xE \x245\v"+
		" \x3 \x3 \x3 \x3 \x3 \x5 \x24C\n \x3 \x3 \x5 \x250\n \x3 \x3 \x3 \a \x255"+
		"\n \f \xE \x258\v \x3 \x3 \x5 \x25C\n \x3 \x5 \x25F\n \x3 \x5 \x262\n"+
		" \x3 \x3 \x3 \x5 \x267\n \x3 \x3 \x3 \x3 \a \x26D\n \f \xE \x270\v \x3"+
		" \a \x273\n \f \xE \x276\v \x3 \x3 \x3 \a \x27B\n \f \xE \x27E\v \x3 "+
		"\x3 \x5 \x282\n \x3 \x5 \x285\n \x3 \x5 \x288\n \x3 \x3 \x3 \x3 \x5 \x28E"+
		"\n \x3 \x3 \x3 \x3 \a \x294\n \f \xE \x297\v \x3 \a \x29A\n \f \xE \x29D"+
		"\v \x3 \x3 \x3 \a \x2A2\n \f \xE \x2A5\v \x3 \x3 \x5 \x2A9\n \x3 \x5 "+
		"\x2AC\n \x3 \x5 \x2AF\n \x3 \x3 \x5 \x2B3\n \x3 \x3 \x3 \x3 \a \x2B9\n"+
		" \f \xE \x2BC\v \x3 \a \x2BF\n \f \xE \x2C2\v \x3 \x3 \x3 \a \x2C7\n "+
		"\f \xE \x2CA\v \x3 \x3 \x5 \x2CE\n \x3 \x5 \x2D1\n \x3 \x5 \x2D4\n \x3"+
		" \x3 \x3 \x3 \x3 \x3 \a \x2DC\n \f \xE \x2DF\v \x3 \a \x2E2\n \f \xE "+
		"\x2E5\v \x3 \x3 \x3 \a \x2EA\n \f \xE \x2ED\v \x3 \x3 \x5 \x2F1\n \x3"+
		" \x5 \x2F4\n \x3 \x3 \x3 \x5 \x2F9\n \x3 \x5 \x2FC\n \x3 \a \x2FF\n \f"+
		" \xE \x302\v \x3 \x3 \a \x306\n \f \xE \x309\v \x3 \x3 \x5 \x30D\n \x3"+
		"!\x3!\x3!\x3!\a!\x313\n!\f!\xE!\x316\v!\x3!\x3!\x3!\x3!\x5!\x31C\n!\x3"+
		"\"\x5\"\x31F\n\"\x3\"\a\"\x322\n\"\f\"\xE\"\x325\v\"\x3\"\x5\"\x328\n"+
		"\"\x3\"\x3\"\x3\"\x5\"\x32D\n\"\x3\"\x5\"\x330\n\"\x3\"\x5\"\x333\n\""+
		"\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x343\n$\x3"+
		"%\x3%\x3%\a%\x348\n%\f%\xE%\x34B\v%\x3%\x5%\x34E\n%\x3&\x3&\a&\x352\n"+
		"&\f&\xE&\x355\v&\x3&\x3&\x5&\x359\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x367\n\'\x3(\x3(\x3(\x3(\x3(\x3(\a(\x36F"+
		"\n(\f(\xE(\x372\v(\x3(\x3(\x3(\a(\x377\n(\f(\xE(\x37A\v(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x5(\x383\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3(\x5(\x391\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x39A\n(\x3(\x3(\x3(\x3"+
		"(\x5(\x3A0\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x5(\x3B3\n(\x3)\x3)\x3)\x5)\x3B8\n)\x3)\x3)\x3)\x3)\x5)\x3BE"+
		"\n)\x3)\x3)\x3)\x3)\x3)\a)\x3C5\n)\f)\xE)\x3C8\v)\x3)\x3)\x3)\x3)\x3)"+
		"\x5)\x3CF\n)\x5)\x3D1\n)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3E8\n*\x3*\x3*\x3*\x3*\x3*"+
		"\a*\x3EF\n*\f*\xE*\x3F2\v*\x3*\x3*\x3*\x3*\x5*\x3F8\n*\x3*\x3*\x3*\x3"+
		"*\a*\x3FE\n*\f*\xE*\x401\v*\x3*\x5*\x404\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x5*\x40E\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\a*\x449\n*\f*\xE*\x44C\v*\x3*\x2"+
		"\x5(*R+\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30"+
		"\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPR\x2\r\x3\x2\x43\x44\x3\x2\x1C\x1D"+
		"\x4\x2\x64\x65qr\x3\x2\x1E\x1F\x6\x2jjlltu{{\x3\x2.\x30\x4\x2jjvv\x3\x2"+
		"tu\x3\x2op\x3\x2|\x83\x3\x2\x37\x39\x507\x2W\x3\x2\x2\x2\x4\x62\x3\x2"+
		"\x2\x2\x6h\x3\x2\x2\x2\bj\x3\x2\x2\x2\n\x104\x3\x2\x2\x2\f\x10A\x3\x2"+
		"\x2\x2\xE\x10C\x3\x2\x2\x2\x10\x111\x3\x2\x2\x2\x12\x124\x3\x2\x2\x2\x14"+
		"\x128\x3\x2\x2\x2\x16\x12C\x3\x2\x2\x2\x18\x133\x3\x2\x2\x2\x1A\x137\x3"+
		"\x2\x2\x2\x1C\x139\x3\x2\x2\x2\x1E\x13B\x3\x2\x2\x2 \x14F\x3\x2\x2\x2"+
		"\"\x151\x3\x2\x2\x2$\x165\x3\x2\x2\x2&\x16B\x3\x2\x2\x2(\x16D\x3\x2\x2"+
		"\x2*\x192\x3\x2\x2\x2,\x1AF\x3\x2\x2\x2.\x1B3\x3\x2\x2\x2\x30\x1B7\x3"+
		"\x2\x2\x2\x32\x1BD\x3\x2\x2\x2\x34\x1CC\x3\x2\x2\x2\x36\x1D1\x3\x2\x2"+
		"\x2\x38\x1D9\x3\x2\x2\x2:\x1EB\x3\x2\x2\x2<\x1F2\x3\x2\x2\x2>\x30C\x3"+
		"\x2\x2\x2@\x31B\x3\x2\x2\x2\x42\x332\x3\x2\x2\x2\x44\x334\x3\x2\x2\x2"+
		"\x46\x342\x3\x2\x2\x2H\x34D\x3\x2\x2\x2J\x358\x3\x2\x2\x2L\x366\x3\x2"+
		"\x2\x2N\x3B2\x3\x2\x2\x2P\x3D0\x3\x2\x2\x2R\x40D\x3\x2\x2\x2TV\x5\x4\x3"+
		"\x2UT\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2X]\x3\x2\x2"+
		"\x2YW\x3\x2\x2\x2Z\\\x5\n\x6\x2[Z\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2"+
		"\x2]^\x3\x2\x2\x2^`\x3\x2\x2\x2_]\x3\x2\x2\x2`\x61\a\x2\x2\x3\x61\x3\x3"+
		"\x2\x2\x2\x62\x63\a\n\x2\x2\x63\x64\x5\b\x5\x2\x64\x65\aZ\x2\x2\x65\x5"+
		"\x3\x2\x2\x2\x66i\a\x85\x2\x2gi\a\x86\x2\x2h\x66\x3\x2\x2\x2hg\x3\x2\x2"+
		"\x2i\a\x3\x2\x2\x2jo\x5\x6\x4\x2kl\a\\\x2\x2ln\x5\x6\x4\x2mk\x3\x2\x2"+
		"\x2nq\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2p\t\x3\x2\x2\x2qo\x3\x2\x2"+
		"\x2rs\a\v\x2\x2st\x5\b\x5\x2tx\a\x62\x2\x2uw\x5\x4\x3\x2vu\x3\x2\x2\x2"+
		"wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y~\x3\x2\x2\x2zx\x3\x2\x2\x2"+
		"{}\x5\n\x6\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2"+
		"\x2\x2\x7F\x81\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x82\a\x63\x2\x2\x82\x105"+
		"\x3\x2\x2\x2\x83\x85\x5\xE\b\x2\x84\x83\x3\x2\x2\x2\x85\x88\x3\x2\x2\x2"+
		"\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x89\x3\x2\x2\x2\x88\x86\x3"+
		"\x2\x2\x2\x89\x8B\x5\x12\n\x2\x8A\x8C\x5\x14\v\x2\x8B\x8A\x3\x2\x2\x2"+
		"\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2\x8D\x8F\x5\x16\f\x2\x8E\x8D\x3"+
		"\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\a\f\x2\x2\x91"+
		"\x93\x5\x6\x4\x2\x92\x94\x5\x1E\x10\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3"+
		"\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x97\x5\x10\t\x2\x96\x95\x3\x2\x2\x2"+
		"\x96\x97\x3\x2\x2\x2\x97\x9B\x3\x2\x2\x2\x98\x9A\x5:\x1E\x2\x99\x98\x3"+
		"\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2"+
		"\x9C\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA2\a\x62\x2\x2\x9F\xA1\x5"+
		"> \x2\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2"+
		"\xA3\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA5\xA6\a\x63"+
		"\x2\x2\xA6\x105\x3\x2\x2\x2\xA7\xA9\x5\xE\b\x2\xA8\xA7\x3\x2\x2\x2\xA9"+
		"\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAD\x3\x2"+
		"\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAF\x5\x12\n\x2\xAE\xB0\x5\x14\v\x2\xAF"+
		"\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\t\x2"+
		"\x2\x2\xB2\xB3\a\r\x2\x2\xB3\xB5\x5\x6\x4\x2\xB4\xB6\x5\x1E\x10\x2\xB5"+
		"\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB9\x5\x10"+
		"\t\x2\xB8\xB7\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBD\x3\x2\x2\x2\xBA"+
		"\xBC\x5:\x1E\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2"+
		"\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0"+
		"\xC4\a\x62\x2\x2\xC1\xC3\x5> \x2\xC2\xC1\x3\x2\x2\x2\xC3\xC6\x3\x2\x2"+
		"\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6\xC4"+
		"\x3\x2\x2\x2\xC7\xC8\a\x63\x2\x2\xC8\x105\x3\x2\x2\x2\xC9\xCB\x5\xE\b"+
		"\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD"+
		"\x3\x2\x2\x2\xCD\xCF\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD0\x5\x12\n"+
		"\x2\xD0\xD1\t\x3\x2\x2\xD1\xD4\x5\x6\x4\x2\xD2\xD3\a[\x2\x2\xD3\xD5\x5"+
		",\x17\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6"+
		"\xD7\a|\x2\x2\xD7\xD9\x5R*\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2"+
		"\xD9\xDA\x3\x2\x2\x2\xDA\xDB\aZ\x2\x2\xDB\x105\x3\x2\x2\x2\xDC\xDE\x5"+
		"\xE\b\x2\xDD\xDC\x3\x2\x2\x2\xDE\xE1\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF"+
		"\xE0\x3\x2\x2\x2\xE0\xE2\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE2\xE4\x5\x12"+
		"\n\x2\xE3\xE5\x5\x14\v\x2\xE4\xE3\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5"+
		"\xE6\x3\x2\x2\x2\xE6\xE8\x5\x6\x4\x2\xE7\xE9\x5\"\x12\x2\xE8\xE7\x3\x2"+
		"\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEB\x5@!\x2\xEB\xEC"+
		"\a\x61\x2\x2\xEC\xF0\x5\x30\x19\x2\xED\xEF\x5:\x1E\x2\xEE\xED\x3\x2\x2"+
		"\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF6"+
		"\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF5\x5\f\a\x2\xF4\xF3\x3\x2\x2\x2"+
		"\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9\x3"+
		"\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFA\x5J&\x2\xFA\x105\x3\x2\x2\x2\xFB"+
		"\xFC\a\x1B\x2\x2\xFC\x100\a\x62\x2\x2\xFD\xFF\x5\n\x6\x2\xFE\xFD\x3\x2"+
		"\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2"+
		"\x101\x103\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x105\a\x63\x2\x2\x104"+
		"r\x3\x2\x2\x2\x104\x86\x3\x2\x2\x2\x104\xAA\x3\x2\x2\x2\x104\xCC\x3\x2"+
		"\x2\x2\x104\xDF\x3\x2\x2\x2\x104\xFB\x3\x2\x2\x2\x105\v\x3\x2\x2\x2\x106"+
		"\x107\aH\x2\x2\x107\x10B\x5R*\x2\x108\x109\aI\x2\x2\x109\x10B\x5R*\x2"+
		"\x10A\x106\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\r\x3\x2\x2\x2\x10C\x10F"+
		"\a\x86\x2\x2\x10D\x10E\ah\x2\x2\x10E\x110\ai\x2\x2\x10F\x10D\x3\x2\x2"+
		"\x2\x10F\x110\x3\x2\x2\x2\x110\xF\x3\x2\x2\x2\x111\x113\a[\x2\x2\x112"+
		"\x114\x5(\x15\x2\x113\x112\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x11E"+
		"\x3\x2\x2\x2\x115\x116\a[\x2\x2\x116\x11B\x5(\x15\x2\x117\x118\a`\x2\x2"+
		"\x118\x11A\x5(\x15\x2\x119\x117\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B"+
		"\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B"+
		"\x3\x2\x2\x2\x11E\x115\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x11\x3\x2"+
		"\x2\x2\x120\x125\a:\x2\x2\x121\x125\a;\x2\x2\x122\x125\a<\x2\x2\x123\x125"+
		"\a=\x2\x2\x124\x120\x3\x2\x2\x2\x124\x121\x3\x2\x2\x2\x124\x122\x3\x2"+
		"\x2\x2\x124\x123\x3\x2\x2\x2\x125\x13\x3\x2\x2\x2\x126\x129\a>\x2\x2\x127"+
		"\x129\a?\x2\x2\x128\x126\x3\x2\x2\x2\x128\x127\x3\x2\x2\x2\x129\x15\x3"+
		"\x2\x2\x2\x12A\x12D\a\"\x2\x2\x12B\x12D\a \x2\x2\x12C\x12A\x3\x2\x2\x2"+
		"\x12C\x12B\x3\x2\x2\x2\x12D\x17\x3\x2\x2\x2\x12E\x134\a\"\x2\x2\x12F\x134"+
		"\a!\x2\x2\x130\x134\a \x2\x2\x131\x132\a \x2\x2\x132\x134\a!\x2\x2\x133"+
		"\x12E\x3\x2\x2\x2\x133\x12F\x3\x2\x2\x2\x133\x130\x3\x2\x2\x2\x133\x131"+
		"\x3\x2\x2\x2\x134\x19\x3\x2\x2\x2\x135\x138\a\x34\x2\x2\x136\x138\a\x35"+
		"\x2\x2\x137\x135\x3\x2\x2\x2\x137\x136\x3\x2\x2\x2\x138\x1B\x3\x2\x2\x2"+
		"\x139\x13A\a\x46\x2\x2\x13A\x1D\x3\x2\x2\x2\x13B\x13C\a\x64\x2\x2\x13C"+
		"\x141\x5 \x11\x2\x13D\x13E\a`\x2\x2\x13E\x140\x5 \x11\x2\x13F\x13D\x3"+
		"\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x141\x142\x3\x2"+
		"\x2\x2\x142\x144\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x144\x145\a\x65\x2"+
		"\x2\x145\x1F\x3\x2\x2\x2\x146\x148\x5\x6\x4\x2\x147\x149\as\x2\x2\x148"+
		"\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x14B"+
		"\a[\x2\x2\x14B\x14D\x5*\x16\x2\x14C\x14A\x3\x2\x2\x2\x14C\x14D\x3\x2\x2"+
		"\x2\x14D\x150\x3\x2\x2\x2\x14E\x150\x5\x32\x1A\x2\x14F\x146\x3\x2\x2\x2"+
		"\x14F\x14E\x3\x2\x2\x2\x150!\x3\x2\x2\x2\x151\x152\a\x64\x2\x2\x152\x157"+
		"\x5.\x18\x2\x153\x154\a`\x2\x2\x154\x156\x5.\x18\x2\x155\x153\x3\x2\x2"+
		"\x2\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2"+
		"\x158\x15A\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15B\a\x65\x2\x2\x15B"+
		"#\x3\x2\x2\x2\x15C\x166\x5\x6\x4\x2\x15D\x166\aK\x2\x2\x15E\x166\aL\x2"+
		"\x2\x15F\x166\aM\x2\x2\x160\x166\aN\x2\x2\x161\x166\aO\x2\x2\x162\x166"+
		"\aP\x2\x2\x163\x166\aQ\x2\x2\x164\x166\aR\x2\x2\x165\x15C\x3\x2\x2\x2"+
		"\x165\x15D\x3\x2\x2\x2\x165\x15E\x3\x2\x2\x2\x165\x15F\x3\x2\x2\x2\x165"+
		"\x160\x3\x2\x2\x2\x165\x161\x3\x2\x2\x2\x165\x162\x3\x2\x2\x2\x165\x163"+
		"\x3\x2\x2\x2\x165\x164\x3\x2\x2\x2\x166%\x3\x2\x2\x2\x167\x16C\x5$\x13"+
		"\x2\x168\x169\x5$\x13\x2\x169\x16A\x5\"\x12\x2\x16A\x16C\x3\x2\x2\x2\x16B"+
		"\x167\x3\x2\x2\x2\x16B\x168\x3\x2\x2\x2\x16C\'\x3\x2\x2\x2\x16D\x16E\b"+
		"\x15\x1\x2\x16E\x16F\x5&\x14\x2\x16F\x175\x3\x2\x2\x2\x170\x171\f\x3\x2"+
		"\x2\x171\x172\a\\\x2\x2\x172\x174\x5&\x14\x2\x173\x170\x3\x2\x2\x2\x174"+
		"\x177\x3\x2\x2\x2\x175\x173\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176)\x3"+
		"\x2\x2\x2\x177\x175\x3\x2\x2\x2\x178\x179\b\x16\x1\x2\x179\x17B\aj\x2"+
		"\x2\x17A\x17C\a\x41\x2\x2\x17B\x17A\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2"+
		"\x17C\x17D\x3\x2\x2\x2\x17D\x193\x5*\x16\x5\x17E\x193\x5(\x15\x2\x17F"+
		"\x180\a\x66\x2\x2\x180\x185\x5*\x16\x2\x181\x182\a`\x2\x2\x182\x184\x5"+
		"*\x16\x2\x183\x181\x3\x2\x2\x2\x184\x187\x3\x2\x2\x2\x185\x183\x3\x2\x2"+
		"\x2\x185\x186\x3\x2\x2\x2\x186\x188\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2"+
		"\x188\x189\ag\x2\x2\x189\x18D\x3\x2\x2\x2\x18A\x18B\a\x66\x2\x2\x18B\x18D"+
		"\ag\x2\x2\x18C\x17F\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18D\x193\x3\x2"+
		"\x2\x2\x18E\x18F\x5\x34\x1B\x2\x18F\x190\a\x61\x2\x2\x190\x191\x5\x30"+
		"\x19\x2\x191\x193\x3\x2\x2\x2\x192\x178\x3\x2\x2\x2\x192\x17E\x3\x2\x2"+
		"\x2\x192\x18C\x3\x2\x2\x2\x192\x18E\x3\x2\x2\x2\x193\x198\x3\x2\x2\x2"+
		"\x194\x195\f\x6\x2\x2\x195\x197\an\x2\x2\x196\x194\x3\x2\x2\x2\x197\x19A"+
		"\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199+\x3\x2\x2"+
		"\x2\x19A\x198\x3\x2\x2\x2\x19B\x19D\x5\x32\x1A\x2\x19C\x19B\x3\x2\x2\x2"+
		"\x19C\x19D\x3\x2\x2\x2\x19D\x19F\x3\x2\x2\x2\x19E\x1A0\a\x41\x2\x2\x19F"+
		"\x19E\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1B0"+
		"\x5*\x16\x2\x1A2\x1A4\a@\x2\x2\x1A3\x1A5\a\x41\x2\x2\x1A4\x1A3\x3\x2\x2"+
		"\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1B0\x5*\x16\x2\x1A7"+
		"\x1A9\a\x45\x2\x2\x1A8\x1AA\a\x1C\x2\x2\x1A9\x1A8\x3\x2\x2\x2\x1A9\x1AA"+
		"\x3\x2\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1AD\a\x41\x2\x2\x1AC\x1AB\x3"+
		"\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1B0\x5*\x16"+
		"\x2\x1AF\x19C\x3\x2\x2\x2\x1AF\x1A2\x3\x2\x2\x2\x1AF\x1A7\x3\x2\x2\x2"+
		"\x1B0-\x3\x2\x2\x2\x1B1\x1B4\x5,\x17\x2\x1B2\x1B4\aJ\x2\x2\x1B3\x1B1\x3"+
		"\x2\x2\x2\x1B3\x1B2\x3\x2\x2\x2\x1B4/\x3\x2\x2\x2\x1B5\x1B8\x5.\x18\x2"+
		"\x1B6\x1B8\aS\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B6\x3\x2\x2\x2\x1B8\x31"+
		"\x3\x2\x2\x2\x1B9\x1BA\a_\x2\x2\x1BA\x1BE\x5\x6\x4\x2\x1BB\x1BC\a_\x2"+
		"\x2\x1BC\x1BE\a\x16\x2\x2\x1BD\x1B9\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2"+
		"\x1BE\x33\x3\x2\x2\x2\x1BF\x1C0\ah\x2\x2\x1C0\x1C5\x5\x36\x1C\x2\x1C1"+
		"\x1C2\a`\x2\x2\x1C2\x1C4\x5\x36\x1C\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C7"+
		"\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C8\x3"+
		"\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C8\x1C9\ai\x2\x2\x1C9\x1CD\x3\x2\x2"+
		"\x2\x1CA\x1CB\ah\x2\x2\x1CB\x1CD\ai\x2\x2\x1CC\x1BF\x3\x2\x2\x2\x1CC\x1CA"+
		"\x3\x2\x2\x2\x1CD\x35\x3\x2\x2\x2\x1CE\x1D0\x5\x44#\x2\x1CF\x1CE\x3\x2"+
		"\x2\x2\x1D0\x1D3\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2"+
		"\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D4\x1D5\x5,\x17\x2\x1D5"+
		"\x37\x3\x2\x2\x2\x1D6\x1DA\aV\x2\x2\x1D7\x1DA\aX\x2\x2\x1D8\x1DA\x5\x6"+
		"\x4\x2\x1D9\x1D6\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1D8\x3\x2\x2"+
		"\x2\x1DA\x39\x3\x2\x2\x2\x1DB\x1DC\a\x18\x2\x2\x1DC\x1DD\x5 \x11\x2\x1DD"+
		"\x1DE\a[\x2\x2\x1DE\x1E3\x5<\x1F\x2\x1DF\x1E0\a`\x2\x2\x1E0\x1E2\x5<\x1F"+
		"\x2\x1E1\x1DF\x3\x2\x2\x2\x1E2\x1E5\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2"+
		"\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1EC\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E6"+
		"\x1E7\a\x18\x2\x2\x1E7\x1E8\x5 \x11\x2\x1E8\x1E9\t\x4\x2\x2\x1E9\x1EA"+
		"\aV\x2\x2\x1EA\x1EC\x3\x2\x2\x2\x1EB\x1DB\x3\x2\x2\x2\x1EB\x1E6\x3\x2"+
		"\x2\x2\x1EC;\x3\x2\x2\x2\x1ED\x1EE\a\xF\x2\x2\x1EE\x1EF\ah\x2\x2\x1EF"+
		"\x1F3\ai\x2\x2\x1F0\x1F3\x5*\x16\x2\x1F1\x1F3\x5 \x11\x2\x1F2\x1ED\x3"+
		"\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2\x1F2\x1F1\x3\x2\x2\x2\x1F3=\x3\x2\x2\x2"+
		"\x1F4\x1F6\x5\xE\b\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6\x1F9\x3\x2\x2\x2\x1F7"+
		"\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1F7"+
		"\x3\x2\x2\x2\x1FA\x1FC\x5\x12\n\x2\x1FB\x1FD\x5\x14\v\x2\x1FC\x1FB\x3"+
		"\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x200\a\xF\x2"+
		"\x2\x1FF\x201\x5\x6\x4\x2\x200\x1FF\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2"+
		"\x201\x202\x3\x2\x2\x2\x202\x205\x5@!\x2\x203\x204\a\x61\x2\x2\x204\x206"+
		"\x5\x30\x19\x2\x205\x203\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x208\x3"+
		"\x2\x2\x2\x207\x209\x5\x46$\x2\x208\x207\x3\x2\x2\x2\x208\x209\x3\x2\x2"+
		"\x2\x209\x20D\x3\x2\x2\x2\x20A\x20C\x5\f\a\x2\x20B\x20A\x3\x2\x2\x2\x20C"+
		"\x20F\x3\x2\x2\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x210"+
		"\x3\x2\x2\x2\x20F\x20D\x3\x2\x2\x2\x210\x211\x5J&\x2\x211\x30D\x3\x2\x2"+
		"\x2\x212\x214\x5\xE\b\x2\x213\x212\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215"+
		"\x213\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x218\x3\x2\x2\x2\x217\x215"+
		"\x3\x2\x2\x2\x218\x21A\x5\x12\n\x2\x219\x21B\x5\x14\v\x2\x21A\x219\x3"+
		"\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C\x21D\a\x15"+
		"\x2\x2\x21D\x21E\x5@!\x2\x21E\x21F\x5J&\x2\x21F\x30D\x3\x2\x2\x2\x220"+
		"\x222\x5\xE\b\x2\x221\x220\x3\x2\x2\x2\x222\x225\x3\x2\x2\x2\x223\x221"+
		"\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x226\x3\x2\x2\x2\x225\x223\x3"+
		"\x2\x2\x2\x226\x228\x5\x12\n\x2\x227\x229\x5\x14\v\x2\x228\x227\x3\x2"+
		"\x2\x2\x228\x229\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22B\x5\x1A\xE"+
		"\x2\x22B\x22D\a\x36\x2\x2\x22C\x22E\x5\"\x12\x2\x22D\x22C\x3\x2\x2\x2"+
		"\x22D\x22E\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x230\x5@!\x2\x230\x231"+
		"\a\x61\x2\x2\x231\x235\x5\x30\x19\x2\x232\x234\x5:\x1E\x2\x233\x232\x3"+
		"\x2\x2\x2\x234\x237\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2\x235\x236\x3\x2"+
		"\x2\x2\x236\x23B\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238\x23A\x5\f\a\x2"+
		"\x239\x238\x3\x2\x2\x2\x23A\x23D\x3\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23B"+
		"\x23C\x3\x2\x2\x2\x23C\x23E\x3\x2\x2\x2\x23D\x23B\x3\x2\x2\x2\x23E\x23F"+
		"\x5J&\x2\x23F\x30D\x3\x2\x2\x2\x240\x242\x5\xE\b\x2\x241\x240\x3\x2\x2"+
		"\x2\x242\x245\x3\x2\x2\x2\x243\x241\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2"+
		"\x244\x246\x3\x2\x2\x2\x245\x243\x3\x2\x2\x2\x246\x247\x5\x12\n\x2\x247"+
		"\x248\t\x3\x2\x2\x248\x24B\x5\x6\x4\x2\x249\x24A\a[\x2\x2\x24A\x24C\x5"+
		",\x17\x2\x24B\x249\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24F\x3\x2\x2"+
		"\x2\x24D\x24E\a|\x2\x2\x24E\x250\x5R*\x2\x24F\x24D\x3\x2\x2\x2\x24F\x250"+
		"\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x252\aZ\x2\x2\x252\x30D\x3\x2"+
		"\x2\x2\x253\x255\x5\xE\b\x2\x254\x253\x3\x2\x2\x2\x255\x258\x3\x2\x2\x2"+
		"\x256\x254\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257\x259\x3\x2\x2\x2\x258"+
		"\x256\x3\x2\x2\x2\x259\x25B\x5\x12\n\x2\x25A\x25C\x5\x18\r\x2\x25B\x25A"+
		"\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25E\x3\x2\x2\x2\x25D\x25F\x5"+
		"\x14\v\x2\x25E\x25D\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x261\x3\x2"+
		"\x2\x2\x260\x262\x5\x1C\xF\x2\x261\x260\x3\x2\x2\x2\x261\x262\x3\x2\x2"+
		"\x2\x262\x263\x3\x2\x2\x2\x263\x264\t\x5\x2\x2\x264\x266\x5\x6\x4\x2\x265"+
		"\x267\x5\"\x12\x2\x266\x265\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x268"+
		"\x3\x2\x2\x2\x268\x269\x5@!\x2\x269\x26A\a\x61\x2\x2\x26A\x26E\x5\x30"+
		"\x19\x2\x26B\x26D\x5:\x1E\x2\x26C\x26B\x3\x2\x2\x2\x26D\x270\x3\x2\x2"+
		"\x2\x26E\x26C\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x274\x3\x2\x2\x2"+
		"\x270\x26E\x3\x2\x2\x2\x271\x273\x5\f\a\x2\x272\x271\x3\x2\x2\x2\x273"+
		"\x276\x3\x2\x2\x2\x274\x272\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x277"+
		"\x3\x2\x2\x2\x276\x274\x3\x2\x2\x2\x277\x278\x5J&\x2\x278\x30D\x3\x2\x2"+
		"\x2\x279\x27B\x5\xE\b\x2\x27A\x279\x3\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C"+
		"\x27A\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27F\x3\x2\x2\x2\x27E\x27C"+
		"\x3\x2\x2\x2\x27F\x281\x5\x12\n\x2\x280\x282\x5\x18\r\x2\x281\x280\x3"+
		"\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x284\x3\x2\x2\x2\x283\x285\x5\x14"+
		"\v\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x287\x3\x2\x2\x2"+
		"\x286\x288\x5\x1C\xF\x2\x287\x286\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288"+
		"\x289\x3\x2\x2\x2\x289\x28A\t\x5\x2\x2\x28A\x28B\a\x66\x2\x2\x28B\x28D"+
		"\ag\x2\x2\x28C\x28E\x5\"\x12\x2\x28D\x28C\x3\x2\x2\x2\x28D\x28E\x3\x2"+
		"\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x290\x5@!\x2\x290\x291\a\x61\x2\x2\x291"+
		"\x295\x5\x30\x19\x2\x292\x294\x5:\x1E\x2\x293\x292\x3\x2\x2\x2\x294\x297"+
		"\x3\x2\x2\x2\x295\x293\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x29B\x3"+
		"\x2\x2\x2\x297\x295\x3\x2\x2\x2\x298\x29A\x5\f\a\x2\x299\x298\x3\x2\x2"+
		"\x2\x29A\x29D\x3\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2"+
		"\x29C\x29E\x3\x2\x2\x2\x29D\x29B\x3\x2\x2\x2\x29E\x29F\x5J&\x2\x29F\x30D"+
		"\x3\x2\x2\x2\x2A0\x2A2\x5\xE\b\x2\x2A1\x2A0\x3\x2\x2\x2\x2A2\x2A5\x3\x2"+
		"\x2\x2\x2A3\x2A1\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A6\x3\x2\x2"+
		"\x2\x2A5\x2A3\x3\x2\x2\x2\x2A6\x2A8\x5\x12\n\x2\x2A7\x2A9\x5\x18\r\x2"+
		"\x2A8\x2A7\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AB\x3\x2\x2\x2\x2AA"+
		"\x2AC\x5\x14\v\x2\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AE"+
		"\x3\x2\x2\x2\x2AD\x2AF\x5\x1C\xF\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3"+
		"\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B2\x5\x6\x4\x2\x2B1\x2B3\x5\"\x12"+
		"\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2"+
		"\x2B4\x2B5\x5@!\x2\x2B5\x2B6\a\x61\x2\x2\x2B6\x2BA\x5\x30\x19\x2\x2B7"+
		"\x2B9\x5:\x1E\x2\x2B8\x2B7\x3\x2\x2\x2\x2B9\x2BC\x3\x2\x2\x2\x2BA\x2B8"+
		"\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2C0\x3\x2\x2\x2\x2BC\x2BA\x3"+
		"\x2\x2\x2\x2BD\x2BF\x5\f\a\x2\x2BE\x2BD\x3\x2\x2\x2\x2BF\x2C2\x3\x2\x2"+
		"\x2\x2C0\x2BE\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C3\x3\x2\x2\x2"+
		"\x2C2\x2C0\x3\x2\x2\x2\x2C3\x2C4\x5J&\x2\x2C4\x30D\x3\x2\x2\x2\x2C5\x2C7"+
		"\x5\xE\b\x2\x2C6\x2C5\x3\x2\x2\x2\x2C7\x2CA\x3\x2\x2\x2\x2C8\x2C6\x3\x2"+
		"\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2CB\x3\x2\x2\x2\x2CA\x2C8\x3\x2\x2"+
		"\x2\x2CB\x2CD\x5\x12\n\x2\x2CC\x2CE\x5\x18\r\x2\x2CD\x2CC\x3\x2\x2\x2"+
		"\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2D0\x3\x2\x2\x2\x2CF\x2D1\x5\x14\v\x2\x2D0"+
		"\x2CF\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2D3\x3\x2\x2\x2\x2D2\x2D4"+
		"\x5\x1C\xF\x2\x2D3\x2D2\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D5\x3"+
		"\x2\x2\x2\x2D5\x2D6\a\x1A\x2\x2\x2D6\x2D7\x5L\'\x2\x2D7\x2D8\x5@!\x2\x2D8"+
		"\x2D9\a\x61\x2\x2\x2D9\x2DD\x5\x30\x19\x2\x2DA\x2DC\x5:\x1E\x2\x2DB\x2DA"+
		"\x3\x2\x2\x2\x2DC\x2DF\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3"+
		"\x2\x2\x2\x2DE\x2E3\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E2\x5\f\a"+
		"\x2\x2E1\x2E0\x3\x2\x2\x2\x2E2\x2E5\x3\x2\x2\x2\x2E3\x2E1\x3\x2\x2\x2"+
		"\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E6\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E6"+
		"\x2E7\x5J&\x2\x2E7\x30D\x3\x2\x2\x2\x2E8\x2EA\x5\xE\b\x2\x2E9\x2E8\x3"+
		"\x2\x2\x2\x2EA\x2ED\x3\x2\x2\x2\x2EB\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2"+
		"\x2\x2\x2EC\x2EE\x3\x2\x2\x2\x2ED\x2EB\x3\x2\x2\x2\x2EE\x2F0\x5\x12\n"+
		"\x2\x2EF\x2F1\x5\x14\v\x2\x2F0\x2EF\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2"+
		"\x2F1\x2F3\x3\x2\x2\x2\x2F2\x2F4\x5\x16\f\x2\x2F3\x2F2\x3\x2\x2\x2\x2F3"+
		"\x2F4\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F6\a\f\x2\x2\x2F6\x2F8"+
		"\x5\x6\x4\x2\x2F7\x2F9\x5\x1E\x10\x2\x2F8\x2F7\x3\x2\x2\x2\x2F8\x2F9\x3"+
		"\x2\x2\x2\x2F9\x2FB\x3\x2\x2\x2\x2FA\x2FC\x5\x10\t\x2\x2FB\x2FA\x3\x2"+
		"\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x300\x3\x2\x2\x2\x2FD\x2FF\x5:\x1E\x2"+
		"\x2FE\x2FD\x3\x2\x2\x2\x2FF\x302\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2\x300"+
		"\x301\x3\x2\x2\x2\x301\x303\x3\x2\x2\x2\x302\x300\x3\x2\x2\x2\x303\x307"+
		"\a\x62\x2\x2\x304\x306\x5> \x2\x305\x304\x3\x2\x2\x2\x306\x309\x3\x2\x2"+
		"\x2\x307\x305\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x30A\x3\x2\x2\x2"+
		"\x309\x307\x3\x2\x2\x2\x30A\x30B\a\x63\x2\x2\x30B\x30D\x3\x2\x2\x2\x30C"+
		"\x1F7\x3\x2\x2\x2\x30C\x215\x3\x2\x2\x2\x30C\x223\x3\x2\x2\x2\x30C\x243"+
		"\x3\x2\x2\x2\x30C\x256\x3\x2\x2\x2\x30C\x27C\x3\x2\x2\x2\x30C\x2A3\x3"+
		"\x2\x2\x2\x30C\x2C8\x3\x2\x2\x2\x30C\x2EB\x3\x2\x2\x2\x30D?\x3\x2\x2\x2"+
		"\x30E\x30F\ah\x2\x2\x30F\x314\x5\x42\"\x2\x310\x311\a`\x2\x2\x311\x313"+
		"\x5\x42\"\x2\x312\x310\x3\x2\x2\x2\x313\x316\x3\x2\x2\x2\x314\x312\x3"+
		"\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x317\x3\x2\x2\x2\x316\x314\x3\x2"+
		"\x2\x2\x317\x318\ai\x2\x2\x318\x31C\x3\x2\x2\x2\x319\x31A\ah\x2\x2\x31A"+
		"\x31C\ai\x2\x2\x31B\x30E\x3\x2\x2\x2\x31B\x319\x3\x2\x2\x2\x31C\x41\x3"+
		"\x2\x2\x2\x31D\x31F\a\x1C\x2\x2\x31E\x31D\x3\x2\x2\x2\x31E\x31F\x3\x2"+
		"\x2\x2\x31F\x323\x3\x2\x2\x2\x320\x322\x5\x44#\x2\x321\x320\x3\x2\x2\x2"+
		"\x322\x325\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324"+
		"\x327\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x326\x328\x5\x6\x4\x2\x327\x326"+
		"\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32A\a["+
		"\x2\x2\x32A\x333\x5,\x17\x2\x32B\x32D\a@\x2\x2\x32C\x32B\x3\x2\x2\x2\x32C"+
		"\x32D\x3\x2\x2\x2\x32D\x32F\x3\x2\x2\x2\x32E\x330\a\x41\x2\x2\x32F\x32E"+
		"\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x333\a\x16"+
		"\x2\x2\x332\x31E\x3\x2\x2\x2\x332\x32C\x3\x2\x2\x2\x333\x43\x3\x2\x2\x2"+
		"\x334\x335\a#\x2\x2\x335\x45\x3\x2\x2\x2\x336\x337\a[\x2\x2\x337\x338"+
		"\a\x19\x2\x2\x338\x339\ah\x2\x2\x339\x33A\x5H%\x2\x33A\x33B\ai\x2\x2\x33B"+
		"\x343\x3\x2\x2\x2\x33C\x33D\a[\x2\x2\x33D\x33E\a\x16\x2\x2\x33E\x33F\a"+
		"h\x2\x2\x33F\x340\x5H%\x2\x340\x341\ai\x2\x2\x341\x343\x3\x2\x2\x2\x342"+
		"\x336\x3\x2\x2\x2\x342\x33C\x3\x2\x2\x2\x343G\x3\x2\x2\x2\x344\x349\x5"+
		"R*\x2\x345\x346\a`\x2\x2\x346\x348\x5R*\x2\x347\x345\x3\x2\x2\x2\x348"+
		"\x34B\x3\x2\x2\x2\x349\x347\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34A\x34E"+
		"\x3\x2\x2\x2\x34B\x349\x3\x2\x2\x2\x34C\x34E\x3\x2\x2\x2\x34D\x344\x3"+
		"\x2\x2\x2\x34D\x34C\x3\x2\x2\x2\x34EI\x3\x2\x2\x2\x34F\x353\a\x62\x2\x2"+
		"\x350\x352\x5N(\x2\x351\x350\x3\x2\x2\x2\x352\x355\x3\x2\x2\x2\x353\x351"+
		"\x3\x2\x2\x2\x353\x354\x3\x2\x2\x2\x354\x356\x3\x2\x2\x2\x355\x353\x3"+
		"\x2\x2\x2\x356\x359\a\x63\x2\x2\x357\x359\aZ\x2\x2\x358\x34F\x3\x2\x2"+
		"\x2\x358\x357\x3\x2\x2\x2\x359K\x3\x2\x2\x2\x35A\x367\aj\x2\x2\x35B\x367"+
		"\al\x2\x2\x35C\x367\az\x2\x2\x35D\x367\ax\x2\x2\x35E\x367\ay\x2\x2\x35F"+
		"\x367\an\x2\x2\x360\x367\am\x2\x2\x361\x367\a\\\x2\x2\x362\x363\a\x66"+
		"\x2\x2\x363\x367\ag\x2\x2\x364\x365\aw\x2\x2\x365\x367\aw\x2\x2\x366\x35A"+
		"\x3\x2\x2\x2\x366\x35B\x3\x2\x2\x2\x366\x35C\x3\x2\x2\x2\x366\x35D\x3"+
		"\x2\x2\x2\x366\x35E\x3\x2\x2\x2\x366\x35F\x3\x2\x2\x2\x366\x360\x3\x2"+
		"\x2\x2\x366\x361\x3\x2\x2\x2\x366\x362\x3\x2\x2\x2\x366\x364\x3\x2\x2"+
		"\x2\x367M\x3\x2\x2\x2\x368\x369\x5P)\x2\x369\x36A\aZ\x2\x2\x36A\x3B3\x3"+
		"\x2\x2\x2\x36B\x36C\a?\x2\x2\x36C\x370\a\x62\x2\x2\x36D\x36F\x5N(\x2\x36E"+
		"\x36D\x3\x2\x2\x2\x36F\x372\x3\x2\x2\x2\x370\x36E\x3\x2\x2\x2\x370\x371"+
		"\x3\x2\x2\x2\x371\x373\x3\x2\x2\x2\x372\x370\x3\x2\x2\x2\x373\x3B3\a\x63"+
		"\x2\x2\x374\x378\a\x62\x2\x2\x375\x377\x5N(\x2\x376\x375\x3\x2\x2\x2\x377"+
		"\x37A\x3\x2\x2\x2\x378\x376\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379\x37B"+
		"\x3\x2\x2\x2\x37A\x378\x3\x2\x2\x2\x37B\x3B3\a\x63\x2\x2\x37C\x3B3\aZ"+
		"\x2\x2\x37D\x37E\x5R*\x2\x37E\x37F\aZ\x2\x2\x37F\x3B3\x3\x2\x2\x2\x380"+
		"\x382\a-\x2\x2\x381\x383\x5R*\x2\x382\x381\x3\x2\x2\x2\x382\x383\x3\x2"+
		"\x2\x2\x383\x384\x3\x2\x2\x2\x384\x3B3\aZ\x2\x2\x385\x386\a\x33\x2\x2"+
		"\x386\x387\x5R*\x2\x387\x388\aZ\x2\x2\x388\x3B3\x3\x2\x2\x2\x389\x38A"+
		"\a&\x2\x2\x38A\x38B\ah\x2\x2\x38B\x38C\x5R*\x2\x38C\x38D\ai\x2\x2\x38D"+
		"\x390\x5N(\x2\x38E\x38F\a\'\x2\x2\x38F\x391\x5N(\x2\x390\x38E\x3\x2\x2"+
		"\x2\x390\x391\x3\x2\x2\x2\x391\x3B3\x3\x2\x2\x2\x392\x393\a&\x2\x2\x393"+
		"\x394\ah\x2\x2\x394\x395\x5P)\x2\x395\x396\ai\x2\x2\x396\x399\x5N(\x2"+
		"\x397\x398\a\'\x2\x2\x398\x39A\x5N(\x2\x399\x397\x3\x2\x2\x2\x399\x39A"+
		"\x3\x2\x2\x2\x39A\x3B3\x3\x2\x2\x2\x39B\x39C\a(\x2\x2\x39C\x39F\ah\x2"+
		"\x2\x39D\x3A0\x5P)\x2\x39E\x3A0\a\x84\x2\x2\x39F\x39D\x3\x2\x2\x2\x39F"+
		"\x39E\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2\a)\x2\x2\x3A2\x3A3\x5"+
		"R*\x2\x3A3\x3A4\ai\x2\x2\x3A4\x3A5\x5N(\x2\x3A5\x3B3\x3\x2\x2\x2\x3A6"+
		"\x3A7\a%\x2\x2\x3A7\x3A8\ah\x2\x2\x3A8\x3A9\x5R*\x2\x3A9\x3AA\ai\x2\x2"+
		"\x3AA\x3AB\x5N(\x2\x3AB\x3B3\x3\x2\x2\x2\x3AC\x3AD\a\x15\x2\x2\x3AD\x3AE"+
		"\x5R*\x2\x3AE\x3AF\aZ\x2\x2\x3AF\x3B3\x3\x2\x2\x2\x3B0\x3B1\a,\x2\x2\x3B1"+
		"\x3B3\aZ\x2\x2\x3B2\x368\x3\x2\x2\x2\x3B2\x36B\x3\x2\x2\x2\x3B2\x374\x3"+
		"\x2\x2\x2\x3B2\x37C\x3\x2\x2\x2\x3B2\x37D\x3\x2\x2\x2\x3B2\x380\x3\x2"+
		"\x2\x2\x3B2\x385\x3\x2\x2\x2\x3B2\x389\x3\x2\x2\x2\x3B2\x392\x3\x2\x2"+
		"\x2\x3B2\x39B\x3\x2\x2\x2\x3B2\x3A6\x3\x2\x2\x2\x3B2\x3AC\x3\x2\x2\x2"+
		"\x3B2\x3B0\x3\x2\x2\x2\x3B3O\x3\x2\x2\x2\x3B4\x3B5\t\x3\x2\x2\x3B5\x3B7"+
		"\x5\x6\x4\x2\x3B6\x3B8\an\x2\x2\x3B7\x3B6\x3\x2\x2\x2\x3B7\x3B8\x3\x2"+
		"\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\a[\x2\x2\x3BA\x3BD\x5,\x17\x2\x3BB"+
		"\x3BC\a|\x2\x2\x3BC\x3BE\x5R*\x2\x3BD\x3BB\x3\x2\x2\x2\x3BD\x3BE\x3\x2"+
		"\x2\x2\x3BE\x3D1\x3\x2\x2\x2\x3BF\x3C0\t\x3\x2\x2\x3C0\x3C1\a\x66\x2\x2"+
		"\x3C1\x3C6\x5\x6\x4\x2\x3C2\x3C3\a`\x2\x2\x3C3\x3C5\x5\x6\x4\x2\x3C4\x3C2"+
		"\x3\x2\x2\x2\x3C5\x3C8\x3\x2\x2\x2\x3C6\x3C4\x3\x2\x2\x2\x3C6\x3C7\x3"+
		"\x2\x2\x2\x3C7\x3C9\x3\x2\x2\x2\x3C8\x3C6\x3\x2\x2\x2\x3C9\x3CA\ag\x2"+
		"\x2\x3CA\x3CB\a[\x2\x2\x3CB\x3CE\x5,\x17\x2\x3CC\x3CD\a|\x2\x2\x3CD\x3CF"+
		"\x5R*\x2\x3CE\x3CC\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D1\x3\x2\x2"+
		"\x2\x3D0\x3B4\x3\x2\x2\x2\x3D0\x3BF\x3\x2\x2\x2\x3D1Q\x3\x2\x2\x2\x3D2"+
		"\x3D3\b*\x1\x2\x3D3\x3D4\t\x6\x2\x2\x3D4\x40E\x5R*\x1B\x3D5\x3D6\t\a\x2"+
		"\x2\x3D6\x40E\x5R*\xE\x3D7\x3D8\ah\x2\x2\x3D8\x3D9\x5R*\x2\x3D9\x3DA\a"+
		"i\x2\x2\x3DA\x40E\x3\x2\x2\x2\x3DB\x3DC\aw\x2\x2\x3DC\x3DD\x5R*\x2\x3DD"+
		"\x3DE\aw\x2\x2\x3DE\x40E\x3\x2\x2\x2\x3DF\x3E0\a\xF\x2\x2\x3E0\x3E1\x5"+
		"(\x15\x2\x3E1\x3E2\ah\x2\x2\x3E2\x3E3\x5H%\x2\x3E3\x3E4\ai\x2\x2\x3E4"+
		"\x40E\x3\x2\x2\x2\x3E5\x3E7\a\xF\x2\x2\x3E6\x3E8\x5\x10\t\x2\x3E7\x3E6"+
		"\x3\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3EA\ah"+
		"\x2\x2\x3EA\x3EB\x5H%\x2\x3EB\x3EC\ai\x2\x2\x3EC\x3F0\a\x62\x2\x2\x3ED"+
		"\x3EF\x5> \x2\x3EE\x3ED\x3\x2\x2\x2\x3EF\x3F2\x3\x2\x2\x2\x3F0\x3EE\x3"+
		"\x2\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F3\x3\x2\x2\x2\x3F2\x3F0\x3\x2"+
		"\x2\x2\x3F3\x3F4\a\x63\x2\x2\x3F4\x40E\x3\x2\x2\x2\x3F5\x3F8\x5\x6\x4"+
		"\x2\x3F6\x3F8\x5@!\x2\x3F7\x3F5\x3\x2\x2\x2\x3F7\x3F6\x3\x2\x2\x2\x3F8"+
		"\x3F9\x3\x2\x2\x2\x3F9\x403\a\x61\x2\x2\x3FA\x404\x5R*\x2\x3FB\x3FF\a"+
		"\x62\x2\x2\x3FC\x3FE\x5N(\x2\x3FD\x3FC\x3\x2\x2\x2\x3FE\x401\x3\x2\x2"+
		"\x2\x3FF\x3FD\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400\x402\x3\x2\x2\x2"+
		"\x401\x3FF\x3\x2\x2\x2\x402\x404\a\x63\x2\x2\x403\x3FA\x3\x2\x2\x2\x403"+
		"\x3FB\x3\x2\x2\x2\x404\x40E\x3\x2\x2\x2\x405\x40E\x5&\x14\x2\x406\x40E"+
		"\aW\x2\x2\x407\x40E\a\x16\x2\x2\x408\x40E\aU\x2\x2\x409\x40E\aV\x2\x2"+
		"\x40A\x40E\a\x17\x2\x2\x40B\x40E\aX\x2\x2\x40C\x40E\aY\x2\x2\x40D\x3D2"+
		"\x3\x2\x2\x2\x40D\x3D5\x3\x2\x2\x2\x40D\x3D7\x3\x2\x2\x2\x40D\x3DB\x3"+
		"\x2\x2\x2\x40D\x3DF\x3\x2\x2\x2\x40D\x3E5\x3\x2\x2\x2\x40D\x3F7\x3\x2"+
		"\x2\x2\x40D\x405\x3\x2\x2\x2\x40D\x406\x3\x2\x2\x2\x40D\x407\x3\x2\x2"+
		"\x2\x40D\x408\x3\x2\x2\x2\x40D\x409\x3\x2\x2\x2\x40D\x40A\x3\x2\x2\x2"+
		"\x40D\x40B\x3\x2\x2\x2\x40D\x40C\x3\x2\x2\x2\x40E\x44A\x3\x2\x2\x2\x40F"+
		"\x410\f\x1F\x2\x2\x410\x411\a]\x2\x2\x411\x449\x5R* \x412\x413\f\x1A\x2"+
		"\x2\x413\x414\t\b\x2\x2\x414\x449\x5R*\x1B\x415\x416\f\x19\x2\x2\x416"+
		"\x417\t\t\x2\x2\x417\x449\x5R*\x1A\x418\x419\f\x18\x2\x2\x419\x41A\t\x4"+
		"\x2\x2\x41A\x449\x5R*\x19\x41B\x41C\f\x17\x2\x2\x41C\x41D\t\n\x2\x2\x41D"+
		"\x449\x5R*\x18\x41E\x41F\f\x16\x2\x2\x41F\x420\ax\x2\x2\x420\x449\x5R"+
		"*\x17\x421\x422\f\x15\x2\x2\x422\x423\ay\x2\x2\x423\x449\x5R*\x16\x424"+
		"\x425\f\x14\x2\x2\x425\x426\az\x2\x2\x426\x449\x5R*\x15\x427\x428\f\x13"+
		"\x2\x2\x428\x429\am\x2\x2\x429\x449\x5R*\x14\x42A\x42B\f\x12\x2\x2\x42B"+
		"\x42C\a)\x2\x2\x42C\x449\x5R*\x13\x42D\x42E\f\r\x2\x2\x42E\x42F\an\x2"+
		"\x2\x42F\x430\x5R*\x2\x430\x431\a[\x2\x2\x431\x432\x5R*\r\x432\x449\x3"+
		"\x2\x2\x2\x433\x434\f\f\x2\x2\x434\x435\t\v\x2\x2\x435\x449\x5R*\f\x436"+
		"\x437\f \x2\x2\x437\x438\a\\\x2\x2\x438\x449\x5\x6\x4\x2\x439\x43A\f\x1E"+
		"\x2\x2\x43A\x43B\ah\x2\x2\x43B\x43C\x5H%\x2\x43C\x43D\ai\x2\x2\x43D\x449"+
		"\x3\x2\x2\x2\x43E\x43F\f\x1D\x2\x2\x43F\x440\a\x66\x2\x2\x440\x441\x5"+
		"H%\x2\x441\x442\ag\x2\x2\x442\x449\x3\x2\x2\x2\x443\x444\f\x1C\x2\x2\x444"+
		"\x449\an\x2\x2\x445\x446\f\xF\x2\x2\x446\x447\t\f\x2\x2\x447\x449\x5*"+
		"\x16\x2\x448\x40F\x3\x2\x2\x2\x448\x412\x3\x2\x2\x2\x448\x415\x3\x2\x2"+
		"\x2\x448\x418\x3\x2\x2\x2\x448\x41B\x3\x2\x2\x2\x448\x41E\x3\x2\x2\x2"+
		"\x448\x421\x3\x2\x2\x2\x448\x424\x3\x2\x2\x2\x448\x427\x3\x2\x2\x2\x448"+
		"\x42A\x3\x2\x2\x2\x448\x42D\x3\x2\x2\x2\x448\x433\x3\x2\x2\x2\x448\x436"+
		"\x3\x2\x2\x2\x448\x439\x3\x2\x2\x2\x448\x43E\x3\x2\x2\x2\x448\x443\x3"+
		"\x2\x2\x2\x448\x445\x3\x2\x2\x2\x449\x44C\x3\x2\x2\x2\x44A\x448\x3\x2"+
		"\x2\x2\x44A\x44B\x3\x2\x2\x2\x44BS\x3\x2\x2\x2\x44C\x44A\x3\x2\x2\x2\x9B"+
		"W]hox~\x86\x8B\x8E\x93\x96\x9B\xA2\xAA\xAF\xB5\xB8\xBD\xC4\xCC\xD4\xD8"+
		"\xDF\xE4\xE8\xF0\xF6\x100\x104\x10A\x10F\x113\x11B\x11E\x124\x128\x12C"+
		"\x133\x137\x141\x148\x14C\x14F\x157\x165\x16B\x175\x17B\x185\x18C\x192"+
		"\x198\x19C\x19F\x1A4\x1A9\x1AC\x1AF\x1B3\x1B7\x1BD\x1C5\x1CC\x1D1\x1D9"+
		"\x1E3\x1EB\x1F2\x1F7\x1FC\x200\x205\x208\x20D\x215\x21A\x223\x228\x22D"+
		"\x235\x23B\x243\x24B\x24F\x256\x25B\x25E\x261\x266\x26E\x274\x27C\x281"+
		"\x284\x287\x28D\x295\x29B\x2A3\x2A8\x2AB\x2AE\x2B2\x2BA\x2C0\x2C8\x2CD"+
		"\x2D0\x2D3\x2DD\x2E3\x2EB\x2F0\x2F3\x2F8\x2FB\x300\x307\x30C\x314\x31B"+
		"\x31E\x323\x327\x32C\x32F\x332\x342\x349\x34D\x353\x358\x366\x370\x378"+
		"\x382\x390\x399\x39F\x3B2\x3B7\x3BD\x3C6\x3CE\x3D0\x3E7\x3F0\x3F7\x3FF"+
		"\x403\x40D\x448\x44A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Parser
