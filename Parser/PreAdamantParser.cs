//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Enum=11, New=12, Delete=13, Self=14, Uninitialized=15, Where=16, 
		Base=17, Operator=18, Var=19, Let=20, Get=21, Set=22, Sealed=23, Override=24, 
		Partial=25, Abstract=26, Params=27, Extern=28, Do=29, While=30, If=31, 
		Else=32, For=33, In=34, Switch=35, Break=36, Continue=37, Return=38, Try=39, 
		TryPanic=40, TryResult=41, Catch=42, Finally=43, Throw=44, Implicit=45, 
		Explicit=46, Conversion=47, As=48, AsPanic=49, AsResult=50, Public=51, 
		Private=52, Protected=53, Internal=54, Safe=55, Unsafe=56, Own=57, Mutable=58, 
		Immutable=59, Async=60, Await=61, Requires=62, Ensures=63, Void=64, String=65, 
		ByteType=66, IntType=67, UIntType=68, FloatType=69, FixedType=70, DecimalType=71, 
		SizeType=72, OffsetType=73, UnsafeArrayType=74, ReservedWord=75, BooleanLiteral=76, 
		IntLiteral=77, NullLiteral=78, StringLiteral=79, CharLiteral=80, Semicolon=81, 
		Colon=82, Dot=83, DotDot=84, ColonColon=85, Tilde=86, Comma=87, Lambda=88, 
		LeftBrace=89, RightBrace=90, LeftAngle=91, RightAngle=92, LeftBracket=93, 
		RightBracket=94, LeftParen=95, RightParen=96, Asterisk=97, AtSign=98, 
		AddressOf=99, Coalesce=100, IsNull=101, Equal=102, NotEqual=103, LessThanOrEqual=104, 
		GreaterThanOrEqual=105, TypeList=106, Plus=107, Minus=108, Divide=109, 
		Pipe=110, And=111, Xor=112, Or=113, Not=114, Assign=115, AddAssign=116, 
		SubtractAssign=117, MultiplyAssign=118, DivideAssign=119, AndAssign=120, 
		XorAssign=121, OrAssign=122, PlaceHolder=123, Identifier=124, EscapedIdentifier=125, 
		Unknown=126;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_contract = 5, RULE_attribute = 6, 
		RULE_baseTypes = 7, RULE_modifier = 8, RULE_typeParameters = 9, RULE_typeParameter = 10, 
		RULE_typeArguments = 11, RULE_identifierOrPredefinedType = 12, RULE_simpleName = 13, 
		RULE_name = 14, RULE_valueType = 15, RULE_referenceType = 16, RULE_lifetime = 17, 
		RULE_funcTypeParameterList = 18, RULE_funcTypeParameter = 19, RULE_constExpression = 20, 
		RULE_typeParameterConstraintClause = 21, RULE_typeParameterConstraint = 22, 
		RULE_member = 23, RULE_parameterList = 24, RULE_parameter = 25, RULE_parameterModifier = 26, 
		RULE_constructorInitializer = 27, RULE_argumentList = 28, RULE_methodBody = 29, 
		RULE_overloadableOperator = 30, RULE_statement = 31, RULE_localVariableDeclaration = 32, 
		RULE_expression = 33;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"contract", "attribute", "baseTypes", "modifier", "typeParameters", "typeParameter", 
		"typeArguments", "identifierOrPredefinedType", "simpleName", "name", "valueType", 
		"referenceType", "lifetime", "funcTypeParameterList", "funcTypeParameter", 
		"constExpression", "typeParameterConstraintClause", "typeParameterConstraint", 
		"member", "parameterList", "parameter", "parameterModifier", "constructorInitializer", 
		"argumentList", "methodBody", "overloadableOperator", "statement", "localVariableDeclaration", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'self'", "'uninitialized'", 
		"'where'", "'base'", "'operator'", "'var'", "'let'", "'get'", "'set'", 
		"'sealed'", "'override'", "'partial'", "'abstract'", "'params'", "'extern'", 
		"'do'", "'while'", "'if'", "'else'", "'for'", "'in'", "'switch'", "'break'", 
		"'continue'", "'return'", "'try'", "'try!'", "'try?'", "'catch'", "'finally'", 
		"'throw'", "'implicit'", "'explicit'", "'conversion'", "'as'", "'as!'", 
		"'as?'", "'public'", "'private'", "'protected'", "'internal'", "'safe'", 
		"'unsafe'", "'own'", "'mut'", "'immut'", "'async'", "'await'", "'requires'", 
		"'ensures'", "'void'", "'string'", "'byte'", null, null, null, null, null, 
		"'size'", "'offset'", "'UnsafeArray'", null, null, null, "'null'", null, 
		null, "';'", "':'", "'.'", "'..'", "'::'", "'~'", "','", "'->'", "'{'", 
		"'}'", "'<'", "'>'", "'['", "']'", "'('", "')'", "'*'", "'@'", "'&'", 
		"'??'", "'?'", "'=='", "'<>'", "'<='", "'>='", "'...'", "'+'", "'-'", 
		"'/'", "'|'", "'and'", "'xor'", "'or'", "'not'", "'='", "'+='", "'-='", 
		"'*='", "'/='", "'and='", "'xor='", "'or='", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Enum", "New", "Delete", "Self", "Uninitialized", "Where", "Base", 
		"Operator", "Var", "Let", "Get", "Set", "Sealed", "Override", "Partial", 
		"Abstract", "Params", "Extern", "Do", "While", "If", "Else", "For", "In", 
		"Switch", "Break", "Continue", "Return", "Try", "TryPanic", "TryResult", 
		"Catch", "Finally", "Throw", "Implicit", "Explicit", "Conversion", "As", 
		"AsPanic", "AsResult", "Public", "Private", "Protected", "Internal", "Safe", 
		"Unsafe", "Own", "Mutable", "Immutable", "Async", "Await", "Requires", 
		"Ensures", "Void", "String", "ByteType", "IntType", "UIntType", "FloatType", 
		"FixedType", "DecimalType", "SizeType", "OffsetType", "UnsafeArrayType", 
		"ReservedWord", "BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", 
		"CharLiteral", "Semicolon", "Colon", "Dot", "DotDot", "ColonColon", "Tilde", 
		"Comma", "Lambda", "LeftBrace", "RightBrace", "LeftAngle", "RightAngle", 
		"LeftBracket", "RightBracket", "LeftParen", "RightParen", "Asterisk", 
		"AtSign", "AddressOf", "Coalesce", "IsNull", "Equal", "NotEqual", "LessThanOrEqual", 
		"GreaterThanOrEqual", "TypeList", "Plus", "Minus", "Divide", "Pipe", "And", 
		"Xor", "Or", "Not", "Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", 
		"DivideAssign", "AndAssign", "XorAssign", "OrAssign", "PlaceHolder", "Identifier", 
		"EscapedIdentifier", "Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 68; usingDirective();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
				{
				{
				State = 74; declaration();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 80; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(Using);
			State = 83; namespaceName();
			State = 84; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 88;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 91; Match(Dot);
				State = 92; _localctx._identifier = identifier();
				_localctx._identifiers.Add(_localctx._identifier);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			int _alt;
			State = 207;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; Match(Namespace);
				State = 99; namespaceName();
				State = 100; Match(LeftBrace);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 101; usingDirective();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Class) | (1L << Var) | (1L << Let) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 107; declaration();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 113; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 115; attribute();
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 121; modifier();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 127; Match(Class);
				State = 128; identifier();
				State = 130;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 129; typeParameters();
					}
				}

				State = 133;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 132; baseTypes();
					}
				}

				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 135; typeParameterConstraintClause();
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 141; Match(LeftBrace);
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 142; member();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 148; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 150; attribute();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 156; modifier();
					}
					}
					State = 161;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 162;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 163; identifier();
				State = 166;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 164; Match(Colon);
					State = 165; referenceType();
					}
				}

				State = 170;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 168; Match(Assign);
					State = 169; expression(0);
					}
				}

				State = 172; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 174; attribute();
						}
						} 
					}
					State = 179;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 180; modifier();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 186; identifier();
				State = 188;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 187; typeArguments();
					}
				}

				State = 190; parameterList();
				State = 191; Match(Lambda);
				State = 192; ((FunctionDeclarationContext)_localctx).returnType = referenceType();
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 193; typeParameterConstraintClause();
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 199; contract();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 205; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 10, RULE_contract);
		try {
			State = 213;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; Match(Requires);
				State = 210; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(Ensures);
				State = 212; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(EscapedIdentifier);
			State = 218;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 216; Match(LeftParen);
				State = 217; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 220; Match(Colon);
			State = 222;
			_la = TokenStream.La(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Void - 64)) | (1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
				{
				State = 221; _localctx.baseType = name(0);
				}
			}

			State = 233;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 224; Match(Colon);
				State = 225; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 226; Match(Comma);
					State = 227; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public IToken token;
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_modifier);
		try {
			State = 249;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; _localctx.token = Match(Protected);
				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; _localctx.token = Match(Internal);
				}
				break;
			case Safe:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240; _localctx.token = Match(Unsafe);
				}
				break;
			case Abstract:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241; _localctx.token = Match(Abstract);
				}
				break;
			case Partial:
				EnterOuterAlt(_localctx, 8);
				{
				State = 242; _localctx.token = Match(Partial);
				}
				break;
			case Implicit:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 10);
				{
				State = 244; _localctx.token = Match(Explicit);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 11);
				{
				State = 245; _localctx.token = Match(Sealed);
				}
				break;
			case Override:
				EnterOuterAlt(_localctx, 12);
				{
				State = 246; _localctx.token = Match(Override);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 13);
				{
				State = 247; _localctx.token = Match(Async);
				}
				break;
			case Extern:
				EnterOuterAlt(_localctx, 14);
				{
				State = 248; _localctx.token = Match(Extern);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(LeftAngle);
			State = 252; typeParameter();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 253; Match(Comma);
				State = 254; typeParameter();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 260; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public ValueTypeContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeParameter);
		int _la;
		try {
			State = 271;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262; identifier();
				State = 264;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 263; _localctx.isList = Match(TypeList);
					}
				}

				State = 268;
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 266; Match(Colon);
					State = 267; _localctx.baseType = valueType(0);
					}
					break;
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ReferenceTypeContext[] referenceType() {
			return GetRuleContexts<ReferenceTypeContext>();
		}
		public ReferenceTypeContext referenceType(int i) {
			return GetRuleContext<ReferenceTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(LeftAngle);
			State = 274; referenceType();
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 275; Match(Comma);
				State = 276; referenceType();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 282; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifierOrPredefinedType);
		try {
			State = 294;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; identifier();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; _localctx.token = Match(Void);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 287; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 288; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 289; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 290; _localctx.token = Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 291; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 292; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 10);
				{
				State = 293; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleName);
		try {
			State = 300;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; identifierOrPredefinedType();
				State = 298; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleNameNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public SimpleNameNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleNameNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 303; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 305;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 306; Match(Dot);
					State = 307; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : ValueTypeContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : ValueTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public FunctionTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : ValueTypeContext {
		public ValueTypeContext _valueType;
		public IList<ValueTypeContext> _types = new List<ValueTypeContext>();
		public ValueTypeContext[] valueType() {
			return GetRuleContexts<ValueTypeContext>();
		}
		public ValueTypeContext valueType(int i) {
			return GetRuleContext<ValueTypeContext>(i);
		}
		public TupleTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MaybeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public PointerTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueTypeContext _localctx = new ValueTypeContext(Context, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			switch (TokenStream.La(1)) {
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 314; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 328;
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 315; Match(LeftBracket);
					State = 316; ((TupleTypeContext)_localctx)._valueType = valueType(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 317; Match(Comma);
						State = 318; ((TupleTypeContext)_localctx)._valueType = valueType(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
						}
						}
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 324; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 326; Match(LeftBracket);
					State = 327; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 330; funcTypeParameterList();
				State = 331; Match(Lambda);
				State = 332; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 340;
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new MaybeTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 336;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 337; Match(IsNull);
						}
						break;
					case 2:
						{
						_localctx = new PointerTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 338;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 339; Match(Asterisk);
						}
						break;
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	 
		public ReferenceTypeContext() { }
		public virtual void CopyFrom(ReferenceTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OwnedImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public ImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public MutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedMutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedMutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_referenceType);
		int _la;
		try {
			State = 359;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				_localctx = new ImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 346;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 345; lifetime();
					}
				}

				State = 348; valueType(0);
				}
				break;
			case 2:
				_localctx = new MutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 349; lifetime();
					}
				}

				State = 352; Match(Mutable);
				State = 353; valueType(0);
				}
				break;
			case 3:
				_localctx = new OwnedImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 354; Match(Own);
				State = 355; valueType(0);
				}
				break;
			case 4:
				_localctx = new OwnedMutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 356; Match(Own);
				State = 357; Match(Mutable);
				State = 358; valueType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 34, RULE_lifetime);
		try {
			State = 365;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; Match(Tilde);
				State = 362; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(Tilde);
				State = 364; Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 380;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367; Match(LeftParen);
				State = 368; funcTypeParameter();
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 369; Match(Comma);
					State = 370; funcTypeParameter();
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 376; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; Match(LeftParen);
				State = 379; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 382; parameterModifier();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 388; referenceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_constExpression);
		try {
			State = 393;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 411;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; Match(Where);
				State = 396; typeParameter();
				State = 397; Match(Colon);
				State = 398; typeParameterConstraint();
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 399; Match(Comma);
					State = 400; typeParameterConstraint();
					}
					}
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; Match(Where);
				State = 407; typeParameter();
				State = 408;
				_la = TokenStream.La(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (LeftAngle - 91)) | (1L << (RightAngle - 91)) | (1L << (LessThanOrEqual - 91)) | (1L << (GreaterThanOrEqual - 91)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 409; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeParameterConstraint);
		try {
			State = 418;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; Match(New);
				State = 414; Match(LeftParen);
				State = 415; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; valueType(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 417; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public ReferenceTypeContext returnType;
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ReferenceTypeContext returnType;
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public ReferenceTypeContext returnType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 46, RULE_member);
		int _la;
		try {
			int _alt;
			State = 693;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 420; attribute();
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 426; modifier();
					}
					}
					State = 431;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 432; Match(New);
				State = 434;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 433; identifier();
					}
				}

				State = 436; parameterList();
				State = 439;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 437; Match(Lambda);
					State = 438; ((ConstructorContext)_localctx).returnType = referenceType();
					}
				}

				State = 442;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 441; constructorInitializer();
					}
				}

				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 444; contract();
					}
					}
					State = 449;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 450; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 452; attribute();
					}
					}
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 458; modifier();
					}
					}
					State = 463;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 464; Match(Delete);
				State = 465; parameterList();
				State = 466; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 468; attribute();
					}
					}
					State = 473;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 474; modifier();
					}
					}
					State = 479;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 480; Match(Conversion);
				State = 482;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 481; typeArguments();
					}
				}

				State = 484; parameterList();
				State = 485; Match(Lambda);
				State = 486; referenceType();
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 487; typeParameterConstraintClause();
					}
					}
					State = 492;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 493; contract();
					}
					}
					State = 498;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 499; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 501; attribute();
					}
					}
					State = 506;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 507; modifier();
					}
					}
					State = 512;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 513;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 514; identifier();
				State = 517;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 515; Match(Colon);
					State = 516; referenceType();
					}
				}

				State = 521;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 519; Match(Assign);
					State = 520; expression(0);
					}
				}

				State = 523; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 525; attribute();
					}
					}
					State = 530;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 531; modifier();
					}
					}
					State = 536;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 537;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 538; identifier();
				State = 540;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 539; typeArguments();
					}
				}

				State = 542; parameterList();
				State = 543; Match(Lambda);
				State = 544; referenceType();
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 545; typeParameterConstraintClause();
					}
					}
					State = 550;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 551; contract();
					}
					}
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 557; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 559; attribute();
					}
					}
					State = 564;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 565; modifier();
					}
					}
					State = 570;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 571;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 572; Match(LeftBracket);
				State = 573; Match(RightBracket);
				State = 575;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 574; typeArguments();
					}
				}

				State = 577; parameterList();
				State = 578; Match(Lambda);
				State = 579; referenceType();
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 580; typeParameterConstraintClause();
					}
					}
					State = 585;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 586; contract();
					}
					}
					State = 591;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 592; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 594; attribute();
						}
						} 
					}
					State = 599;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
				}
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 600; modifier();
					}
					}
					State = 605;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 606; identifier();
				State = 608;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 607; typeArguments();
					}
				}

				State = 610; parameterList();
				State = 611; Match(Lambda);
				State = 612; ((MethodContext)_localctx).returnType = referenceType();
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 613; typeParameterConstraintClause();
					}
					}
					State = 618;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 619; contract();
					}
					}
					State = 624;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 625; methodBody();
				}
				break;
			case 8:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 627; attribute();
					}
					}
					State = 632;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 633; modifier();
					}
					}
					State = 638;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 639; Match(Operator);
				State = 640; overloadableOperator();
				State = 641; parameterList();
				State = 642; Match(Lambda);
				State = 643; ((OperatorOverloadContext)_localctx).returnType = referenceType();
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 644; typeParameterConstraintClause();
					}
					}
					State = 649;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 650; contract();
					}
					}
					State = 655;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 656; methodBody();
				}
				break;
			case 9:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 658; attribute();
					}
					}
					State = 663;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0)) {
					{
					{
					State = 664; modifier();
					}
					}
					State = 669;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 670; Match(Class);
				State = 671; identifier();
				State = 673;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 672; typeParameters();
					}
				}

				State = 676;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 675; baseTypes();
					}
				}

				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 678; typeParameterConstraintClause();
					}
					}
					State = 683;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 684; Match(LeftBrace);
				State = 688;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 685; member();
					}
					}
					State = 690;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 691; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameterList);
		int _la;
		try {
			State = 708;
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; Match(LeftParen);
				State = 696; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 697; Match(Comma);
					State = 698; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 703;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 704; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706; Match(LeftParen);
				State = 707; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public IToken token;
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameter);
		int _la;
		try {
			State = 734;
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 710; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 715;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 717;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 716; identifier();
					}
				}

				State = 719; Match(Colon);
				State = 720; referenceType();
				}
				break;
			case 2:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 721; ((SelfParameterContext)_localctx)._parameterModifier = parameterModifier();
					((SelfParameterContext)_localctx)._modifiers.Add(((SelfParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 726;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 728;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 727; Match(Own);
					}
				}

				State = 731;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 730; Match(Mutable);
					}
				}

				State = 733; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_constructorInitializer);
		try {
			State = 750;
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 738; Match(Colon);
				State = 739; Match(Base);
				State = 740; Match(LeftParen);
				State = 741; argumentList();
				State = 742; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 744; Match(Colon);
				State = 745; Match(Self);
				State = 746; Match(LeftParen);
				State = 747; argumentList();
				State = 748; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentList);
		int _la;
		try {
			State = 761;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case Try:
			case TryPanic:
			case TryResult:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case CharLiteral:
			case LeftParen:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 753; Match(Comma);
					State = 754; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 759;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodBody);
		int _la;
		try {
			State = 772;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763; Match(LeftBrace);
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Void - 64)) | (1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 764; statement();
					}
					}
					State = 769;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 770; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_overloadableOperator);
		try {
			State = 786;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 775; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 776; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 777; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 778; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 779; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 780; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 781; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 782; Match(LeftBracket);
				State = 783; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 784; Match(Pipe);
				State = 785; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public StatementContext then;
		public StatementContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_statement);
		int _la;
		try {
			State = 856;
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 788; localVariableDeclaration();
				State = 789; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 791; Match(Unsafe);
				State = 792; Match(LeftBrace);
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Void - 64)) | (1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 793; statement();
					}
					}
					State = 798;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 799; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 800; Match(LeftBrace);
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Void - 64)) | (1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 801; statement();
					}
					}
					State = 806;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 807; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 808; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 809; expression(0);
				State = 810; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 812; Match(Return);
				State = 814;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized) | (1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Void - 64)) | (1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 813; expression(0);
					}
				}

				State = 816; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 817; Match(Throw);
				State = 818; expression(0);
				State = 819; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 821; Match(If);
				State = 822; Match(LeftParen);
				State = 823; ((IfStatementContext)_localctx).condition = expression(0);
				State = 824; Match(RightParen);
				State = 825; ((IfStatementContext)_localctx).then = statement();
				State = 828;
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 826; Match(Else);
					State = 827; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 830; Match(If);
				State = 831; Match(LeftParen);
				State = 832; localVariableDeclaration();
				State = 833; Match(RightParen);
				State = 834; ((LetIfStatementContext)_localctx).then = statement();
				State = 837;
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 835; Match(Else);
					State = 836; ((LetIfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 839; Match(For);
				State = 840; Match(LeftParen);
				State = 843;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 841; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 842; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 845; Match(In);
				State = 846; expression(0);
				State = 847; Match(RightParen);
				State = 848; statement();
				}
				break;
			case 11:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 850; Match(Delete);
				State = 851; expression(0);
				State = 852; Match(Semicolon);
				}
				break;
			case 12:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 854; Match(Continue);
				State = 855; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 859; identifier();
			State = 861;
			_la = TokenStream.La(1);
			if (_la==IsNull) {
				{
				State = 860; Match(IsNull);
				}
			}

			State = 865;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 863; Match(Colon);
				State = 864; referenceType();
				}
			}

			State = 869;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 867; Match(Assign);
				State = 868; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken @try;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken @as;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 872;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (Asterisk - 97)) | (1L << (AddressOf - 97)) | (1L << (Plus - 97)) | (1L << (Minus - 97)) | (1L << (Not - 97)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 873; expression(24);
				}
				break;
			case 2:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 874;
				((TryExpressionContext)_localctx).@try = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).@try = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 875; expression(11);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 876; Match(LeftParen);
				State = 877; expression(0);
				State = 878; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 880; Match(Pipe);
				State = 881; expression(0);
				State = 882; Match(Pipe);
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 884; Match(New);
				State = 885; name(0);
				State = 886; Match(LeftParen);
				State = 887; argumentList();
				State = 888; Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 890; Match(New);
				State = 892;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 891; baseTypes();
					}
				}

				State = 894; Match(LeftParen);
				State = 895; argumentList();
				State = 896; Match(RightParen);
				State = 897; Match(LeftBrace);
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << New) | (1L << Delete) | (1L << Operator) | (1L << Var) | (1L << Let) | (1L << Get) | (1L << Set) | (1L << Sealed) | (1L << Override) | (1L << Partial) | (1L << Abstract) | (1L << Extern) | (1L << Implicit) | (1L << Explicit) | (1L << Conversion) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal) | (1L << Safe) | (1L << Unsafe) | (1L << Async))) != 0) || _la==Identifier || _la==EscapedIdentifier) {
					{
					{
					State = 898; member();
					}
					}
					State = 903;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 904; Match(RightBrace);
				}
				break;
			case 7:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 906; simpleName();
				}
				break;
			case 8:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 907; Match(NullLiteral);
				}
				break;
			case 9:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 908; Match(Self);
				}
				break;
			case 10:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 909; Match(BooleanLiteral);
				}
				break;
			case 11:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 910; Match(IntLiteral);
				}
				break;
			case 12:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 911; Match(Uninitialized);
				}
				break;
			case 13:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 912; Match(StringLiteral);
				}
				break;
			case 14:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 913; Match(CharLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 978;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 976;
					switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 916;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 917; Match(DotDot);
						State = 918; expression(30);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 919;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 920;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 921; expression(24);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 922;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 923;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 924; expression(23);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 925;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 926;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (LeftAngle - 91)) | (1L << (RightAngle - 91)) | (1L << (LessThanOrEqual - 91)) | (1L << (GreaterThanOrEqual - 91)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 927; expression(22);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 928;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 929;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 930; ((EqualityExpressionContext)_localctx).rhs = expression(21);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 931;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 932; Match(And);
						State = 933; expression(20);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 934;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 935; Match(Xor);
						State = 936; expression(19);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 937;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 938; Match(Or);
						State = 939; expression(18);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 940;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 941; Match(Coalesce);
						State = 942; expression(17);
						}
						break;
					case 10:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 943;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 944; Match(In);
						State = 945; expression(16);
						}
						break;
					case 11:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 946;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 947; Match(IsNull);
						State = 948; ((IfExpressionContext)_localctx).then = expression(0);
						State = 949; Match(Colon);
						State = 950; ((IfExpressionContext)_localctx).@else = expression(10);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 952;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 953;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & ((1L << (Assign - 115)) | (1L << (AddAssign - 115)) | (1L << (SubtractAssign - 115)) | (1L << (MultiplyAssign - 115)) | (1L << (DivideAssign - 115)) | (1L << (AndAssign - 115)) | (1L << (XorAssign - 115)) | (1L << (OrAssign - 115)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 954; ((AssignmentExpressionContext)_localctx).rvalue = expression(9);
						}
						break;
					case 13:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 955;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 956; Match(Dot);
						State = 957; identifier();
						}
						break;
					case 14:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 958;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 959; Match(Lambda);
						State = 960; identifier();
						}
						break;
					case 15:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 961;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 962; Match(LeftParen);
						State = 963; argumentList();
						State = 964; Match(RightParen);
						}
						break;
					case 16:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 966;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 967; Match(LeftBracket);
						State = 968; argumentList();
						State = 969; Match(RightBracket);
						}
						break;
					case 17:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 971;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 972; Match(IsNull);
						}
						break;
					case 18:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 973;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 974;
						((CastExpressionContext)_localctx).@as = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).@as = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 975; valueType(0);
						}
						break;
					}
					} 
				}
				State = 980;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return name_sempred((NameContext)_localctx, predIndex);
		case 15: return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 33: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 23);
		case 5: return Precpred(Context, 22);
		case 6: return Precpred(Context, 21);
		case 7: return Precpred(Context, 20);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 16);
		case 12: return Precpred(Context, 15);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 9);
		case 15: return Precpred(Context, 30);
		case 16: return Precpred(Context, 28);
		case 17: return Precpred(Context, 27);
		case 18: return Precpred(Context, 26);
		case 19: return Precpred(Context, 25);
		case 20: return Precpred(Context, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x80\x3D8\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\a\x2H\n\x2\f\x2\xE\x2K\v\x2\x3\x2\a\x2N\n\x2"+
		"\f\x2\xE\x2Q\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4"+
		"[\n\x4\x3\x5\x3\x5\x3\x5\a\x5`\n\x5\f\x5\xE\x5\x63\v\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6i\n\x6\f\x6\xE\x6l\v\x6\x3\x6\a\x6o\n\x6\f\x6\xE\x6r\v\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6w\n\x6\f\x6\xE\x6z\v\x6\x3\x6\a\x6}\n\x6\f\x6\xE"+
		"\x6\x80\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x85\n\x6\x3\x6\x5\x6\x88\n\x6\x3"+
		"\x6\a\x6\x8B\n\x6\f\x6\xE\x6\x8E\v\x6\x3\x6\x3\x6\a\x6\x92\n\x6\f\x6\xE"+
		"\x6\x95\v\x6\x3\x6\x3\x6\x3\x6\a\x6\x9A\n\x6\f\x6\xE\x6\x9D\v\x6\x3\x6"+
		"\a\x6\xA0\n\x6\f\x6\xE\x6\xA3\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xA9\n"+
		"\x6\x3\x6\x3\x6\x5\x6\xAD\n\x6\x3\x6\x3\x6\x3\x6\a\x6\xB2\n\x6\f\x6\xE"+
		"\x6\xB5\v\x6\x3\x6\a\x6\xB8\n\x6\f\x6\xE\x6\xBB\v\x6\x3\x6\x3\x6\x5\x6"+
		"\xBF\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xC5\n\x6\f\x6\xE\x6\xC8\v\x6\x3"+
		"\x6\a\x6\xCB\n\x6\f\x6\xE\x6\xCE\v\x6\x3\x6\x3\x6\x5\x6\xD2\n\x6\x3\a"+
		"\x3\a\x3\a\x3\a\x5\a\xD8\n\a\x3\b\x3\b\x3\b\x5\b\xDD\n\b\x3\t\x3\t\x5"+
		"\t\xE1\n\t\x3\t\x3\t\x3\t\x3\t\a\t\xE7\n\t\f\t\xE\t\xEA\v\t\x5\t\xEC\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x5\n\xFC\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x102\n\v\f\v\xE\v\x105\v\v\x3"+
		"\v\x3\v\x3\f\x3\f\x5\f\x10B\n\f\x3\f\x3\f\x5\f\x10F\n\f\x3\f\x5\f\x112"+
		"\n\f\x3\r\x3\r\x3\r\x3\r\a\r\x118\n\r\f\r\xE\r\x11B\v\r\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x129\n\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x12F\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\a\x10\x137\n\x10\f\x10\xE\x10\x13A\v\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\a\x11\x142\n\x11\f\x11\xE\x11\x145\v\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x5\x11\x14B\n\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x5\x11\x151\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x157\n\x11\f\x11"+
		"\xE\x11\x15A\v\x11\x3\x12\x5\x12\x15D\n\x12\x3\x12\x3\x12\x5\x12\x161"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x16A\n"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x170\n\x13\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\a\x14\x176\n\x14\f\x14\xE\x14\x179\v\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x17F\n\x14\x3\x15\a\x15\x182\n\x15\f\x15\xE\x15\x185\v"+
		"\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x5\x16\x18C\n\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x194\n\x17\f\x17\xE\x17\x197\v\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x19E\n\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x5\x18\x1A5\n\x18\x3\x19\a\x19\x1A8\n\x19\f\x19\xE"+
		"\x19\x1AB\v\x19\x3\x19\a\x19\x1AE\n\x19\f\x19\xE\x19\x1B1\v\x19\x3\x19"+
		"\x3\x19\x5\x19\x1B5\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\x1BA\n\x19\x3\x19"+
		"\x5\x19\x1BD\n\x19\x3\x19\a\x19\x1C0\n\x19\f\x19\xE\x19\x1C3\v\x19\x3"+
		"\x19\x3\x19\x3\x19\a\x19\x1C8\n\x19\f\x19\xE\x19\x1CB\v\x19\x3\x19\a\x19"+
		"\x1CE\n\x19\f\x19\xE\x19\x1D1\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\a\x19\x1D8\n\x19\f\x19\xE\x19\x1DB\v\x19\x3\x19\a\x19\x1DE\n\x19\f\x19"+
		"\xE\x19\x1E1\v\x19\x3\x19\x3\x19\x5\x19\x1E5\n\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\a\x19\x1EB\n\x19\f\x19\xE\x19\x1EE\v\x19\x3\x19\a\x19\x1F1\n\x19"+
		"\f\x19\xE\x19\x1F4\v\x19\x3\x19\x3\x19\x3\x19\a\x19\x1F9\n\x19\f\x19\xE"+
		"\x19\x1FC\v\x19\x3\x19\a\x19\x1FF\n\x19\f\x19\xE\x19\x202\v\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\x208\n\x19\x3\x19\x3\x19\x5\x19\x20C\n\x19"+
		"\x3\x19\x3\x19\x3\x19\a\x19\x211\n\x19\f\x19\xE\x19\x214\v\x19\x3\x19"+
		"\a\x19\x217\n\x19\f\x19\xE\x19\x21A\v\x19\x3\x19\x3\x19\x3\x19\x5\x19"+
		"\x21F\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x225\n\x19\f\x19\xE\x19"+
		"\x228\v\x19\x3\x19\a\x19\x22B\n\x19\f\x19\xE\x19\x22E\v\x19\x3\x19\x3"+
		"\x19\x3\x19\a\x19\x233\n\x19\f\x19\xE\x19\x236\v\x19\x3\x19\a\x19\x239"+
		"\n\x19\f\x19\xE\x19\x23C\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x242"+
		"\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x248\n\x19\f\x19\xE\x19\x24B"+
		"\v\x19\x3\x19\a\x19\x24E\n\x19\f\x19\xE\x19\x251\v\x19\x3\x19\x3\x19\x3"+
		"\x19\a\x19\x256\n\x19\f\x19\xE\x19\x259\v\x19\x3\x19\a\x19\x25C\n\x19"+
		"\f\x19\xE\x19\x25F\v\x19\x3\x19\x3\x19\x5\x19\x263\n\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\a\x19\x269\n\x19\f\x19\xE\x19\x26C\v\x19\x3\x19\a\x19\x26F"+
		"\n\x19\f\x19\xE\x19\x272\v\x19\x3\x19\x3\x19\x3\x19\a\x19\x277\n\x19\f"+
		"\x19\xE\x19\x27A\v\x19\x3\x19\a\x19\x27D\n\x19\f\x19\xE\x19\x280\v\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x288\n\x19\f\x19\xE\x19"+
		"\x28B\v\x19\x3\x19\a\x19\x28E\n\x19\f\x19\xE\x19\x291\v\x19\x3\x19\x3"+
		"\x19\x3\x19\a\x19\x296\n\x19\f\x19\xE\x19\x299\v\x19\x3\x19\a\x19\x29C"+
		"\n\x19\f\x19\xE\x19\x29F\v\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2A4\n\x19"+
		"\x3\x19\x5\x19\x2A7\n\x19\x3\x19\a\x19\x2AA\n\x19\f\x19\xE\x19\x2AD\v"+
		"\x19\x3\x19\x3\x19\a\x19\x2B1\n\x19\f\x19\xE\x19\x2B4\v\x19\x3\x19\x3"+
		"\x19\x5\x19\x2B8\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x2BE\n\x1A\f"+
		"\x1A\xE\x1A\x2C1\v\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2C7\n\x1A\x3"+
		"\x1B\a\x1B\x2CA\n\x1B\f\x1B\xE\x1B\x2CD\v\x1B\x3\x1B\x5\x1B\x2D0\n\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\a\x1B\x2D5\n\x1B\f\x1B\xE\x1B\x2D8\v\x1B\x3\x1B"+
		"\x5\x1B\x2DB\n\x1B\x3\x1B\x5\x1B\x2DE\n\x1B\x3\x1B\x5\x1B\x2E1\n\x1B\x3"+
		"\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2F1\n\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E"+
		"\x2F6\n\x1E\f\x1E\xE\x1E\x2F9\v\x1E\x3\x1E\x5\x1E\x2FC\n\x1E\x3\x1F\x3"+
		"\x1F\a\x1F\x300\n\x1F\f\x1F\xE\x1F\x303\v\x1F\x3\x1F\x3\x1F\x5\x1F\x307"+
		"\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x315\n \x3"+
		"!\x3!\x3!\x3!\x3!\x3!\a!\x31D\n!\f!\xE!\x320\v!\x3!\x3!\x3!\a!\x325\n"+
		"!\f!\xE!\x328\v!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x331\n!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x33F\n!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x3!\x5!\x348\n!\x3!\x3!\x3!\x3!\x5!\x34E\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x5!\x35B\n!\x3\"\x3\"\x3\"\x5\"\x360\n\"\x3\"\x3\"\x5"+
		"\"\x364\n\"\x3\"\x3\"\x5\"\x368\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x37F\n#\x3#\x3#"+
		"\x3#\x3#\x3#\a#\x386\n#\f#\xE#\x389\v#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x5#\x395\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#"+
		"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#"+
		"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x3D3\n#\f#\xE"+
		"#\x3D6\v#\x3#\x2\x5\x1E \x44$\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x2\f\x3\x2\x15\x16\x4"+
		"\x2]^jk\x3\x2\x17\x18\x6\x2\x63\x63\x65\x65mntt\x3\x2)+\x4\x2\x63\x63"+
		"oo\x3\x2mn\x3\x2hi\x3\x2u|\x3\x2\x32\x34\x481\x2I\x3\x2\x2\x2\x4T\x3\x2"+
		"\x2\x2\x6Z\x3\x2\x2\x2\b\\\x3\x2\x2\x2\n\xD1\x3\x2\x2\x2\f\xD7\x3\x2\x2"+
		"\x2\xE\xD9\x3\x2\x2\x2\x10\xDE\x3\x2\x2\x2\x12\xFB\x3\x2\x2\x2\x14\xFD"+
		"\x3\x2\x2\x2\x16\x111\x3\x2\x2\x2\x18\x113\x3\x2\x2\x2\x1A\x128\x3\x2"+
		"\x2\x2\x1C\x12E\x3\x2\x2\x2\x1E\x130\x3\x2\x2\x2 \x150\x3\x2\x2\x2\"\x169"+
		"\x3\x2\x2\x2$\x16F\x3\x2\x2\x2&\x17E\x3\x2\x2\x2(\x183\x3\x2\x2\x2*\x18B"+
		"\x3\x2\x2\x2,\x19D\x3\x2\x2\x2.\x1A4\x3\x2\x2\x2\x30\x2B7\x3\x2\x2\x2"+
		"\x32\x2C6\x3\x2\x2\x2\x34\x2E0\x3\x2\x2\x2\x36\x2E2\x3\x2\x2\x2\x38\x2F0"+
		"\x3\x2\x2\x2:\x2FB\x3\x2\x2\x2<\x306\x3\x2\x2\x2>\x314\x3\x2\x2\x2@\x35A"+
		"\x3\x2\x2\x2\x42\x35C\x3\x2\x2\x2\x44\x394\x3\x2\x2\x2\x46H\x5\x4\x3\x2"+
		"G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JO\x3\x2\x2"+
		"\x2KI\x3\x2\x2\x2LN\x5\n\x6\x2ML\x3\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2\x2"+
		"\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2QO\x3\x2\x2\x2RS\a\x2\x2\x3S\x3\x3\x2\x2"+
		"\x2TU\a\n\x2\x2UV\x5\b\x5\x2VW\aS\x2\x2W\x5\x3\x2\x2\x2X[\a~\x2\x2Y[\a"+
		"\x7F\x2\x2ZX\x3\x2\x2\x2ZY\x3\x2\x2\x2[\a\x3\x2\x2\x2\\\x61\x5\x6\x4\x2"+
		"]^\aU\x2\x2^`\x5\x6\x4\x2_]\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2"+
		"\x2\x61\x62\x3\x2\x2\x2\x62\t\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x64\x65"+
		"\a\v\x2\x2\x65\x66\x5\b\x5\x2\x66j\a[\x2\x2gi\x5\x4\x3\x2hg\x3\x2\x2\x2"+
		"il\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2kp\x3\x2\x2\x2lj\x3\x2\x2\x2"+
		"mo\x5\n\x6\x2nm\x3\x2\x2\x2or\x3\x2\x2\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2"+
		"qs\x3\x2\x2\x2rp\x3\x2\x2\x2st\a\\\x2\x2t\xD2\x3\x2\x2\x2uw\x5\xE\b\x2"+
		"vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y~\x3\x2\x2\x2"+
		"zx\x3\x2\x2\x2{}\x5\x12\n\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2"+
		"\x2~\x7F\x3\x2\x2\x2\x7F\x81\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x82\a\f"+
		"\x2\x2\x82\x84\x5\x6\x4\x2\x83\x85\x5\x14\v\x2\x84\x83\x3\x2\x2\x2\x84"+
		"\x85\x3\x2\x2\x2\x85\x87\x3\x2\x2\x2\x86\x88\x5\x10\t\x2\x87\x86\x3\x2"+
		"\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8C\x3\x2\x2\x2\x89\x8B\x5,\x17\x2\x8A"+
		"\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2"+
		"\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x93\a[\x2\x2\x90\x92"+
		"\x5\x30\x19\x2\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2"+
		"\x2\x93\x94\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x97"+
		"\a\\\x2\x2\x97\xD2\x3\x2\x2\x2\x98\x9A\x5\xE\b\x2\x99\x98\x3\x2\x2\x2"+
		"\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\xA1\x3"+
		"\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA0\x5\x12\n\x2\x9F\x9E\x3\x2\x2\x2"+
		"\xA0\xA3\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3"+
		"\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4\xA5\t\x2\x2\x2\xA5\xA8\x5\x6\x4\x2\xA6"+
		"\xA7\aT\x2\x2\xA7\xA9\x5\"\x12\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2"+
		"\x2\xA9\xAC\x3\x2\x2\x2\xAA\xAB\au\x2\x2\xAB\xAD\x5\x44#\x2\xAC\xAA\x3"+
		"\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\aS\x2\x2\xAF"+
		"\xD2\x3\x2\x2\x2\xB0\xB2\x5\xE\b\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB5\x3\x2"+
		"\x2\x2\xB3\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB9\x3\x2\x2\x2\xB5"+
		"\xB3\x3\x2\x2\x2\xB6\xB8\x5\x12\n\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3\x2"+
		"\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB"+
		"\xB9\x3\x2\x2\x2\xBC\xBE\x5\x6\x4\x2\xBD\xBF\x5\x18\r\x2\xBE\xBD\x3\x2"+
		"\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\x5\x32\x1A\x2\xC1"+
		"\xC2\aZ\x2\x2\xC2\xC6\x5\"\x12\x2\xC3\xC5\x5,\x17\x2\xC4\xC3\x3\x2\x2"+
		"\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xCC"+
		"\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCB\x5\f\a\x2\xCA\xC9\x3\x2\x2\x2"+
		"\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF\x3"+
		"\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD0\x5<\x1F\x2\xD0\xD2\x3\x2\x2\x2\xD1"+
		"\x64\x3\x2\x2\x2\xD1x\x3\x2\x2\x2\xD1\x9B\x3\x2\x2\x2\xD1\xB3\x3\x2\x2"+
		"\x2\xD2\v\x3\x2\x2\x2\xD3\xD4\a@\x2\x2\xD4\xD8\x5\x44#\x2\xD5\xD6\a\x41"+
		"\x2\x2\xD6\xD8\x5\x44#\x2\xD7\xD3\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8"+
		"\r\x3\x2\x2\x2\xD9\xDC\a\x7F\x2\x2\xDA\xDB\a\x61\x2\x2\xDB\xDD\a\x62\x2"+
		"\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xF\x3\x2\x2\x2\xDE\xE0"+
		"\aT\x2\x2\xDF\xE1\x5\x1E\x10\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2"+
		"\xE1\xEB\x3\x2\x2\x2\xE2\xE3\aT\x2\x2\xE3\xE8\x5\x1E\x10\x2\xE4\xE5\a"+
		"Y\x2\x2\xE5\xE7\x5\x1E\x10\x2\xE6\xE4\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2"+
		"\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3"+
		"\x2\x2\x2\xEB\xE2\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\x11\x3\x2\x2\x2"+
		"\xED\xFC\a\x35\x2\x2\xEE\xFC\a\x36\x2\x2\xEF\xFC\a\x37\x2\x2\xF0\xFC\a"+
		"\x38\x2\x2\xF1\xFC\a\x39\x2\x2\xF2\xFC\a:\x2\x2\xF3\xFC\a\x1C\x2\x2\xF4"+
		"\xFC\a\x1B\x2\x2\xF5\xFC\a/\x2\x2\xF6\xFC\a\x30\x2\x2\xF7\xFC\a\x19\x2"+
		"\x2\xF8\xFC\a\x1A\x2\x2\xF9\xFC\a>\x2\x2\xFA\xFC\a\x1E\x2\x2\xFB\xED\x3"+
		"\x2\x2\x2\xFB\xEE\x3\x2\x2\x2\xFB\xEF\x3\x2\x2\x2\xFB\xF0\x3\x2\x2\x2"+
		"\xFB\xF1\x3\x2\x2\x2\xFB\xF2\x3\x2\x2\x2\xFB\xF3\x3\x2\x2\x2\xFB\xF4\x3"+
		"\x2\x2\x2\xFB\xF5\x3\x2\x2\x2\xFB\xF6\x3\x2\x2\x2\xFB\xF7\x3\x2\x2\x2"+
		"\xFB\xF8\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\x13\x3"+
		"\x2\x2\x2\xFD\xFE\a]\x2\x2\xFE\x103\x5\x16\f\x2\xFF\x100\aY\x2\x2\x100"+
		"\x102\x5\x16\f\x2\x101\xFF\x3\x2\x2\x2\x102\x105\x3\x2\x2\x2\x103\x101"+
		"\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x106\x3\x2\x2\x2\x105\x103\x3"+
		"\x2\x2\x2\x106\x107\a^\x2\x2\x107\x15\x3\x2\x2\x2\x108\x10A\x5\x6\x4\x2"+
		"\x109\x10B\al\x2\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10E"+
		"\x3\x2\x2\x2\x10C\x10D\aT\x2\x2\x10D\x10F\x5 \x11\x2\x10E\x10C\x3\x2\x2"+
		"\x2\x10E\x10F\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x112\x5$\x13\x2\x111"+
		"\x108\x3\x2\x2\x2\x111\x110\x3\x2\x2\x2\x112\x17\x3\x2\x2\x2\x113\x114"+
		"\a]\x2\x2\x114\x119\x5\"\x12\x2\x115\x116\aY\x2\x2\x116\x118\x5\"\x12"+
		"\x2\x117\x115\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2"+
		"\x119\x11A\x3\x2\x2\x2\x11A\x11C\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11C"+
		"\x11D\a^\x2\x2\x11D\x19\x3\x2\x2\x2\x11E\x129\x5\x6\x4\x2\x11F\x129\a"+
		"\x42\x2\x2\x120\x129\a\x43\x2\x2\x121\x129\a\x44\x2\x2\x122\x129\a\x45"+
		"\x2\x2\x123\x129\a\x46\x2\x2\x124\x129\aG\x2\x2\x125\x129\aJ\x2\x2\x126"+
		"\x129\aK\x2\x2\x127\x129\aL\x2\x2\x128\x11E\x3\x2\x2\x2\x128\x11F\x3\x2"+
		"\x2\x2\x128\x120\x3\x2\x2\x2\x128\x121\x3\x2\x2\x2\x128\x122\x3\x2\x2"+
		"\x2\x128\x123\x3\x2\x2\x2\x128\x124\x3\x2\x2\x2\x128\x125\x3\x2\x2\x2"+
		"\x128\x126\x3\x2\x2\x2\x128\x127\x3\x2\x2\x2\x129\x1B\x3\x2\x2\x2\x12A"+
		"\x12F\x5\x1A\xE\x2\x12B\x12C\x5\x1A\xE\x2\x12C\x12D\x5\x18\r\x2\x12D\x12F"+
		"\x3\x2\x2\x2\x12E\x12A\x3\x2\x2\x2\x12E\x12B\x3\x2\x2\x2\x12F\x1D\x3\x2"+
		"\x2\x2\x130\x131\b\x10\x1\x2\x131\x132\x5\x1C\xF\x2\x132\x138\x3\x2\x2"+
		"\x2\x133\x134\f\x3\x2\x2\x134\x135\aU\x2\x2\x135\x137\x5\x1C\xF\x2\x136"+
		"\x133\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138\x139"+
		"\x3\x2\x2\x2\x139\x1F\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13B\x13C\b\x11"+
		"\x1\x2\x13C\x151\x5\x1E\x10\x2\x13D\x13E\a_\x2\x2\x13E\x143\x5 \x11\x2"+
		"\x13F\x140\aY\x2\x2\x140\x142\x5 \x11\x2\x141\x13F\x3\x2\x2\x2\x142\x145"+
		"\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x146\x3"+
		"\x2\x2\x2\x145\x143\x3\x2\x2\x2\x146\x147\a`\x2\x2\x147\x14B\x3\x2\x2"+
		"\x2\x148\x149\a_\x2\x2\x149\x14B\a`\x2\x2\x14A\x13D\x3\x2\x2\x2\x14A\x148"+
		"\x3\x2\x2\x2\x14B\x151\x3\x2\x2\x2\x14C\x14D\x5&\x14\x2\x14D\x14E\aZ\x2"+
		"\x2\x14E\x14F\x5\"\x12\x2\x14F\x151\x3\x2\x2\x2\x150\x13B\x3\x2\x2\x2"+
		"\x150\x14A\x3\x2\x2\x2\x150\x14C\x3\x2\x2\x2\x151\x158\x3\x2\x2\x2\x152"+
		"\x153\f\x6\x2\x2\x153\x157\ag\x2\x2\x154\x155\f\x5\x2\x2\x155\x157\a\x63"+
		"\x2\x2\x156\x152\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x157\x15A\x3\x2\x2"+
		"\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159!\x3\x2\x2\x2\x15A"+
		"\x158\x3\x2\x2\x2\x15B\x15D\x5$\x13\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D"+
		"\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x16A\x5 \x11\x2\x15F\x161\x5$"+
		"\x13\x2\x160\x15F\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x162\x3\x2\x2"+
		"\x2\x162\x163\a<\x2\x2\x163\x16A\x5 \x11\x2\x164\x165\a;\x2\x2\x165\x16A"+
		"\x5 \x11\x2\x166\x167\a;\x2\x2\x167\x168\a<\x2\x2\x168\x16A\x5 \x11\x2"+
		"\x169\x15C\x3\x2\x2\x2\x169\x160\x3\x2\x2\x2\x169\x164\x3\x2\x2\x2\x169"+
		"\x166\x3\x2\x2\x2\x16A#\x3\x2\x2\x2\x16B\x16C\aX\x2\x2\x16C\x170\x5\x6"+
		"\x4\x2\x16D\x16E\aX\x2\x2\x16E\x170\a\x10\x2\x2\x16F\x16B\x3\x2\x2\x2"+
		"\x16F\x16D\x3\x2\x2\x2\x170%\x3\x2\x2\x2\x171\x172\a\x61\x2\x2\x172\x177"+
		"\x5(\x15\x2\x173\x174\aY\x2\x2\x174\x176\x5(\x15\x2\x175\x173\x3\x2\x2"+
		"\x2\x176\x179\x3\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2"+
		"\x178\x17A\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x17A\x17B\a\x62\x2\x2\x17B"+
		"\x17F\x3\x2\x2\x2\x17C\x17D\a\x61\x2\x2\x17D\x17F\a\x62\x2\x2\x17E\x171"+
		"\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F\'\x3\x2\x2\x2\x180\x182\x5\x36"+
		"\x1C\x2\x181\x180\x3\x2\x2\x2\x182\x185\x3\x2\x2\x2\x183\x181\x3\x2\x2"+
		"\x2\x183\x184\x3\x2\x2\x2\x184\x186\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2"+
		"\x186\x187\x5\"\x12\x2\x187)\x3\x2\x2\x2\x188\x18C\aO\x2\x2\x189\x18C"+
		"\aQ\x2\x2\x18A\x18C\x5\x6\x4\x2\x18B\x188\x3\x2\x2\x2\x18B\x189\x3\x2"+
		"\x2\x2\x18B\x18A\x3\x2\x2\x2\x18C+\x3\x2\x2\x2\x18D\x18E\a\x12\x2\x2\x18E"+
		"\x18F\x5\x16\f\x2\x18F\x190\aT\x2\x2\x190\x195\x5.\x18\x2\x191\x192\a"+
		"Y\x2\x2\x192\x194\x5.\x18\x2\x193\x191\x3\x2\x2\x2\x194\x197\x3\x2\x2"+
		"\x2\x195\x193\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x19E\x3\x2\x2\x2"+
		"\x197\x195\x3\x2\x2\x2\x198\x199\a\x12\x2\x2\x199\x19A\x5\x16\f\x2\x19A"+
		"\x19B\t\x3\x2\x2\x19B\x19C\aO\x2\x2\x19C\x19E\x3\x2\x2\x2\x19D\x18D\x3"+
		"\x2\x2\x2\x19D\x198\x3\x2\x2\x2\x19E-\x3\x2\x2\x2\x19F\x1A0\a\xE\x2\x2"+
		"\x1A0\x1A1\a\x61\x2\x2\x1A1\x1A5\a\x62\x2\x2\x1A2\x1A5\x5 \x11\x2\x1A3"+
		"\x1A5\x5\x16\f\x2\x1A4\x19F\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A3"+
		"\x3\x2\x2\x2\x1A5/\x3\x2\x2\x2\x1A6\x1A8\x5\xE\b\x2\x1A7\x1A6\x3\x2\x2"+
		"\x2\x1A8\x1AB\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2"+
		"\x1AA\x1AF\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AC\x1AE\x5\x12\n\x2\x1AD"+
		"\x1AC\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2\x1AF\x1B0"+
		"\x3\x2\x2\x2\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2\x1B4\a\xE"+
		"\x2\x2\x1B3\x1B5\x5\x6\x4\x2\x1B4\x1B3\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2"+
		"\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B9\x5\x32\x1A\x2\x1B7\x1B8\aZ\x2\x2\x1B8"+
		"\x1BA\x5\"\x12\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BC"+
		"\x3\x2\x2\x2\x1BB\x1BD\x5\x38\x1D\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3"+
		"\x2\x2\x2\x1BD\x1C1\x3\x2\x2\x2\x1BE\x1C0\x5\f\a\x2\x1BF\x1BE\x3\x2\x2"+
		"\x2\x1C0\x1C3\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2"+
		"\x1C2\x1C4\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C5\x5<\x1F\x2\x1C5"+
		"\x2B8\x3\x2\x2\x2\x1C6\x1C8\x5\xE\b\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1CB"+
		"\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CF\x3"+
		"\x2\x2\x2\x1CB\x1C9\x3\x2\x2\x2\x1CC\x1CE\x5\x12\n\x2\x1CD\x1CC\x3\x2"+
		"\x2\x2\x1CE\x1D1\x3\x2\x2\x2\x1CF\x1CD\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2"+
		"\x2\x1D0\x1D2\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D2\x1D3\a\xF\x2\x2\x1D3"+
		"\x1D4\x5\x32\x1A\x2\x1D4\x1D5\x5<\x1F\x2\x1D5\x2B8\x3\x2\x2\x2\x1D6\x1D8"+
		"\x5\xE\b\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\x1DB\x3\x2\x2\x2\x1D9\x1D7\x3\x2"+
		"\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DF\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2"+
		"\x2\x1DC\x1DE\x5\x12\n\x2\x1DD\x1DC\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2"+
		"\x1DF\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1"+
		"\x1DF\x3\x2\x2\x2\x1E2\x1E4\a\x31\x2\x2\x1E3\x1E5\x5\x18\r\x2\x1E4\x1E3"+
		"\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x5"+
		"\x32\x1A\x2\x1E7\x1E8\aZ\x2\x2\x1E8\x1EC\x5\"\x12\x2\x1E9\x1EB\x5,\x17"+
		"\x2\x1EA\x1E9\x3\x2\x2\x2\x1EB\x1EE\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2"+
		"\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1F2\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EF"+
		"\x1F1\x5\f\a\x2\x1F0\x1EF\x3\x2\x2\x2\x1F1\x1F4\x3\x2\x2\x2\x1F2\x1F0"+
		"\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x1F5\x3\x2\x2\x2\x1F4\x1F2\x3"+
		"\x2\x2\x2\x1F5\x1F6\x5<\x1F\x2\x1F6\x2B8\x3\x2\x2\x2\x1F7\x1F9\x5\xE\b"+
		"\x2\x1F8\x1F7\x3\x2\x2\x2\x1F9\x1FC\x3\x2\x2\x2\x1FA\x1F8\x3\x2\x2\x2"+
		"\x1FA\x1FB\x3\x2\x2\x2\x1FB\x200\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FD"+
		"\x1FF\x5\x12\n\x2\x1FE\x1FD\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2\x200\x1FE"+
		"\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x203\x3\x2\x2\x2\x202\x200\x3"+
		"\x2\x2\x2\x203\x204\t\x2\x2\x2\x204\x207\x5\x6\x4\x2\x205\x206\aT\x2\x2"+
		"\x206\x208\x5\"\x12\x2\x207\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208"+
		"\x20B\x3\x2\x2\x2\x209\x20A\au\x2\x2\x20A\x20C\x5\x44#\x2\x20B\x209\x3"+
		"\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20E\aS\x2"+
		"\x2\x20E\x2B8\x3\x2\x2\x2\x20F\x211\x5\xE\b\x2\x210\x20F\x3\x2\x2\x2\x211"+
		"\x214\x3\x2\x2\x2\x212\x210\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x218"+
		"\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x215\x217\x5\x12\n\x2\x216\x215\x3"+
		"\x2\x2\x2\x217\x21A\x3\x2\x2\x2\x218\x216\x3\x2\x2\x2\x218\x219\x3\x2"+
		"\x2\x2\x219\x21B\x3\x2\x2\x2\x21A\x218\x3\x2\x2\x2\x21B\x21C\t\x4\x2\x2"+
		"\x21C\x21E\x5\x6\x4\x2\x21D\x21F\x5\x18\r\x2\x21E\x21D\x3\x2\x2\x2\x21E"+
		"\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x221\x5\x32\x1A\x2\x221\x222"+
		"\aZ\x2\x2\x222\x226\x5\"\x12\x2\x223\x225\x5,\x17\x2\x224\x223\x3\x2\x2"+
		"\x2\x225\x228\x3\x2\x2\x2\x226\x224\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2"+
		"\x227\x22C\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x229\x22B\x5\f\a\x2\x22A"+
		"\x229\x3\x2\x2\x2\x22B\x22E\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22C\x22D"+
		"\x3\x2\x2\x2\x22D\x22F\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F\x230\x5"+
		"<\x1F\x2\x230\x2B8\x3\x2\x2\x2\x231\x233\x5\xE\b\x2\x232\x231\x3\x2\x2"+
		"\x2\x233\x236\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2"+
		"\x235\x23A\x3\x2\x2\x2\x236\x234\x3\x2\x2\x2\x237\x239\x5\x12\n\x2\x238"+
		"\x237\x3\x2\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x23B"+
		"\x3\x2\x2\x2\x23B\x23D\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23D\x23E\t\x4"+
		"\x2\x2\x23E\x23F\a_\x2\x2\x23F\x241\a`\x2\x2\x240\x242\x5\x18\r\x2\x241"+
		"\x240\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x244"+
		"\x5\x32\x1A\x2\x244\x245\aZ\x2\x2\x245\x249\x5\"\x12\x2\x246\x248\x5,"+
		"\x17\x2\x247\x246\x3\x2\x2\x2\x248\x24B\x3\x2\x2\x2\x249\x247\x3\x2\x2"+
		"\x2\x249\x24A\x3\x2\x2\x2\x24A\x24F\x3\x2\x2\x2\x24B\x249\x3\x2\x2\x2"+
		"\x24C\x24E\x5\f\a\x2\x24D\x24C\x3\x2\x2\x2\x24E\x251\x3\x2\x2\x2\x24F"+
		"\x24D\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\x3\x2\x2\x2\x251\x24F"+
		"\x3\x2\x2\x2\x252\x253\x5<\x1F\x2\x253\x2B8\x3\x2\x2\x2\x254\x256\x5\xE"+
		"\b\x2\x255\x254\x3\x2\x2\x2\x256\x259\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2"+
		"\x257\x258\x3\x2\x2\x2\x258\x25D\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A"+
		"\x25C\x5\x12\n\x2\x25B\x25A\x3\x2\x2\x2\x25C\x25F\x3\x2\x2\x2\x25D\x25B"+
		"\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x260\x3\x2\x2\x2\x25F\x25D\x3"+
		"\x2\x2\x2\x260\x262\x5\x6\x4\x2\x261\x263\x5\x18\r\x2\x262\x261\x3\x2"+
		"\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264\x265\x5\x32\x1A"+
		"\x2\x265\x266\aZ\x2\x2\x266\x26A\x5\"\x12\x2\x267\x269\x5,\x17\x2\x268"+
		"\x267\x3\x2\x2\x2\x269\x26C\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26A\x26B"+
		"\x3\x2\x2\x2\x26B\x270\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26D\x26F\x5"+
		"\f\a\x2\x26E\x26D\x3\x2\x2\x2\x26F\x272\x3\x2\x2\x2\x270\x26E\x3\x2\x2"+
		"\x2\x270\x271\x3\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x270\x3\x2\x2\x2"+
		"\x273\x274\x5<\x1F\x2\x274\x2B8\x3\x2\x2\x2\x275\x277\x5\xE\b\x2\x276"+
		"\x275\x3\x2\x2\x2\x277\x27A\x3\x2\x2\x2\x278\x276\x3\x2\x2\x2\x278\x279"+
		"\x3\x2\x2\x2\x279\x27E\x3\x2\x2\x2\x27A\x278\x3\x2\x2\x2\x27B\x27D\x5"+
		"\x12\n\x2\x27C\x27B\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x27C\x3\x2"+
		"\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x281\x3\x2\x2\x2\x280\x27E\x3\x2\x2"+
		"\x2\x281\x282\a\x14\x2\x2\x282\x283\x5> \x2\x283\x284\x5\x32\x1A\x2\x284"+
		"\x285\aZ\x2\x2\x285\x289\x5\"\x12\x2\x286\x288\x5,\x17\x2\x287\x286\x3"+
		"\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2\x289\x28A\x3\x2"+
		"\x2\x2\x28A\x28F\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28C\x28E\x5\f\a\x2"+
		"\x28D\x28C\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2\x28F\x28D\x3\x2\x2\x2\x28F"+
		"\x290\x3\x2\x2\x2\x290\x292\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x292\x293"+
		"\x5<\x1F\x2\x293\x2B8\x3\x2\x2\x2\x294\x296\x5\xE\b\x2\x295\x294\x3\x2"+
		"\x2\x2\x296\x299\x3\x2\x2\x2\x297\x295\x3\x2\x2\x2\x297\x298\x3\x2\x2"+
		"\x2\x298\x29D\x3\x2\x2\x2\x299\x297\x3\x2\x2\x2\x29A\x29C\x5\x12\n\x2"+
		"\x29B\x29A\x3\x2\x2\x2\x29C\x29F\x3\x2\x2\x2\x29D\x29B\x3\x2\x2\x2\x29D"+
		"\x29E\x3\x2\x2\x2\x29E\x2A0\x3\x2\x2\x2\x29F\x29D\x3\x2\x2\x2\x2A0\x2A1"+
		"\a\f\x2\x2\x2A1\x2A3\x5\x6\x4\x2\x2A2\x2A4\x5\x14\v\x2\x2A3\x2A2\x3\x2"+
		"\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A6\x3\x2\x2\x2\x2A5\x2A7\x5\x10\t"+
		"\x2\x2A6\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2AB\x3\x2\x2\x2"+
		"\x2A8\x2AA\x5,\x17\x2\x2A9\x2A8\x3\x2\x2\x2\x2AA\x2AD\x3\x2\x2\x2\x2AB"+
		"\x2A9\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AE\x3\x2\x2\x2\x2AD\x2AB"+
		"\x3\x2\x2\x2\x2AE\x2B2\a[\x2\x2\x2AF\x2B1\x5\x30\x19\x2\x2B0\x2AF\x3\x2"+
		"\x2\x2\x2B1\x2B4\x3\x2\x2\x2\x2B2\x2B0\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2"+
		"\x2\x2B3\x2B5\x3\x2\x2\x2\x2B4\x2B2\x3\x2\x2\x2\x2B5\x2B6\a\\\x2\x2\x2B6"+
		"\x2B8\x3\x2\x2\x2\x2B7\x1A9\x3\x2\x2\x2\x2B7\x1C9\x3\x2\x2\x2\x2B7\x1D9"+
		"\x3\x2\x2\x2\x2B7\x1FA\x3\x2\x2\x2\x2B7\x212\x3\x2\x2\x2\x2B7\x234\x3"+
		"\x2\x2\x2\x2B7\x257\x3\x2\x2\x2\x2B7\x278\x3\x2\x2\x2\x2B7\x297\x3\x2"+
		"\x2\x2\x2B8\x31\x3\x2\x2\x2\x2B9\x2BA\a\x61\x2\x2\x2BA\x2BF\x5\x34\x1B"+
		"\x2\x2BB\x2BC\aY\x2\x2\x2BC\x2BE\x5\x34\x1B\x2\x2BD\x2BB\x3\x2\x2\x2\x2BE"+
		"\x2C1\x3\x2\x2\x2\x2BF\x2BD\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C2"+
		"\x3\x2\x2\x2\x2C1\x2BF\x3\x2\x2\x2\x2C2\x2C3\a\x62\x2\x2\x2C3\x2C7\x3"+
		"\x2\x2\x2\x2C4\x2C5\a\x61\x2\x2\x2C5\x2C7\a\x62\x2\x2\x2C6\x2B9\x3\x2"+
		"\x2\x2\x2C6\x2C4\x3\x2\x2\x2\x2C7\x33\x3\x2\x2\x2\x2C8\x2CA\x5\x36\x1C"+
		"\x2\x2C9\x2C8\x3\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB\x2C9\x3\x2\x2\x2"+
		"\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE"+
		"\x2D0\x5\x6\x4\x2\x2CF\x2CE\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D1"+
		"\x3\x2\x2\x2\x2D1\x2D2\aT\x2\x2\x2D2\x2E1\x5\"\x12\x2\x2D3\x2D5\x5\x36"+
		"\x1C\x2\x2D4\x2D3\x3\x2\x2\x2\x2D5\x2D8\x3\x2\x2\x2\x2D6\x2D4\x3\x2\x2"+
		"\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2DA\x3\x2\x2\x2\x2D8\x2D6\x3\x2\x2\x2"+
		"\x2D9\x2DB\a;\x2\x2\x2DA\x2D9\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DD"+
		"\x3\x2\x2\x2\x2DC\x2DE\a<\x2\x2\x2DD\x2DC\x3\x2\x2\x2\x2DD\x2DE\x3\x2"+
		"\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2E1\a\x10\x2\x2\x2E0\x2CB\x3\x2\x2"+
		"\x2\x2E0\x2D6\x3\x2\x2\x2\x2E1\x35\x3\x2\x2\x2\x2E2\x2E3\a\x1D\x2\x2\x2E3"+
		"\x37\x3\x2\x2\x2\x2E4\x2E5\aT\x2\x2\x2E5\x2E6\a\x13\x2\x2\x2E6\x2E7\a"+
		"\x61\x2\x2\x2E7\x2E8\x5:\x1E\x2\x2E8\x2E9\a\x62\x2\x2\x2E9\x2F1\x3\x2"+
		"\x2\x2\x2EA\x2EB\aT\x2\x2\x2EB\x2EC\a\x10\x2\x2\x2EC\x2ED\a\x61\x2\x2"+
		"\x2ED\x2EE\x5:\x1E\x2\x2EE\x2EF\a\x62\x2\x2\x2EF\x2F1\x3\x2\x2\x2\x2F0"+
		"\x2E4\x3\x2\x2\x2\x2F0\x2EA\x3\x2\x2\x2\x2F1\x39\x3\x2\x2\x2\x2F2\x2F7"+
		"\x5\x44#\x2\x2F3\x2F4\aY\x2\x2\x2F4\x2F6\x5\x44#\x2\x2F5\x2F3\x3\x2\x2"+
		"\x2\x2F6\x2F9\x3\x2\x2\x2\x2F7\x2F5\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2\x2"+
		"\x2F8\x2FC\x3\x2\x2\x2\x2F9\x2F7\x3\x2\x2\x2\x2FA\x2FC\x3\x2\x2\x2\x2FB"+
		"\x2F2\x3\x2\x2\x2\x2FB\x2FA\x3\x2\x2\x2\x2FC;\x3\x2\x2\x2\x2FD\x301\a"+
		"[\x2\x2\x2FE\x300\x5@!\x2\x2FF\x2FE\x3\x2\x2\x2\x300\x303\x3\x2\x2\x2"+
		"\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x304\x3\x2\x2\x2\x303"+
		"\x301\x3\x2\x2\x2\x304\x307\a\\\x2\x2\x305\x307\aS\x2\x2\x306\x2FD\x3"+
		"\x2\x2\x2\x306\x305\x3\x2\x2\x2\x307=\x3\x2\x2\x2\x308\x315\a\x63\x2\x2"+
		"\x309\x315\a\x65\x2\x2\x30A\x315\as\x2\x2\x30B\x315\aq\x2\x2\x30C\x315"+
		"\ar\x2\x2\x30D\x315\ag\x2\x2\x30E\x315\a\x66\x2\x2\x30F\x315\aU\x2\x2"+
		"\x310\x311\a_\x2\x2\x311\x315\a`\x2\x2\x312\x313\ap\x2\x2\x313\x315\a"+
		"p\x2\x2\x314\x308\x3\x2\x2\x2\x314\x309\x3\x2\x2\x2\x314\x30A\x3\x2\x2"+
		"\x2\x314\x30B\x3\x2\x2\x2\x314\x30C\x3\x2\x2\x2\x314\x30D\x3\x2\x2\x2"+
		"\x314\x30E\x3\x2\x2\x2\x314\x30F\x3\x2\x2\x2\x314\x310\x3\x2\x2\x2\x314"+
		"\x312\x3\x2\x2\x2\x315?\x3\x2\x2\x2\x316\x317\x5\x42\"\x2\x317\x318\a"+
		"S\x2\x2\x318\x35B\x3\x2\x2\x2\x319\x31A\a:\x2\x2\x31A\x31E\a[\x2\x2\x31B"+
		"\x31D\x5@!\x2\x31C\x31B\x3\x2\x2\x2\x31D\x320\x3\x2\x2\x2\x31E\x31C\x3"+
		"\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x321\x3\x2\x2\x2\x320\x31E\x3\x2"+
		"\x2\x2\x321\x35B\a\\\x2\x2\x322\x326\a[\x2\x2\x323\x325\x5@!\x2\x324\x323"+
		"\x3\x2\x2\x2\x325\x328\x3\x2\x2\x2\x326\x324\x3\x2\x2\x2\x326\x327\x3"+
		"\x2\x2\x2\x327\x329\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x329\x35B\a\\\x2"+
		"\x2\x32A\x35B\aS\x2\x2\x32B\x32C\x5\x44#\x2\x32C\x32D\aS\x2\x2\x32D\x35B"+
		"\x3\x2\x2\x2\x32E\x330\a(\x2\x2\x32F\x331\x5\x44#\x2\x330\x32F\x3\x2\x2"+
		"\x2\x330\x331\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x35B\aS\x2\x2\x333"+
		"\x334\a.\x2\x2\x334\x335\x5\x44#\x2\x335\x336\aS\x2\x2\x336\x35B\x3\x2"+
		"\x2\x2\x337\x338\a!\x2\x2\x338\x339\a\x61\x2\x2\x339\x33A\x5\x44#\x2\x33A"+
		"\x33B\a\x62\x2\x2\x33B\x33E\x5@!\x2\x33C\x33D\a\"\x2\x2\x33D\x33F\x5@"+
		"!\x2\x33E\x33C\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x35B\x3\x2\x2\x2"+
		"\x340\x341\a!\x2\x2\x341\x342\a\x61\x2\x2\x342\x343\x5\x42\"\x2\x343\x344"+
		"\a\x62\x2\x2\x344\x347\x5@!\x2\x345\x346\a\"\x2\x2\x346\x348\x5@!\x2\x347"+
		"\x345\x3\x2\x2\x2\x347\x348\x3\x2\x2\x2\x348\x35B\x3\x2\x2\x2\x349\x34A"+
		"\a#\x2\x2\x34A\x34D\a\x61\x2\x2\x34B\x34E\x5\x42\"\x2\x34C\x34E\a}\x2"+
		"\x2\x34D\x34B\x3\x2\x2\x2\x34D\x34C\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2"+
		"\x34F\x350\a$\x2\x2\x350\x351\x5\x44#\x2\x351\x352\a\x62\x2\x2\x352\x353"+
		"\x5@!\x2\x353\x35B\x3\x2\x2\x2\x354\x355\a\xF\x2\x2\x355\x356\x5\x44#"+
		"\x2\x356\x357\aS\x2\x2\x357\x35B\x3\x2\x2\x2\x358\x359\a\'\x2\x2\x359"+
		"\x35B\aS\x2\x2\x35A\x316\x3\x2\x2\x2\x35A\x319\x3\x2\x2\x2\x35A\x322\x3"+
		"\x2\x2\x2\x35A\x32A\x3\x2\x2\x2\x35A\x32B\x3\x2\x2\x2\x35A\x32E\x3\x2"+
		"\x2\x2\x35A\x333\x3\x2\x2\x2\x35A\x337\x3\x2\x2\x2\x35A\x340\x3\x2\x2"+
		"\x2\x35A\x349\x3\x2\x2\x2\x35A\x354\x3\x2\x2\x2\x35A\x358\x3\x2\x2\x2"+
		"\x35B\x41\x3\x2\x2\x2\x35C\x35D\t\x2\x2\x2\x35D\x35F\x5\x6\x4\x2\x35E"+
		"\x360\ag\x2\x2\x35F\x35E\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x363\x3"+
		"\x2\x2\x2\x361\x362\aT\x2\x2\x362\x364\x5\"\x12\x2\x363\x361\x3\x2\x2"+
		"\x2\x363\x364\x3\x2\x2\x2\x364\x367\x3\x2\x2\x2\x365\x366\au\x2\x2\x366"+
		"\x368\x5\x44#\x2\x367\x365\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x43"+
		"\x3\x2\x2\x2\x369\x36A\b#\x1\x2\x36A\x36B\t\x5\x2\x2\x36B\x395\x5\x44"+
		"#\x1A\x36C\x36D\t\x6\x2\x2\x36D\x395\x5\x44#\r\x36E\x36F\a\x61\x2\x2\x36F"+
		"\x370\x5\x44#\x2\x370\x371\a\x62\x2\x2\x371\x395\x3\x2\x2\x2\x372\x373"+
		"\ap\x2\x2\x373\x374\x5\x44#\x2\x374\x375\ap\x2\x2\x375\x395\x3\x2\x2\x2"+
		"\x376\x377\a\xE\x2\x2\x377\x378\x5\x1E\x10\x2\x378\x379\a\x61\x2\x2\x379"+
		"\x37A\x5:\x1E\x2\x37A\x37B\a\x62\x2\x2\x37B\x395\x3\x2\x2\x2\x37C\x37E"+
		"\a\xE\x2\x2\x37D\x37F\x5\x10\t\x2\x37E\x37D\x3\x2\x2\x2\x37E\x37F\x3\x2"+
		"\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x381\a\x61\x2\x2\x381\x382\x5:\x1E\x2"+
		"\x382\x383\a\x62\x2\x2\x383\x387\a[\x2\x2\x384\x386\x5\x30\x19\x2\x385"+
		"\x384\x3\x2\x2\x2\x386\x389\x3\x2\x2\x2\x387\x385\x3\x2\x2\x2\x387\x388"+
		"\x3\x2\x2\x2\x388\x38A\x3\x2\x2\x2\x389\x387\x3\x2\x2\x2\x38A\x38B\a\\"+
		"\x2\x2\x38B\x395\x3\x2\x2\x2\x38C\x395\x5\x1C\xF\x2\x38D\x395\aP\x2\x2"+
		"\x38E\x395\a\x10\x2\x2\x38F\x395\aN\x2\x2\x390\x395\aO\x2\x2\x391\x395"+
		"\a\x11\x2\x2\x392\x395\aQ\x2\x2\x393\x395\aR\x2\x2\x394\x369\x3\x2\x2"+
		"\x2\x394\x36C\x3\x2\x2\x2\x394\x36E\x3\x2\x2\x2\x394\x372\x3\x2\x2\x2"+
		"\x394\x376\x3\x2\x2\x2\x394\x37C\x3\x2\x2\x2\x394\x38C\x3\x2\x2\x2\x394"+
		"\x38D\x3\x2\x2\x2\x394\x38E\x3\x2\x2\x2\x394\x38F\x3\x2\x2\x2\x394\x390"+
		"\x3\x2\x2\x2\x394\x391\x3\x2\x2\x2\x394\x392\x3\x2\x2\x2\x394\x393\x3"+
		"\x2\x2\x2\x395\x3D4\x3\x2\x2\x2\x396\x397\f\x1F\x2\x2\x397\x398\aV\x2"+
		"\x2\x398\x3D3\x5\x44# \x399\x39A\f\x19\x2\x2\x39A\x39B\t\a\x2\x2\x39B"+
		"\x3D3\x5\x44#\x1A\x39C\x39D\f\x18\x2\x2\x39D\x39E\t\b\x2\x2\x39E\x3D3"+
		"\x5\x44#\x19\x39F\x3A0\f\x17\x2\x2\x3A0\x3A1\t\x3\x2\x2\x3A1\x3D3\x5\x44"+
		"#\x18\x3A2\x3A3\f\x16\x2\x2\x3A3\x3A4\t\t\x2\x2\x3A4\x3D3\x5\x44#\x17"+
		"\x3A5\x3A6\f\x15\x2\x2\x3A6\x3A7\aq\x2\x2\x3A7\x3D3\x5\x44#\x16\x3A8\x3A9"+
		"\f\x14\x2\x2\x3A9\x3AA\ar\x2\x2\x3AA\x3D3\x5\x44#\x15\x3AB\x3AC\f\x13"+
		"\x2\x2\x3AC\x3AD\as\x2\x2\x3AD\x3D3\x5\x44#\x14\x3AE\x3AF\f\x12\x2\x2"+
		"\x3AF\x3B0\a\x66\x2\x2\x3B0\x3D3\x5\x44#\x13\x3B1\x3B2\f\x11\x2\x2\x3B2"+
		"\x3B3\a$\x2\x2\x3B3\x3D3\x5\x44#\x12\x3B4\x3B5\f\f\x2\x2\x3B5\x3B6\ag"+
		"\x2\x2\x3B6\x3B7\x5\x44#\x2\x3B7\x3B8\aT\x2\x2\x3B8\x3B9\x5\x44#\f\x3B9"+
		"\x3D3\x3\x2\x2\x2\x3BA\x3BB\f\v\x2\x2\x3BB\x3BC\t\n\x2\x2\x3BC\x3D3\x5"+
		"\x44#\v\x3BD\x3BE\f \x2\x2\x3BE\x3BF\aU\x2\x2\x3BF\x3D3\x5\x6\x4\x2\x3C0"+
		"\x3C1\f\x1E\x2\x2\x3C1\x3C2\aZ\x2\x2\x3C2\x3D3\x5\x6\x4\x2\x3C3\x3C4\f"+
		"\x1D\x2\x2\x3C4\x3C5\a\x61\x2\x2\x3C5\x3C6\x5:\x1E\x2\x3C6\x3C7\a\x62"+
		"\x2\x2\x3C7\x3D3\x3\x2\x2\x2\x3C8\x3C9\f\x1C\x2\x2\x3C9\x3CA\a_\x2\x2"+
		"\x3CA\x3CB\x5:\x1E\x2\x3CB\x3CC\a`\x2\x2\x3CC\x3D3\x3\x2\x2\x2\x3CD\x3CE"+
		"\f\x1B\x2\x2\x3CE\x3D3\ag\x2\x2\x3CF\x3D0\f\xE\x2\x2\x3D0\x3D1\t\v\x2"+
		"\x2\x3D1\x3D3\x5 \x11\x2\x3D2\x396\x3\x2\x2\x2\x3D2\x399\x3\x2\x2\x2\x3D2"+
		"\x39C\x3\x2\x2\x2\x3D2\x39F\x3\x2\x2\x2\x3D2\x3A2\x3\x2\x2\x2\x3D2\x3A5"+
		"\x3\x2\x2\x2\x3D2\x3A8\x3\x2\x2\x2\x3D2\x3AB\x3\x2\x2\x2\x3D2\x3AE\x3"+
		"\x2\x2\x2\x3D2\x3B1\x3\x2\x2\x2\x3D2\x3B4\x3\x2\x2\x2\x3D2\x3BA\x3\x2"+
		"\x2\x2\x3D2\x3BD\x3\x2\x2\x2\x3D2\x3C0\x3\x2\x2\x2\x3D2\x3C3\x3\x2\x2"+
		"\x2\x3D2\x3C8\x3\x2\x2\x2\x3D2\x3CD\x3\x2\x2\x2\x3D2\x3CF\x3\x2\x2\x2"+
		"\x3D3\x3D6\x3\x2\x2\x2\x3D4\x3D2\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5"+
		"\x45\x3\x2\x2\x2\x3D6\x3D4\x3\x2\x2\x2~IOZ\x61jpx~\x84\x87\x8C\x93\x9B"+
		"\xA1\xA8\xAC\xB3\xB9\xBE\xC6\xCC\xD1\xD7\xDC\xE0\xE8\xEB\xFB\x103\x10A"+
		"\x10E\x111\x119\x128\x12E\x138\x143\x14A\x150\x156\x158\x15C\x160\x169"+
		"\x16F\x177\x17E\x183\x18B\x195\x19D\x1A4\x1A9\x1AF\x1B4\x1B9\x1BC\x1C1"+
		"\x1C9\x1CF\x1D9\x1DF\x1E4\x1EC\x1F2\x1FA\x200\x207\x20B\x212\x218\x21E"+
		"\x226\x22C\x234\x23A\x241\x249\x24F\x257\x25D\x262\x26A\x270\x278\x27E"+
		"\x289\x28F\x297\x29D\x2A3\x2A6\x2AB\x2B2\x2B7\x2BF\x2C6\x2CB\x2CF\x2D6"+
		"\x2DA\x2DD\x2E0\x2F0\x2F7\x2FB\x301\x306\x314\x31E\x326\x330\x33E\x347"+
		"\x34D\x35A\x35F\x363\x367\x37E\x387\x394\x3D2\x3D4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Parser
