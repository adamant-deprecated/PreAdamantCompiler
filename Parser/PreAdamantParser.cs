//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class PreAdamantParser : Parser {
	public const int
		SingleLineDocComment=1, SingleLineComment=2, BlockComment=3, PreprocessorLine=4, 
		Whitespace=5, Newline=6, PreprocessorSkippedSection=7, Using=8, Namespace=9, 
		Class=10, Enum=11, New=12, Delete=13, Self=14, Uninitialized=15, Where=16, 
		Base=17, Operator=18, Var=19, Let=20, Get=21, Set=22, Sealed=23, Override=24, 
		Abstract=25, Params=26, Extern=27, Do=28, While=29, If=30, Else=31, For=32, 
		In=33, Switch=34, Break=35, Continue=36, Return=37, Try=38, TryPanic=39, 
		TryResult=40, Catch=41, Finally=42, Throw=43, Implicit=44, Explicit=45, 
		Conversion=46, As=47, AsPanic=48, AsResult=49, Public=50, Private=51, 
		Protected=52, Internal=53, Safe=54, Unsafe=55, Own=56, Mutable=57, Immutable=58, 
		Async=59, Await=60, Requires=61, Ensures=62, Void=63, String=64, ByteType=65, 
		IntType=66, UIntType=67, FloatType=68, FixedType=69, DecimalType=70, SizeType=71, 
		OffsetType=72, UnsafeArrayType=73, ReservedWord=74, BooleanLiteral=75, 
		IntLiteral=76, NullLiteral=77, StringLiteral=78, CharLiteral=79, Semicolon=80, 
		Colon=81, Dot=82, DotDot=83, ColonColon=84, Tilde=85, Comma=86, Lambda=87, 
		LeftBrace=88, RightBrace=89, LeftAngle=90, RightAngle=91, LeftBracket=92, 
		RightBracket=93, LeftParen=94, RightParen=95, Asterisk=96, AtSign=97, 
		AddressOf=98, Coalesce=99, IsNull=100, Equal=101, NotEqual=102, LessThanOrEqual=103, 
		GreaterThanOrEqual=104, TypeList=105, Plus=106, Minus=107, Divide=108, 
		Pipe=109, And=110, Xor=111, Or=112, Not=113, Assign=114, AddAssign=115, 
		SubtractAssign=116, MultiplyAssign=117, DivideAssign=118, AndAssign=119, 
		XorAssign=120, OrAssign=121, PlaceHolder=122, Identifier=123, EscapedIdentifier=124, 
		Unknown=125;
	public const int
		RULE_compilationUnit = 0, RULE_usingDirective = 1, RULE_identifier = 2, 
		RULE_namespaceName = 3, RULE_declaration = 4, RULE_contract = 5, RULE_attribute = 6, 
		RULE_baseTypes = 7, RULE_accessModifier = 8, RULE_safetyModifier = 9, 
		RULE_classInheritanceModifier = 10, RULE_methodInheritanceModifier = 11, 
		RULE_conversionModifier = 12, RULE_asyncModifier = 13, RULE_typeParameters = 14, 
		RULE_typeParameter = 15, RULE_typeArguments = 16, RULE_identifierOrPredefinedType = 17, 
		RULE_simpleName = 18, RULE_name = 19, RULE_valueType = 20, RULE_referenceType = 21, 
		RULE_lifetime = 22, RULE_funcTypeParameterList = 23, RULE_funcTypeParameter = 24, 
		RULE_constExpression = 25, RULE_typeParameterConstraintClause = 26, RULE_typeParameterConstraint = 27, 
		RULE_member = 28, RULE_parameterList = 29, RULE_parameter = 30, RULE_parameterModifier = 31, 
		RULE_constructorInitializer = 32, RULE_argumentList = 33, RULE_methodBody = 34, 
		RULE_overloadableOperator = 35, RULE_statement = 36, RULE_localVariableDeclaration = 37, 
		RULE_expression = 38;
	public static readonly string[] ruleNames = {
		"compilationUnit", "usingDirective", "identifier", "namespaceName", "declaration", 
		"contract", "attribute", "baseTypes", "accessModifier", "safetyModifier", 
		"classInheritanceModifier", "methodInheritanceModifier", "conversionModifier", 
		"asyncModifier", "typeParameters", "typeParameter", "typeArguments", "identifierOrPredefinedType", 
		"simpleName", "name", "valueType", "referenceType", "lifetime", "funcTypeParameterList", 
		"funcTypeParameter", "constExpression", "typeParameterConstraintClause", 
		"typeParameterConstraint", "member", "parameterList", "parameter", "parameterModifier", 
		"constructorInitializer", "argumentList", "methodBody", "overloadableOperator", 
		"statement", "localVariableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'using'", "'namespace'", 
		"'class'", "'enum'", "'new'", "'delete'", "'self'", "'uninitialized'", 
		"'where'", "'base'", "'operator'", "'var'", "'let'", "'get'", "'set'", 
		"'sealed'", "'override'", "'abstract'", "'params'", "'extern'", "'do'", 
		"'while'", "'if'", "'else'", "'for'", "'in'", "'switch'", "'break'", "'continue'", 
		"'return'", "'try'", "'try!'", "'try?'", "'catch'", "'finally'", "'throw'", 
		"'implicit'", "'explicit'", "'conversion'", "'as'", "'as!'", "'as?'", 
		"'public'", "'private'", "'protected'", "'internal'", "'safe'", "'unsafe'", 
		"'own'", "'mut'", "'immut'", "'async'", "'await'", "'requires'", "'ensures'", 
		"'void'", "'string'", "'byte'", null, null, null, null, null, "'size'", 
		"'offset'", "'UnsafeArray'", null, null, null, "'null'", null, null, "';'", 
		"':'", "'.'", "'..'", "'::'", "'~'", "','", "'->'", "'{'", "'}'", "'<'", 
		"'>'", "'['", "']'", "'('", "')'", "'*'", "'@'", "'&'", "'??'", "'?'", 
		"'=='", "'<>'", "'<='", "'>='", "'...'", "'+'", "'-'", "'/'", "'|'", "'and'", 
		"'xor'", "'or'", "'not'", "'='", "'+='", "'-='", "'*='", "'/='", "'and='", 
		"'xor='", "'or='", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLineDocComment", "SingleLineComment", "BlockComment", "PreprocessorLine", 
		"Whitespace", "Newline", "PreprocessorSkippedSection", "Using", "Namespace", 
		"Class", "Enum", "New", "Delete", "Self", "Uninitialized", "Where", "Base", 
		"Operator", "Var", "Let", "Get", "Set", "Sealed", "Override", "Abstract", 
		"Params", "Extern", "Do", "While", "If", "Else", "For", "In", "Switch", 
		"Break", "Continue", "Return", "Try", "TryPanic", "TryResult", "Catch", 
		"Finally", "Throw", "Implicit", "Explicit", "Conversion", "As", "AsPanic", 
		"AsResult", "Public", "Private", "Protected", "Internal", "Safe", "Unsafe", 
		"Own", "Mutable", "Immutable", "Async", "Await", "Requires", "Ensures", 
		"Void", "String", "ByteType", "IntType", "UIntType", "FloatType", "FixedType", 
		"DecimalType", "SizeType", "OffsetType", "UnsafeArrayType", "ReservedWord", 
		"BooleanLiteral", "IntLiteral", "NullLiteral", "StringLiteral", "CharLiteral", 
		"Semicolon", "Colon", "Dot", "DotDot", "ColonColon", "Tilde", "Comma", 
		"Lambda", "LeftBrace", "RightBrace", "LeftAngle", "RightAngle", "LeftBracket", 
		"RightBracket", "LeftParen", "RightParen", "Asterisk", "AtSign", "AddressOf", 
		"Coalesce", "IsNull", "Equal", "NotEqual", "LessThanOrEqual", "GreaterThanOrEqual", 
		"TypeList", "Plus", "Minus", "Divide", "Pipe", "And", "Xor", "Or", "Not", 
		"Assign", "AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", 
		"AndAssign", "XorAssign", "OrAssign", "PlaceHolder", "Identifier", "EscapedIdentifier", 
		"Unknown"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreAdamantParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreAdamantParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PreAdamantParser.Eof, 0); }
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Using) {
				{
				{
				State = 78; usingDirective();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
				{
				{
				State = 84; declaration();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 90; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(Using);
			State = 93; namespaceName();
			State = 94; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken token;
		public ITerminalNode Identifier() { return GetToken(PreAdamantParser.Identifier, 0); }
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			State = 98;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; _localctx.token = Match(Identifier);
				}
				break;
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; _localctx.token = Match(EscapedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 101; Match(Dot);
				State = 102; _localctx._identifier = identifier();
				_localctx._identifiers.Add(_localctx._identifier);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDeclarationContext : DeclarationContext {
		public ReferenceTypeContext returnType;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public FunctionDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclarationContext : DeclarationContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public ClassDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : DeclarationContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespaceDeclarationContext : DeclarationContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 211;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new NamespaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(Namespace);
				State = 109; namespaceName();
				State = 110; Match(LeftBrace);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Using) {
					{
					{
					State = 111; usingDirective();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Namespace) | (1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 117; declaration();
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 123; Match(RightBrace);
				}
				break;
			case 2:
				_localctx = new ClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 125; attribute();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; accessModifier();
				State = 133;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 132; safetyModifier();
					}
				}

				State = 136;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 135; classInheritanceModifier();
					}
				}

				State = 138; Match(Class);
				State = 139; identifier();
				State = 141;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 140; typeParameters();
					}
				}

				State = 144;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 143; baseTypes();
					}
				}

				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 146; typeParameterConstraintClause();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 152; Match(LeftBrace);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 153; member();
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 159; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 161; attribute();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 167; accessModifier();
				State = 168;
				((VariableDeclarationContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((VariableDeclarationContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 169; identifier();
				State = 172;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 170; Match(Colon);
					State = 171; referenceType();
					}
				}

				State = 176;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 174; Match(Assign);
					State = 175; expression(0);
					}
				}

				State = 178; Match(Semicolon);
				}
				break;
			case 4:
				_localctx = new FunctionDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 180; attribute();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 186; accessModifier();
				State = 188;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 187; safetyModifier();
					}
				}

				State = 190; identifier();
				State = 192;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 191; typeArguments();
					}
				}

				State = 194; parameterList();
				State = 195; Match(Lambda);
				State = 196; ((FunctionDeclarationContext)_localctx).returnType = referenceType();
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 197; typeParameterConstraintClause();
					}
					}
					State = 202;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 203; contract();
					}
					}
					State = 208;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 209; methodBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractContext : ParserRuleContext {
		public ContractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contract; } }
	 
		public ContractContext() { }
		public virtual void CopyFrom(ContractContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPrecondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPrecondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostconditionContext : ContractContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostconditionContext(ContractContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPostcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPostcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractContext contract() {
		ContractContext _localctx = new ContractContext(Context, State);
		EnterRule(_localctx, 10, RULE_contract);
		try {
			State = 217;
			switch (TokenStream.La(1)) {
			case Requires:
				_localctx = new PreconditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; Match(Requires);
				State = 214; expression(0);
				}
				break;
			case Ensures:
				_localctx = new PostconditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(Ensures);
				State = 216; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode EscapedIdentifier() { return GetToken(PreAdamantParser.EscapedIdentifier, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(EscapedIdentifier);
			State = 222;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 220; Match(LeftParen);
				State = 221; Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypesContext : ParserRuleContext {
		public NameContext baseType;
		public NameContext _name;
		public IList<NameContext> _interfaces = new List<NameContext>();
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public BaseTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBaseTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBaseTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypesContext baseTypes() {
		BaseTypesContext _localctx = new BaseTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 224; Match(Colon);
			State = 226;
			_la = TokenStream.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (Void - 63)) | (1L << (String - 63)) | (1L << (ByteType - 63)) | (1L << (IntType - 63)) | (1L << (UIntType - 63)) | (1L << (FloatType - 63)) | (1L << (SizeType - 63)) | (1L << (OffsetType - 63)) | (1L << (UnsafeArrayType - 63)) | (1L << (Identifier - 63)) | (1L << (EscapedIdentifier - 63)))) != 0)) {
				{
				State = 225; _localctx.baseType = name(0);
				}
			}

			State = 237;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 228; Match(Colon);
				State = 229; _localctx._name = name(0);
				_localctx._interfaces.Add(_localctx._name);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 230; Match(Comma);
					State = 231; _localctx._name = name(0);
					_localctx._interfaces.Add(_localctx._name);
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public IToken token;
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_accessModifier);
		try {
			State = 243;
			switch (TokenStream.La(1)) {
			case Public:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; _localctx.token = Match(Public);
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; _localctx.token = Match(Private);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; _localctx.token = Match(Protected);
				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242; _localctx.token = Match(Internal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafetyModifierContext : ParserRuleContext {
		public IToken token;
		public SafetyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safetyModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSafetyModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSafetyModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafetyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafetyModifierContext safetyModifier() {
		SafetyModifierContext _localctx = new SafetyModifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_safetyModifier);
		try {
			State = 247;
			switch (TokenStream.La(1)) {
			case Safe:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245; _localctx.token = Match(Safe);
				}
				break;
			case Unsafe:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; _localctx.token = Match(Unsafe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public ClassInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterClassInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitClassInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritanceModifierContext classInheritanceModifier() {
		ClassInheritanceModifierContext _localctx = new ClassInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_classInheritanceModifier);
		try {
			State = 251;
			switch (TokenStream.La(1)) {
			case Abstract:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; _localctx.token = Match(Abstract);
				}
				break;
			case Sealed:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; _localctx.token = Match(Sealed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInheritanceModifierContext : ParserRuleContext {
		public IToken token;
		public MethodInheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInheritanceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodInheritanceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodInheritanceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInheritanceModifierContext methodInheritanceModifier() {
		MethodInheritanceModifierContext _localctx = new MethodInheritanceModifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodInheritanceModifier);
		try {
			State = 258;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; _localctx.token = Match(Abstract);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; _localctx.token = Match(Override);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255; _localctx.token = Match(Sealed);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256; _localctx.token = Match(Sealed);
				State = 257; _localctx.token = Match(Override);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionModifierContext : ParserRuleContext {
		public IToken token;
		public ConversionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionModifierContext conversionModifier() {
		ConversionModifierContext _localctx = new ConversionModifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_conversionModifier);
		try {
			State = 262;
			switch (TokenStream.La(1)) {
			case Implicit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; _localctx.token = Match(Implicit);
				}
				break;
			case Explicit:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; _localctx.token = Match(Explicit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsyncModifierContext : ParserRuleContext {
		public IToken token;
		public AsyncModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asyncModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAsyncModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAsyncModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsyncModifierContext asyncModifier() {
		AsyncModifierContext _localctx = new AsyncModifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_asyncModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; _localctx.token = Match(Async);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(LeftAngle);
			State = 267; typeParameter();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 268; Match(Comma);
				State = 269; typeParameter();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 275; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IToken isList;
		public ValueTypeContext baseType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeParameter);
		int _la;
		try {
			State = 286;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277; identifier();
				State = 279;
				_la = TokenStream.La(1);
				if (_la==TypeList) {
					{
					State = 278; _localctx.isList = Match(TypeList);
					}
				}

				State = 283;
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 281; Match(Colon);
					State = 282; _localctx.baseType = valueType(0);
					}
					break;
				}
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; lifetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ReferenceTypeContext[] referenceType() {
			return GetRuleContexts<ReferenceTypeContext>();
		}
		public ReferenceTypeContext referenceType(int i) {
			return GetRuleContext<ReferenceTypeContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(LeftAngle);
			State = 289; referenceType();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 290; Match(Comma);
				State = 291; referenceType();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 297; Match(RightAngle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPredefinedTypeContext : ParserRuleContext {
		public IToken token;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IntType() { return GetToken(PreAdamantParser.IntType, 0); }
		public ITerminalNode UIntType() { return GetToken(PreAdamantParser.UIntType, 0); }
		public ITerminalNode FloatType() { return GetToken(PreAdamantParser.FloatType, 0); }
		public ITerminalNode SizeType() { return GetToken(PreAdamantParser.SizeType, 0); }
		public ITerminalNode OffsetType() { return GetToken(PreAdamantParser.OffsetType, 0); }
		public ITerminalNode UnsafeArrayType() { return GetToken(PreAdamantParser.UnsafeArrayType, 0); }
		public IdentifierOrPredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPredefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
		IdentifierOrPredefinedTypeContext _localctx = new IdentifierOrPredefinedTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifierOrPredefinedType);
		try {
			State = 309;
			switch (TokenStream.La(1)) {
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; identifier();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; _localctx.token = Match(Void);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301; _localctx.token = Match(String);
				}
				break;
			case ByteType:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302; _localctx.token = Match(ByteType);
				}
				break;
			case IntType:
				EnterOuterAlt(_localctx, 5);
				{
				State = 303; _localctx.token = Match(IntType);
				}
				break;
			case UIntType:
				EnterOuterAlt(_localctx, 6);
				{
				State = 304; _localctx.token = Match(UIntType);
				}
				break;
			case FloatType:
				EnterOuterAlt(_localctx, 7);
				{
				State = 305; _localctx.token = Match(FloatType);
				}
				break;
			case SizeType:
				EnterOuterAlt(_localctx, 8);
				{
				State = 306; _localctx.token = Match(SizeType);
				}
				break;
			case OffsetType:
				EnterOuterAlt(_localctx, 9);
				{
				State = 307; _localctx.token = Match(OffsetType);
				}
				break;
			case UnsafeArrayType:
				EnterOuterAlt(_localctx, 10);
				{
				State = 308; _localctx.token = Match(UnsafeArrayType);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : ParserRuleContext {
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
	 
		public SimpleNameContext() { }
		public virtual void CopyFrom(SimpleNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public GenericNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierNameContext : SimpleNameContext {
		public IdentifierOrPredefinedTypeContext identifierOrPredefinedType() {
			return GetRuleContext<IdentifierOrPredefinedTypeContext>(0);
		}
		public IdentifierNameContext(SimpleNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleName);
		try {
			State = 315;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new IdentifierNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; identifierOrPredefinedType();
				}
				break;
			case 2:
				_localctx = new GenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; identifierOrPredefinedType();
				State = 313; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleNameNameContext : NameContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public SimpleNameNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext leftName;
		public SimpleNameContext rightName;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NameContext _localctx = new NameContext(Context, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleNameNameContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 318; simpleName();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).leftName = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 320;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 321; Match(Dot);
					State = 322; ((QualifiedNameContext)_localctx).rightName = simpleName();
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueTypeContext : ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueType; } }
	 
		public ValueTypeContext() { }
		public virtual void CopyFrom(ValueTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : ValueTypeContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : ValueTypeContext {
		public FuncTypeParameterListContext funcTypeParameterList() {
			return GetRuleContext<FuncTypeParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public FunctionTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : ValueTypeContext {
		public ValueTypeContext _valueType;
		public IList<ValueTypeContext> _types = new List<ValueTypeContext>();
		public ValueTypeContext[] valueType() {
			return GetRuleContexts<ValueTypeContext>();
		}
		public ValueTypeContext valueType(int i) {
			return GetRuleContext<ValueTypeContext>(i);
		}
		public TupleTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaybeTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public MaybeTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMaybeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMaybeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerTypeContext : ValueTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public PointerTypeContext(ValueTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypeContext valueType() {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueTypeContext _localctx = new ValueTypeContext(Context, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			switch (TokenStream.La(1)) {
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case Identifier:
			case EscapedIdentifier:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 329; name(0);
				}
				break;
			case LeftBracket:
				{
				_localctx = new TupleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 343;
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 330; Match(LeftBracket);
					State = 331; ((TupleTypeContext)_localctx)._valueType = valueType(0);
					((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
					State = 336;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==Comma) {
						{
						{
						State = 332; Match(Comma);
						State = 333; ((TupleTypeContext)_localctx)._valueType = valueType(0);
						((TupleTypeContext)_localctx)._types.Add(((TupleTypeContext)_localctx)._valueType);
						}
						}
						State = 338;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 339; Match(RightBracket);
					}
					break;
				case 2:
					{
					State = 341; Match(LeftBracket);
					State = 342; Match(RightBracket);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				_localctx = new FunctionTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 345; funcTypeParameterList();
				State = 346; Match(Lambda);
				State = 347; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 357;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 355;
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						_localctx = new MaybeTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 351;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 352; Match(IsNull);
						}
						break;
					case 2:
						{
						_localctx = new PointerTypeContext(new ValueTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueType);
						State = 353;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 354; Match(Asterisk);
						}
						break;
					}
					} 
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	 
		public ReferenceTypeContext() { }
		public virtual void CopyFrom(ReferenceTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OwnedImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public ImmutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterImmutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitImmutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public MutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnedMutableReferenceTypeContext : ReferenceTypeContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public OwnedMutableReferenceTypeContext(ReferenceTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOwnedMutableReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOwnedMutableReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnedMutableReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_referenceType);
		int _la;
		try {
			State = 374;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				_localctx = new ImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 360; lifetime();
					}
				}

				State = 363; valueType(0);
				}
				break;
			case 2:
				_localctx = new MutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 365;
				_la = TokenStream.La(1);
				if (_la==Tilde) {
					{
					State = 364; lifetime();
					}
				}

				State = 367; Match(Mutable);
				State = 368; valueType(0);
				}
				break;
			case 3:
				_localctx = new OwnedImmutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 369; Match(Own);
				State = 370; valueType(0);
				}
				break;
			case 4:
				_localctx = new OwnedMutableReferenceTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 371; Match(Own);
				State = 372; Match(Mutable);
				State = 373; valueType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 44, RULE_lifetime);
		try {
			State = 380;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; Match(Tilde);
				State = 377; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; Match(Tilde);
				State = 379; Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterListContext : ParserRuleContext {
		public FuncTypeParameterContext[] funcTypeParameter() {
			return GetRuleContexts<FuncTypeParameterContext>();
		}
		public FuncTypeParameterContext funcTypeParameter(int i) {
			return GetRuleContext<FuncTypeParameterContext>(i);
		}
		public FuncTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterListContext funcTypeParameterList() {
		FuncTypeParameterListContext _localctx = new FuncTypeParameterListContext(Context, State);
		EnterRule(_localctx, 46, RULE_funcTypeParameterList);
		int _la;
		try {
			State = 395;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382; Match(LeftParen);
				State = 383; funcTypeParameter();
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 384; Match(Comma);
					State = 385; funcTypeParameter();
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 391; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; Match(LeftParen);
				State = 394; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeParameterContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FuncTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterFuncTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitFuncTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeParameterContext funcTypeParameter() {
		FuncTypeParameterContext _localctx = new FuncTypeParameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_funcTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Params) {
				{
				{
				State = 397; parameterModifier();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 403; referenceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_constExpression);
		try {
			State = 408;
			switch (TokenStream.La(1)) {
			case IntLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; Match(IntLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; Match(StringLiteral);
				}
				break;
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintClauseContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeParameterConstraintContext[] typeParameterConstraint() {
			return GetRuleContexts<TypeParameterConstraintContext>();
		}
		public TypeParameterConstraintContext typeParameterConstraint(int i) {
			return GetRuleContext<TypeParameterConstraintContext>(i);
		}
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public TypeParameterConstraintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterConstraintClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintClauseContext typeParameterConstraintClause() {
		TypeParameterConstraintClauseContext _localctx = new TypeParameterConstraintClauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeParameterConstraintClause);
		int _la;
		try {
			State = 426;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410; Match(Where);
				State = 411; typeParameter();
				State = 412; Match(Colon);
				State = 413; typeParameterConstraint();
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 414; Match(Comma);
					State = 415; typeParameterConstraint();
					}
					}
					State = 420;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421; Match(Where);
				State = 422; typeParameter();
				State = 423;
				_la = TokenStream.La(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (LeftAngle - 90)) | (1L << (RightAngle - 90)) | (1L << (LessThanOrEqual - 90)) | (1L << (GreaterThanOrEqual - 90)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 424; Match(IntLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintContext : ParserRuleContext {
		public TypeParameterConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraint; } }
	 
		public TypeParameterConstraintContext() { }
		public virtual void CopyFrom(TypeParameterConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorConstraintContext : TypeParameterConstraintContext {
		public ConstructorConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeConstraintContext : TypeParameterConstraintContext {
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public TypeConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListParameterConstraintContext : TypeParameterConstraintContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeListParameterConstraintContext(TypeParameterConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTypeListParameterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTypeListParameterConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeListParameterConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintContext typeParameterConstraint() {
		TypeParameterConstraintContext _localctx = new TypeParameterConstraintContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeParameterConstraint);
		try {
			State = 433;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 428; Match(New);
				State = 429; Match(LeftParen);
				State = 430; Match(RightParen);
				}
				break;
			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; valueType(0);
				}
				break;
			case 3:
				_localctx = new TypeListParameterConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 432; typeParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassDeclarationContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public ClassInheritanceModifierContext classInheritanceModifier() {
			return GetRuleContext<ClassInheritanceModifierContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NestedClassDeclarationContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNestedClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNestedClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorOverloadContext : MemberContext {
		public ReferenceTypeContext returnType;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public OperatorOverloadContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOperatorOverload(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOperatorOverload(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverload(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public IndexerContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : MemberContext {
		public ReferenceTypeContext returnType;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ConstructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DestructorContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public DestructorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : MemberContext {
		public ReferenceTypeContext returnType;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public MethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessorContext : MemberContext {
		public IToken kind;
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MethodInheritanceModifierContext methodInheritanceModifier() {
			return GetRuleContext<MethodInheritanceModifierContext>(0);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public AsyncModifierContext asyncModifier() {
			return GetRuleContext<AsyncModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public AccessorContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConversionMethodContext : MemberContext {
		public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ConversionModifierContext conversionModifier() {
			return GetRuleContext<ConversionModifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SafetyModifierContext safetyModifier() {
			return GetRuleContext<SafetyModifierContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeParameterConstraintClauseContext[] typeParameterConstraintClause() {
			return GetRuleContexts<TypeParameterConstraintClauseContext>();
		}
		public TypeParameterConstraintClauseContext typeParameterConstraintClause(int i) {
			return GetRuleContext<TypeParameterConstraintClauseContext>(i);
		}
		public ContractContext[] contract() {
			return GetRuleContexts<ContractContext>();
		}
		public ContractContext contract(int i) {
			return GetRuleContext<ContractContext>(i);
		}
		public ConversionMethodContext(MemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConversionMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConversionMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 56, RULE_member);
		int _la;
		try {
			State = 715;
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 435; attribute();
					}
					}
					State = 440;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 441; accessModifier();
				State = 443;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 442; safetyModifier();
					}
				}

				State = 445; Match(New);
				State = 447;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 446; identifier();
					}
				}

				State = 449; parameterList();
				State = 452;
				_la = TokenStream.La(1);
				if (_la==Lambda) {
					{
					State = 450; Match(Lambda);
					State = 451; ((ConstructorContext)_localctx).returnType = referenceType();
					}
				}

				State = 455;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 454; constructorInitializer();
					}
				}

				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 457; contract();
					}
					}
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 463; methodBody();
				}
				break;
			case 2:
				_localctx = new DestructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 465; attribute();
					}
					}
					State = 470;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 471; accessModifier();
				State = 473;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 472; safetyModifier();
					}
				}

				State = 475; Match(Delete);
				State = 476; parameterList();
				State = 477; methodBody();
				}
				break;
			case 3:
				_localctx = new ConversionMethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 479; attribute();
					}
					}
					State = 484;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 485; accessModifier();
				State = 487;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 486; safetyModifier();
					}
				}

				State = 489; conversionModifier();
				State = 490; Match(Conversion);
				State = 492;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 491; typeArguments();
					}
				}

				State = 494; parameterList();
				State = 495; Match(Lambda);
				State = 496; referenceType();
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 497; typeParameterConstraintClause();
					}
					}
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 503; contract();
					}
					}
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 509; methodBody();
				}
				break;
			case 4:
				_localctx = new FieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 511; attribute();
					}
					}
					State = 516;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 517; accessModifier();
				State = 518;
				((FieldContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Var || _la==Let) ) {
					((FieldContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 519; identifier();
				State = 522;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 520; Match(Colon);
					State = 521; referenceType();
					}
				}

				State = 526;
				_la = TokenStream.La(1);
				if (_la==Assign) {
					{
					State = 524; Match(Assign);
					State = 525; expression(0);
					}
				}

				State = 528; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new AccessorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 530; attribute();
					}
					}
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 536; accessModifier();
				State = 538;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 537; methodInheritanceModifier();
					}
				}

				State = 541;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 540; safetyModifier();
					}
				}

				State = 544;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 543; asyncModifier();
					}
				}

				State = 546;
				((AccessorContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((AccessorContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 547; identifier();
				State = 549;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 548; typeArguments();
					}
				}

				State = 551; parameterList();
				State = 552; Match(Lambda);
				State = 553; referenceType();
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 554; typeParameterConstraintClause();
					}
					}
					State = 559;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 560; contract();
					}
					}
					State = 565;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 566; methodBody();
				}
				break;
			case 6:
				_localctx = new IndexerContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 568; attribute();
					}
					}
					State = 573;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 574; accessModifier();
				State = 576;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 575; methodInheritanceModifier();
					}
				}

				State = 579;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 578; safetyModifier();
					}
				}

				State = 582;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 581; asyncModifier();
					}
				}

				State = 584;
				((IndexerContext)_localctx).kind = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==Get || _la==Set) ) {
					((IndexerContext)_localctx).kind = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 585; Match(LeftBracket);
				State = 586; Match(RightBracket);
				State = 588;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 587; typeArguments();
					}
				}

				State = 590; parameterList();
				State = 591; Match(Lambda);
				State = 592; referenceType();
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 593; typeParameterConstraintClause();
					}
					}
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 599; contract();
					}
					}
					State = 604;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 605; methodBody();
				}
				break;
			case 7:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 607; attribute();
					}
					}
					State = 612;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 613; accessModifier();
				State = 615;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 614; methodInheritanceModifier();
					}
				}

				State = 618;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 617; safetyModifier();
					}
				}

				State = 621;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 620; asyncModifier();
					}
				}

				State = 623; identifier();
				State = 625;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 624; typeArguments();
					}
				}

				State = 627; parameterList();
				State = 628; Match(Lambda);
				State = 629; ((MethodContext)_localctx).returnType = referenceType();
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 630; typeParameterConstraintClause();
					}
					}
					State = 635;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 636; contract();
					}
					}
					State = 641;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 642; methodBody();
				}
				break;
			case 8:
				_localctx = new OperatorOverloadContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 644; attribute();
					}
					}
					State = 649;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 650; accessModifier();
				State = 652;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Sealed) | (1L << Override) | (1L << Abstract))) != 0)) {
					{
					State = 651; methodInheritanceModifier();
					}
				}

				State = 655;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 654; safetyModifier();
					}
				}

				State = 658;
				_la = TokenStream.La(1);
				if (_la==Async) {
					{
					State = 657; asyncModifier();
					}
				}

				State = 660; Match(Operator);
				State = 661; overloadableOperator();
				State = 662; parameterList();
				State = 663; Match(Lambda);
				State = 664; ((OperatorOverloadContext)_localctx).returnType = referenceType();
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 665; typeParameterConstraintClause();
					}
					}
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Requires || _la==Ensures) {
					{
					{
					State = 671; contract();
					}
					}
					State = 676;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 677; methodBody();
				}
				break;
			case 9:
				_localctx = new NestedClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==EscapedIdentifier) {
					{
					{
					State = 679; attribute();
					}
					}
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 685; accessModifier();
				State = 687;
				_la = TokenStream.La(1);
				if (_la==Safe || _la==Unsafe) {
					{
					State = 686; safetyModifier();
					}
				}

				State = 690;
				_la = TokenStream.La(1);
				if (_la==Sealed || _la==Abstract) {
					{
					State = 689; classInheritanceModifier();
					}
				}

				State = 692; Match(Class);
				State = 693; identifier();
				State = 695;
				_la = TokenStream.La(1);
				if (_la==LeftAngle) {
					{
					State = 694; typeParameters();
					}
				}

				State = 698;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 697; baseTypes();
					}
				}

				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Where) {
					{
					{
					State = 700; typeParameterConstraintClause();
					}
					}
					State = 705;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 706; Match(LeftBrace);
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 707; member();
					}
					}
					State = 712;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 713; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _parameters = new List<ParameterContext>();
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 58, RULE_parameterList);
		int _la;
		try {
			State = 730;
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717; Match(LeftParen);
				State = 718; _localctx._parameter = parameter();
				_localctx._parameters.Add(_localctx._parameter);
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 719; Match(Comma);
					State = 720; _localctx._parameter = parameter();
					_localctx._parameters.Add(_localctx._parameter);
					}
					}
					State = 725;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 726; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 728; Match(LeftParen);
				State = 729; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public NamedParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfParameterContext : ParameterContext {
		public ParameterModifierContext _parameterModifier;
		public IList<ParameterModifierContext> _modifiers = new List<ParameterModifierContext>();
		public IToken token;
		public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public SelfParameterContext(ParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_parameter);
		int _la;
		try {
			State = 756;
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				_localctx = new NamedParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 732; ((NamedParameterContext)_localctx)._parameterModifier = parameterModifier();
					((NamedParameterContext)_localctx)._modifiers.Add(((NamedParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 739;
				_la = TokenStream.La(1);
				if (_la==Identifier || _la==EscapedIdentifier) {
					{
					State = 738; identifier();
					}
				}

				State = 741; Match(Colon);
				State = 742; referenceType();
				}
				break;
			case 2:
				_localctx = new SelfParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Params) {
					{
					{
					State = 743; ((SelfParameterContext)_localctx)._parameterModifier = parameterModifier();
					((SelfParameterContext)_localctx)._modifiers.Add(((SelfParameterContext)_localctx)._parameterModifier);
					}
					}
					State = 748;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 750;
				_la = TokenStream.La(1);
				if (_la==Own) {
					{
					State = 749; Match(Own);
					}
				}

				State = 753;
				_la = TokenStream.La(1);
				if (_la==Mutable) {
					{
					State = 752; Match(Mutable);
					}
				}

				State = 755; ((SelfParameterContext)_localctx).token = Match(Self);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_parameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(Params);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 64, RULE_constructorInitializer);
		try {
			State = 772;
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760; Match(Colon);
				State = 761; Match(Base);
				State = 762; Match(LeftParen);
				State = 763; argumentList();
				State = 764; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766; Match(Colon);
				State = 767; Match(Self);
				State = 768; Match(LeftParen);
				State = 769; argumentList();
				State = 770; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 66, RULE_argumentList);
		int _la;
		try {
			State = 783;
			switch (TokenStream.La(1)) {
			case New:
			case Self:
			case Uninitialized:
			case Try:
			case TryPanic:
			case TryResult:
			case Void:
			case String:
			case ByteType:
			case IntType:
			case UIntType:
			case FloatType:
			case SizeType:
			case OffsetType:
			case UnsafeArrayType:
			case BooleanLiteral:
			case IntLiteral:
			case NullLiteral:
			case StringLiteral:
			case CharLiteral:
			case LeftParen:
			case Asterisk:
			case AddressOf:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case Identifier:
			case EscapedIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774; _localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 775; Match(Comma);
					State = 776; _localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 781;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case RightBracket:
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 68, RULE_methodBody);
		int _la;
		try {
			State = 794;
			switch (TokenStream.La(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785; Match(LeftBrace);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 786; statement();
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 792; Match(RightBrace);
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793; Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadableOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext overloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_overloadableOperator);
		try {
			State = 808;
			switch (TokenStream.La(1)) {
			case Asterisk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796; Match(Asterisk);
				}
				break;
			case AddressOf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797; Match(AddressOf);
				}
				break;
			case Or:
				EnterOuterAlt(_localctx, 3);
				{
				State = 798; Match(Or);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 4);
				{
				State = 799; Match(And);
				}
				break;
			case Xor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 800; Match(Xor);
				}
				break;
			case IsNull:
				EnterOuterAlt(_localctx, 6);
				{
				State = 801; Match(IsNull);
				}
				break;
			case Coalesce:
				EnterOuterAlt(_localctx, 7);
				{
				State = 802; Match(Coalesce);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 8);
				{
				State = 803; Match(Dot);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 9);
				{
				State = 804; Match(LeftBracket);
				State = 805; Match(RightBracket);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 10);
				{
				State = 806; Match(Pipe);
				State = 807; Match(Pipe);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext condition;
		public StatementContext then;
		public StatementContext @else;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeBlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnsafeBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetIfStatementContext : StatementContext {
		public StatementContext then;
		public StatementContext @else;
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LetIfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLetIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLetIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_statement);
		int _la;
		try {
			State = 878;
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 810; localVariableDeclaration();
				State = 811; Match(Semicolon);
				}
				break;
			case 2:
				_localctx = new UnsafeBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 813; Match(Unsafe);
				State = 814; Match(LeftBrace);
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 815; statement();
					}
					}
					State = 820;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 821; Match(RightBrace);
				}
				break;
			case 3:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 822; Match(LeftBrace);
				State = 826;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Delete) | (1L << Self) | (1L << Uninitialized) | (1L << Var) | (1L << Let) | (1L << If) | (1L << For) | (1L << Continue) | (1L << Return) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Throw) | (1L << Unsafe) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (Semicolon - 64)) | (1L << (LeftBrace - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					{
					State = 823; statement();
					}
					}
					State = 828;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 829; Match(RightBrace);
				}
				break;
			case 4:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 830; Match(Semicolon);
				}
				break;
			case 5:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 831; expression(0);
				State = 832; Match(Semicolon);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 834; Match(Return);
				State = 836;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << New) | (1L << Self) | (1L << Uninitialized) | (1L << Try) | (1L << TryPanic) | (1L << TryResult) | (1L << Void))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (String - 64)) | (1L << (ByteType - 64)) | (1L << (IntType - 64)) | (1L << (UIntType - 64)) | (1L << (FloatType - 64)) | (1L << (SizeType - 64)) | (1L << (OffsetType - 64)) | (1L << (UnsafeArrayType - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (IntLiteral - 64)) | (1L << (NullLiteral - 64)) | (1L << (StringLiteral - 64)) | (1L << (CharLiteral - 64)) | (1L << (LeftParen - 64)) | (1L << (Asterisk - 64)) | (1L << (AddressOf - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Pipe - 64)) | (1L << (Not - 64)) | (1L << (Identifier - 64)) | (1L << (EscapedIdentifier - 64)))) != 0)) {
					{
					State = 835; expression(0);
					}
				}

				State = 838; Match(Semicolon);
				}
				break;
			case 7:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 839; Match(Throw);
				State = 840; expression(0);
				State = 841; Match(Semicolon);
				}
				break;
			case 8:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 843; Match(If);
				State = 844; Match(LeftParen);
				State = 845; ((IfStatementContext)_localctx).condition = expression(0);
				State = 846; Match(RightParen);
				State = 847; ((IfStatementContext)_localctx).then = statement();
				State = 850;
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 848; Match(Else);
					State = 849; ((IfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new LetIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 852; Match(If);
				State = 853; Match(LeftParen);
				State = 854; localVariableDeclaration();
				State = 855; Match(RightParen);
				State = 856; ((LetIfStatementContext)_localctx).then = statement();
				State = 859;
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 857; Match(Else);
					State = 858; ((LetIfStatementContext)_localctx).@else = statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 861; Match(For);
				State = 862; Match(LeftParen);
				State = 865;
				switch (TokenStream.La(1)) {
				case Var:
				case Let:
					{
					State = 863; localVariableDeclaration();
					}
					break;
				case PlaceHolder:
					{
					State = 864; Match(PlaceHolder);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 867; Match(In);
				State = 868; expression(0);
				State = 869; Match(RightParen);
				State = 870; statement();
				}
				break;
			case 11:
				_localctx = new DeleteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 872; Match(Delete);
				State = 873; expression(0);
				State = 874; Match(Semicolon);
				}
				break;
			case 12:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 876; Match(Continue);
				State = 877; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public IToken kind;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			_localctx.kind = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 881; identifier();
			State = 883;
			_la = TokenStream.La(1);
			if (_la==IsNull) {
				{
				State = 882; Match(IsNull);
				}
			}

			State = 887;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 885; Match(Colon);
				State = 886; referenceType();
				}
			}

			State = 891;
			_la = TokenStream.La(1);
			if (_la==Assign) {
				{
				State = 889; Match(Assign);
				State = 890; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullCheckExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullCheckExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCheckExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralExpressionContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(PreAdamantParser.StringLiteral, 0); }
		public StringLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameExpressionContext : ExpressionContext {
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLiteralExpressionContext : ExpressionContext {
		public ITerminalNode IntLiteral() { return GetToken(PreAdamantParser.IntLiteral, 0); }
		public IntLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIntLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIntLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectExpressionContext : ExpressionContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BaseTypesContext baseTypes() {
			return GetRuleContext<BaseTypesContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public NewObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext lvalue;
		public IToken op;
		public ExpressionContext rvalue;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelfExpressionContext : ExpressionContext {
		public SelfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralExpressionContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(PreAdamantParser.BooleanLiteral, 0); }
		public BooleanLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralExpressionContext : ExpressionContext {
		public NullLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNullLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNullLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext then;
		public ExpressionContext @else;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PointerMemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PointerMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UninitializedExpressionContext : ExpressionContext {
		public UninitializedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterUninitializedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitUninitializedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninitializedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryExpressionContext : ExpressionContext {
		public IToken @try;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MagnitudeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MagnitudeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMagnitudeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMagnitudeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagnitudeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterComparativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitComparativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public IToken @as;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueTypeContext valueType() {
			return GetRuleContext<ValueTypeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralExpressionContext : ExpressionContext {
		public ITerminalNode CharLiteral() { return GetToken(PreAdamantParser.CharLiteral, 0); }
		public CharLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCharLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCharLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotDotExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterDotDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitDotDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreAdamantParserListener typedListener = listener as IPreAdamantParserListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreAdamantParserVisitor<TResult> typedVisitor = visitor as IPreAdamantParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 894;
				((UnaryExpressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Asterisk - 96)) | (1L << (AddressOf - 96)) | (1L << (Plus - 96)) | (1L << (Minus - 96)) | (1L << (Not - 96)))) != 0)) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 895; expression(24);
				}
				break;
			case 2:
				{
				_localctx = new TryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 896;
				((TryExpressionContext)_localctx).@try = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Try) | (1L << TryPanic) | (1L << TryResult))) != 0)) ) {
					((TryExpressionContext)_localctx).@try = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 897; expression(11);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 898; Match(LeftParen);
				State = 899; expression(0);
				State = 900; Match(RightParen);
				}
				break;
			case 4:
				{
				_localctx = new MagnitudeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 902; Match(Pipe);
				State = 903; expression(0);
				State = 904; Match(Pipe);
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 906; Match(New);
				State = 907; name(0);
				State = 908; Match(LeftParen);
				State = 909; argumentList();
				State = 910; Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NewObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 912; Match(New);
				State = 914;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 913; baseTypes();
					}
				}

				State = 916; Match(LeftParen);
				State = 917; argumentList();
				State = 918; Match(RightParen);
				State = 919; Match(LeftBrace);
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Public) | (1L << Private) | (1L << Protected) | (1L << Internal))) != 0) || _la==EscapedIdentifier) {
					{
					{
					State = 920; member();
					}
					}
					State = 925;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 926; Match(RightBrace);
				}
				break;
			case 7:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 928; simpleName();
				}
				break;
			case 8:
				{
				_localctx = new NullLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 929; Match(NullLiteral);
				}
				break;
			case 9:
				{
				_localctx = new SelfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 930; Match(Self);
				}
				break;
			case 10:
				{
				_localctx = new BooleanLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 931; Match(BooleanLiteral);
				}
				break;
			case 11:
				{
				_localctx = new IntLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 932; Match(IntLiteral);
				}
				break;
			case 12:
				{
				_localctx = new UninitializedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 933; Match(Uninitialized);
				}
				break;
			case 13:
				{
				_localctx = new StringLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 934; Match(StringLiteral);
				}
				break;
			case 14:
				{
				_localctx = new CharLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 935; Match(CharLiteral);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1000;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 998;
					switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
					case 1:
						{
						_localctx = new DotDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 938;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 939; Match(DotDot);
						State = 940; expression(30);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 941;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 942;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Asterisk || _la==Divide) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 943; expression(24);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 944;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 945;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 946; expression(23);
						}
						break;
					case 4:
						{
						_localctx = new ComparativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 947;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 948;
						((ComparativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (LeftAngle - 90)) | (1L << (RightAngle - 90)) | (1L << (LessThanOrEqual - 90)) | (1L << (GreaterThanOrEqual - 90)))) != 0)) ) {
							((ComparativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 949; expression(22);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 950;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 951;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 952; ((EqualityExpressionContext)_localctx).rhs = expression(21);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 953;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 954; Match(And);
						State = 955; expression(20);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 956;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 957; Match(Xor);
						State = 958; expression(19);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 959;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 960; Match(Or);
						State = 961; expression(18);
						}
						break;
					case 9:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 962;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 963; Match(Coalesce);
						State = 964; expression(17);
						}
						break;
					case 10:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 965;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 966; Match(In);
						State = 967; expression(16);
						}
						break;
					case 11:
						{
						_localctx = new IfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 968;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 969; Match(IsNull);
						State = 970; ((IfExpressionContext)_localctx).then = expression(0);
						State = 971; Match(Colon);
						State = 972; ((IfExpressionContext)_localctx).@else = expression(10);
						}
						break;
					case 12:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).lvalue = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 974;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 975;
						((AssignmentExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (Assign - 114)) | (1L << (AddAssign - 114)) | (1L << (SubtractAssign - 114)) | (1L << (MultiplyAssign - 114)) | (1L << (DivideAssign - 114)) | (1L << (AndAssign - 114)) | (1L << (XorAssign - 114)) | (1L << (OrAssign - 114)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 976; ((AssignmentExpressionContext)_localctx).rvalue = expression(9);
						}
						break;
					case 13:
						{
						_localctx = new MemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 977;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 978; Match(Dot);
						State = 979; identifier();
						}
						break;
					case 14:
						{
						_localctx = new PointerMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 980;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 981; Match(Lambda);
						State = 982; identifier();
						}
						break;
					case 15:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 983;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 984; Match(LeftParen);
						State = 985; argumentList();
						State = 986; Match(RightParen);
						}
						break;
					case 16:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 988;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 989; Match(LeftBracket);
						State = 990; argumentList();
						State = 991; Match(RightBracket);
						}
						break;
					case 17:
						{
						_localctx = new NullCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 993;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 994; Match(IsNull);
						}
						break;
					case 18:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 995;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 996;
						((CastExpressionContext)_localctx).@as = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << As) | (1L << AsPanic) | (1L << AsResult))) != 0)) ) {
							((CastExpressionContext)_localctx).@as = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 997; valueType(0);
						}
						break;
					}
					} 
				}
				State = 1002;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return name_sempred((NameContext)_localctx, predIndex);
		case 20: return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 38: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 23);
		case 5: return Precpred(Context, 22);
		case 6: return Precpred(Context, 21);
		case 7: return Precpred(Context, 20);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 16);
		case 12: return Precpred(Context, 15);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 9);
		case 15: return Precpred(Context, 30);
		case 16: return Precpred(Context, 28);
		case 17: return Precpred(Context, 27);
		case 18: return Precpred(Context, 26);
		case 19: return Precpred(Context, 25);
		case 20: return Precpred(Context, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x7F\x3EE\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\a\x2R\n"+
		"\x2\f\x2\xE\x2U\v\x2\x3\x2\a\x2X\n\x2\f\x2\xE\x2[\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4\x65\n\x4\x3\x5\x3\x5\x3\x5\a\x5"+
		"j\n\x5\f\x5\xE\x5m\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6s\n\x6\f\x6\xE\x6"+
		"v\v\x6\x3\x6\a\x6y\n\x6\f\x6\xE\x6|\v\x6\x3\x6\x3\x6\x3\x6\a\x6\x81\n"+
		"\x6\f\x6\xE\x6\x84\v\x6\x3\x6\x3\x6\x5\x6\x88\n\x6\x3\x6\x5\x6\x8B\n\x6"+
		"\x3\x6\x3\x6\x3\x6\x5\x6\x90\n\x6\x3\x6\x5\x6\x93\n\x6\x3\x6\a\x6\x96"+
		"\n\x6\f\x6\xE\x6\x99\v\x6\x3\x6\x3\x6\a\x6\x9D\n\x6\f\x6\xE\x6\xA0\v\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\xA5\n\x6\f\x6\xE\x6\xA8\v\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x5\x6\xAF\n\x6\x3\x6\x3\x6\x5\x6\xB3\n\x6\x3\x6\x3\x6\x3"+
		"\x6\a\x6\xB8\n\x6\f\x6\xE\x6\xBB\v\x6\x3\x6\x3\x6\x5\x6\xBF\n\x6\x3\x6"+
		"\x3\x6\x5\x6\xC3\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xC9\n\x6\f\x6\xE\x6"+
		"\xCC\v\x6\x3\x6\a\x6\xCF\n\x6\f\x6\xE\x6\xD2\v\x6\x3\x6\x3\x6\x5\x6\xD6"+
		"\n\x6\x3\a\x3\a\x3\a\x3\a\x5\a\xDC\n\a\x3\b\x3\b\x3\b\x5\b\xE1\n\b\x3"+
		"\t\x3\t\x5\t\xE5\n\t\x3\t\x3\t\x3\t\x3\t\a\t\xEB\n\t\f\t\xE\t\xEE\v\t"+
		"\x5\t\xF0\n\t\x3\n\x3\n\x3\n\x3\n\x5\n\xF6\n\n\x3\v\x3\v\x5\v\xFA\n\v"+
		"\x3\f\x3\f\x5\f\xFE\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x105\n\r\x3\xE\x3"+
		"\xE\x5\xE\x109\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x111"+
		"\n\x10\f\x10\xE\x10\x114\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\x11A"+
		"\n\x11\x3\x11\x3\x11\x5\x11\x11E\n\x11\x3\x11\x5\x11\x121\n\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\a\x12\x127\n\x12\f\x12\xE\x12\x12A\v\x12\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x5\x13\x138\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x13E\n\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x146\n\x15\f\x15\xE\x15"+
		"\x149\v\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x151\n\x16"+
		"\f\x16\xE\x16\x154\v\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x15A\n\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x160\n\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\a\x16\x166\n\x16\f\x16\xE\x16\x169\v\x16\x3\x17\x5\x17\x16C\n\x17"+
		"\x3\x17\x3\x17\x5\x17\x170\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x5\x17\x179\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x17F"+
		"\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x185\n\x19\f\x19\xE\x19\x188"+
		"\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x18E\n\x19\x3\x1A\a\x1A\x191"+
		"\n\x1A\f\x1A\xE\x1A\x194\v\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x19B\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x1A3\n\x1C"+
		"\f\x1C\xE\x1C\x1A6\v\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x1AD"+
		"\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x1B4\n\x1D\x3\x1E\a\x1E"+
		"\x1B7\n\x1E\f\x1E\xE\x1E\x1BA\v\x1E\x3\x1E\x3\x1E\x5\x1E\x1BE\n\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x1C2\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1C7\n\x1E\x3"+
		"\x1E\x5\x1E\x1CA\n\x1E\x3\x1E\a\x1E\x1CD\n\x1E\f\x1E\xE\x1E\x1D0\v\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\a\x1E\x1D5\n\x1E\f\x1E\xE\x1E\x1D8\v\x1E\x3\x1E"+
		"\x3\x1E\x5\x1E\x1DC\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x1E3"+
		"\n\x1E\f\x1E\xE\x1E\x1E6\v\x1E\x3\x1E\x3\x1E\x5\x1E\x1EA\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x1EF\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x1F5"+
		"\n\x1E\f\x1E\xE\x1E\x1F8\v\x1E\x3\x1E\a\x1E\x1FB\n\x1E\f\x1E\xE\x1E\x1FE"+
		"\v\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x203\n\x1E\f\x1E\xE\x1E\x206\v\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x20D\n\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\x211\n\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x216\n\x1E\f\x1E\xE\x1E\x219\v"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x21D\n\x1E\x3\x1E\x5\x1E\x220\n\x1E\x3\x1E\x5"+
		"\x1E\x223\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x228\n\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\a\x1E\x22E\n\x1E\f\x1E\xE\x1E\x231\v\x1E\x3\x1E\a\x1E\x234"+
		"\n\x1E\f\x1E\xE\x1E\x237\v\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x23C\n\x1E\f"+
		"\x1E\xE\x1E\x23F\v\x1E\x3\x1E\x3\x1E\x5\x1E\x243\n\x1E\x3\x1E\x5\x1E\x246"+
		"\n\x1E\x3\x1E\x5\x1E\x249\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x24F"+
		"\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x255\n\x1E\f\x1E\xE\x1E\x258"+
		"\v\x1E\x3\x1E\a\x1E\x25B\n\x1E\f\x1E\xE\x1E\x25E\v\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\a\x1E\x263\n\x1E\f\x1E\xE\x1E\x266\v\x1E\x3\x1E\x3\x1E\x5\x1E\x26A"+
		"\n\x1E\x3\x1E\x5\x1E\x26D\n\x1E\x3\x1E\x5\x1E\x270\n\x1E\x3\x1E\x3\x1E"+
		"\x5\x1E\x274\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x27A\n\x1E\f\x1E"+
		"\xE\x1E\x27D\v\x1E\x3\x1E\a\x1E\x280\n\x1E\f\x1E\xE\x1E\x283\v\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\a\x1E\x288\n\x1E\f\x1E\xE\x1E\x28B\v\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x28F\n\x1E\x3\x1E\x5\x1E\x292\n\x1E\x3\x1E\x5\x1E\x295\n\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x29D\n\x1E\f\x1E\xE\x1E"+
		"\x2A0\v\x1E\x3\x1E\a\x1E\x2A3\n\x1E\f\x1E\xE\x1E\x2A6\v\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\a\x1E\x2AB\n\x1E\f\x1E\xE\x1E\x2AE\v\x1E\x3\x1E\x3\x1E\x5"+
		"\x1E\x2B2\n\x1E\x3\x1E\x5\x1E\x2B5\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2BA"+
		"\n\x1E\x3\x1E\x5\x1E\x2BD\n\x1E\x3\x1E\a\x1E\x2C0\n\x1E\f\x1E\xE\x1E\x2C3"+
		"\v\x1E\x3\x1E\x3\x1E\a\x1E\x2C7\n\x1E\f\x1E\xE\x1E\x2CA\v\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x2CE\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x2D4\n\x1F\f"+
		"\x1F\xE\x1F\x2D7\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2DD\n\x1F\x3"+
		" \a \x2E0\n \f \xE \x2E3\v \x3 \x5 \x2E6\n \x3 \x3 \x3 \a \x2EB\n \f "+
		"\xE \x2EE\v \x3 \x5 \x2F1\n \x3 \x5 \x2F4\n \x3 \x5 \x2F7\n \x3!\x3!\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x307\n"+
		"\"\x3#\x3#\x3#\a#\x30C\n#\f#\xE#\x30F\v#\x3#\x5#\x312\n#\x3$\x3$\a$\x316"+
		"\n$\f$\xE$\x319\v$\x3$\x3$\x5$\x31D\n$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x5%\x32B\n%\x3&\x3&\x3&\x3&\x3&\x3&\a&\x333\n&\f&\xE"+
		"&\x336\v&\x3&\x3&\x3&\a&\x33B\n&\f&\xE&\x33E\v&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x5&\x347\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&"+
		"\x355\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x35E\n&\x3&\x3&\x3&\x3&\x5&\x364"+
		"\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x371\n&\x3\'\x3\'"+
		"\x3\'\x5\'\x376\n\'\x3\'\x3\'\x5\'\x37A\n\'\x3\'\x3\'\x5\'\x37E\n\'\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x5(\x395\n(\x3(\x3(\x3(\x3(\x3(\a(\x39C\n(\f(\xE(\x39F\v"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x3AB\n(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\a(\x3E9\n(\f(\xE(\x3EC\v(\x3(\x2\x5(*N)\x2\x4\x6\b\n\f\xE"+
		"\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLN\x2\f\x3\x2\x15\x16\x4\x2\\]ij\x3\x2\x17\x18\x6\x2\x62\x62"+
		"\x64\x64lmss\x3\x2(*\x4\x2\x62\x62nn\x3\x2lm\x3\x2gh\x3\x2t{\x3\x2\x31"+
		"\x33\x496\x2S\x3\x2\x2\x2\x4^\x3\x2\x2\x2\x6\x64\x3\x2\x2\x2\b\x66\x3"+
		"\x2\x2\x2\n\xD5\x3\x2\x2\x2\f\xDB\x3\x2\x2\x2\xE\xDD\x3\x2\x2\x2\x10\xE2"+
		"\x3\x2\x2\x2\x12\xF5\x3\x2\x2\x2\x14\xF9\x3\x2\x2\x2\x16\xFD\x3\x2\x2"+
		"\x2\x18\x104\x3\x2\x2\x2\x1A\x108\x3\x2\x2\x2\x1C\x10A\x3\x2\x2\x2\x1E"+
		"\x10C\x3\x2\x2\x2 \x120\x3\x2\x2\x2\"\x122\x3\x2\x2\x2$\x137\x3\x2\x2"+
		"\x2&\x13D\x3\x2\x2\x2(\x13F\x3\x2\x2\x2*\x15F\x3\x2\x2\x2,\x178\x3\x2"+
		"\x2\x2.\x17E\x3\x2\x2\x2\x30\x18D\x3\x2\x2\x2\x32\x192\x3\x2\x2\x2\x34"+
		"\x19A\x3\x2\x2\x2\x36\x1AC\x3\x2\x2\x2\x38\x1B3\x3\x2\x2\x2:\x2CD\x3\x2"+
		"\x2\x2<\x2DC\x3\x2\x2\x2>\x2F6\x3\x2\x2\x2@\x2F8\x3\x2\x2\x2\x42\x306"+
		"\x3\x2\x2\x2\x44\x311\x3\x2\x2\x2\x46\x31C\x3\x2\x2\x2H\x32A\x3\x2\x2"+
		"\x2J\x370\x3\x2\x2\x2L\x372\x3\x2\x2\x2N\x3AA\x3\x2\x2\x2PR\x5\x4\x3\x2"+
		"QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TY\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2VX\x5\n\x6\x2WV\x3\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2"+
		"YZ\x3\x2\x2\x2Z\\\x3\x2\x2\x2[Y\x3\x2\x2\x2\\]\a\x2\x2\x3]\x3\x3\x2\x2"+
		"\x2^_\a\n\x2\x2_`\x5\b\x5\x2`\x61\aR\x2\x2\x61\x5\x3\x2\x2\x2\x62\x65"+
		"\a}\x2\x2\x63\x65\a~\x2\x2\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65"+
		"\a\x3\x2\x2\x2\x66k\x5\x6\x4\x2gh\aT\x2\x2hj\x5\x6\x4\x2ig\x3\x2\x2\x2"+
		"jm\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2l\t\x3\x2\x2\x2mk\x3\x2\x2\x2"+
		"no\a\v\x2\x2op\x5\b\x5\x2pt\aZ\x2\x2qs\x5\x4\x3\x2rq\x3\x2\x2\x2sv\x3"+
		"\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2uz\x3\x2\x2\x2vt\x3\x2\x2\x2wy\x5"+
		"\n\x6\x2xw\x3\x2\x2\x2y|\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3"+
		"\x2\x2\x2|z\x3\x2\x2\x2}~\a[\x2\x2~\xD6\x3\x2\x2\x2\x7F\x81\x5\xE\b\x2"+
		"\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3"+
		"\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x87\x5\x12\n\x2"+
		"\x86\x88\x5\x14\v\x2\x87\x86\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3"+
		"\x2\x2\x2\x89\x8B\x5\x16\f\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2"+
		"\x8B\x8C\x3\x2\x2\x2\x8C\x8D\a\f\x2\x2\x8D\x8F\x5\x6\x4\x2\x8E\x90\x5"+
		"\x1E\x10\x2\x8F\x8E\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x92\x3\x2\x2\x2"+
		"\x91\x93\x5\x10\t\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x97\x3"+
		"\x2\x2\x2\x94\x96\x5\x36\x1C\x2\x95\x94\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2"+
		"\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x97\x3"+
		"\x2\x2\x2\x9A\x9E\aZ\x2\x2\x9B\x9D\x5:\x1E\x2\x9C\x9B\x3\x2\x2\x2\x9D"+
		"\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA1\x3\x2"+
		"\x2\x2\xA0\x9E\x3\x2\x2\x2\xA1\xA2\a[\x2\x2\xA2\xD6\x3\x2\x2\x2\xA3\xA5"+
		"\x5\xE\b\x2\xA4\xA3\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2"+
		"\xA6\xA7\x3\x2\x2\x2\xA7\xA9\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAA\x5"+
		"\x12\n\x2\xAA\xAB\t\x2\x2\x2\xAB\xAE\x5\x6\x4\x2\xAC\xAD\aS\x2\x2\xAD"+
		"\xAF\x5,\x17\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB2\x3\x2"+
		"\x2\x2\xB0\xB1\at\x2\x2\xB1\xB3\x5N(\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3"+
		"\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\aR\x2\x2\xB5\xD6\x3\x2\x2\x2\xB6"+
		"\xB8\x5\xE\b\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2"+
		"\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC"+
		"\xBE\x5\x12\n\x2\xBD\xBF\x5\x14\v\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2"+
		"\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\x5\x6\x4\x2\xC1\xC3\x5\"\x12\x2\xC2"+
		"\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\x5<\x1F"+
		"\x2\xC5\xC6\aY\x2\x2\xC6\xCA\x5,\x17\x2\xC7\xC9\x5\x36\x1C\x2\xC8\xC7"+
		"\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2"+
		"\x2\xCB\xD0\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xCF\x5\f\a\x2\xCE\xCD"+
		"\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2"+
		"\x2\xD1\xD3\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD4\x5\x46$\x2\xD4\xD6"+
		"\x3\x2\x2\x2\xD5n\x3\x2\x2\x2\xD5\x82\x3\x2\x2\x2\xD5\xA6\x3\x2\x2\x2"+
		"\xD5\xB9\x3\x2\x2\x2\xD6\v\x3\x2\x2\x2\xD7\xD8\a?\x2\x2\xD8\xDC\x5N(\x2"+
		"\xD9\xDA\a@\x2\x2\xDA\xDC\x5N(\x2\xDB\xD7\x3\x2\x2\x2\xDB\xD9\x3\x2\x2"+
		"\x2\xDC\r\x3\x2\x2\x2\xDD\xE0\a~\x2\x2\xDE\xDF\a`\x2\x2\xDF\xE1\a\x61"+
		"\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xF\x3\x2\x2\x2\xE2"+
		"\xE4\aS\x2\x2\xE3\xE5\x5(\x15\x2\xE4\xE3\x3\x2\x2\x2\xE4\xE5\x3\x2\x2"+
		"\x2\xE5\xEF\x3\x2\x2\x2\xE6\xE7\aS\x2\x2\xE7\xEC\x5(\x15\x2\xE8\xE9\a"+
		"X\x2\x2\xE9\xEB\x5(\x15\x2\xEA\xE8\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC"+
		"\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC\x3\x2"+
		"\x2\x2\xEF\xE6\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\x11\x3\x2\x2\x2\xF1"+
		"\xF6\a\x34\x2\x2\xF2\xF6\a\x35\x2\x2\xF3\xF6\a\x36\x2\x2\xF4\xF6\a\x37"+
		"\x2\x2\xF5\xF1\x3\x2\x2\x2\xF5\xF2\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5"+
		"\xF4\x3\x2\x2\x2\xF6\x13\x3\x2\x2\x2\xF7\xFA\a\x38\x2\x2\xF8\xFA\a\x39"+
		"\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xF8\x3\x2\x2\x2\xFA\x15\x3\x2\x2\x2\xFB"+
		"\xFE\a\x1B\x2\x2\xFC\xFE\a\x19\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFC\x3\x2"+
		"\x2\x2\xFE\x17\x3\x2\x2\x2\xFF\x105\a\x1B\x2\x2\x100\x105\a\x1A\x2\x2"+
		"\x101\x105\a\x19\x2\x2\x102\x103\a\x19\x2\x2\x103\x105\a\x1A\x2\x2\x104"+
		"\xFF\x3\x2\x2\x2\x104\x100\x3\x2\x2\x2\x104\x101\x3\x2\x2\x2\x104\x102"+
		"\x3\x2\x2\x2\x105\x19\x3\x2\x2\x2\x106\x109\a.\x2\x2\x107\x109\a/\x2\x2"+
		"\x108\x106\x3\x2\x2\x2\x108\x107\x3\x2\x2\x2\x109\x1B\x3\x2\x2\x2\x10A"+
		"\x10B\a=\x2\x2\x10B\x1D\x3\x2\x2\x2\x10C\x10D\a\\\x2\x2\x10D\x112\x5 "+
		"\x11\x2\x10E\x10F\aX\x2\x2\x10F\x111\x5 \x11\x2\x110\x10E\x3\x2\x2\x2"+
		"\x111\x114\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113"+
		"\x115\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x115\x116\a]\x2\x2\x116\x1F\x3"+
		"\x2\x2\x2\x117\x119\x5\x6\x4\x2\x118\x11A\ak\x2\x2\x119\x118\x3\x2\x2"+
		"\x2\x119\x11A\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B\x11C\aS\x2\x2\x11C"+
		"\x11E\x5*\x16\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x121"+
		"\x3\x2\x2\x2\x11F\x121\x5.\x18\x2\x120\x117\x3\x2\x2\x2\x120\x11F\x3\x2"+
		"\x2\x2\x121!\x3\x2\x2\x2\x122\x123\a\\\x2\x2\x123\x128\x5,\x17\x2\x124"+
		"\x125\aX\x2\x2\x125\x127\x5,\x17\x2\x126\x124\x3\x2\x2\x2\x127\x12A\x3"+
		"\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12B\x3\x2"+
		"\x2\x2\x12A\x128\x3\x2\x2\x2\x12B\x12C\a]\x2\x2\x12C#\x3\x2\x2\x2\x12D"+
		"\x138\x5\x6\x4\x2\x12E\x138\a\x41\x2\x2\x12F\x138\a\x42\x2\x2\x130\x138"+
		"\a\x43\x2\x2\x131\x138\a\x44\x2\x2\x132\x138\a\x45\x2\x2\x133\x138\a\x46"+
		"\x2\x2\x134\x138\aI\x2\x2\x135\x138\aJ\x2\x2\x136\x138\aK\x2\x2\x137\x12D"+
		"\x3\x2\x2\x2\x137\x12E\x3\x2\x2\x2\x137\x12F\x3\x2\x2\x2\x137\x130\x3"+
		"\x2\x2\x2\x137\x131\x3\x2\x2\x2\x137\x132\x3\x2\x2\x2\x137\x133\x3\x2"+
		"\x2\x2\x137\x134\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x136\x3\x2\x2"+
		"\x2\x138%\x3\x2\x2\x2\x139\x13E\x5$\x13\x2\x13A\x13B\x5$\x13\x2\x13B\x13C"+
		"\x5\"\x12\x2\x13C\x13E\x3\x2\x2\x2\x13D\x139\x3\x2\x2\x2\x13D\x13A\x3"+
		"\x2\x2\x2\x13E\'\x3\x2\x2\x2\x13F\x140\b\x15\x1\x2\x140\x141\x5&\x14\x2"+
		"\x141\x147\x3\x2\x2\x2\x142\x143\f\x3\x2\x2\x143\x144\aT\x2\x2\x144\x146"+
		"\x5&\x14\x2\x145\x142\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2"+
		"\x2\x2\x147\x148\x3\x2\x2\x2\x148)\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A"+
		"\x14B\b\x16\x1\x2\x14B\x160\x5(\x15\x2\x14C\x14D\a^\x2\x2\x14D\x152\x5"+
		"*\x16\x2\x14E\x14F\aX\x2\x2\x14F\x151\x5*\x16\x2\x150\x14E\x3\x2\x2\x2"+
		"\x151\x154\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153"+
		"\x155\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155\x156\a_\x2\x2\x156\x15A\x3"+
		"\x2\x2\x2\x157\x158\a^\x2\x2\x158\x15A\a_\x2\x2\x159\x14C\x3\x2\x2\x2"+
		"\x159\x157\x3\x2\x2\x2\x15A\x160\x3\x2\x2\x2\x15B\x15C\x5\x30\x19\x2\x15C"+
		"\x15D\aY\x2\x2\x15D\x15E\x5,\x17\x2\x15E\x160\x3\x2\x2\x2\x15F\x14A\x3"+
		"\x2\x2\x2\x15F\x159\x3\x2\x2\x2\x15F\x15B\x3\x2\x2\x2\x160\x167\x3\x2"+
		"\x2\x2\x161\x162\f\x6\x2\x2\x162\x166\a\x66\x2\x2\x163\x164\f\x5\x2\x2"+
		"\x164\x166\a\x62\x2\x2\x165\x161\x3\x2\x2\x2\x165\x163\x3\x2\x2\x2\x166"+
		"\x169\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168+\x3"+
		"\x2\x2\x2\x169\x167\x3\x2\x2\x2\x16A\x16C\x5.\x18\x2\x16B\x16A\x3\x2\x2"+
		"\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x179\x5*\x16\x2\x16E"+
		"\x170\x5.\x18\x2\x16F\x16E\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x171"+
		"\x3\x2\x2\x2\x171\x172\a;\x2\x2\x172\x179\x5*\x16\x2\x173\x174\a:\x2\x2"+
		"\x174\x179\x5*\x16\x2\x175\x176\a:\x2\x2\x176\x177\a;\x2\x2\x177\x179"+
		"\x5*\x16\x2\x178\x16B\x3\x2\x2\x2\x178\x16F\x3\x2\x2\x2\x178\x173\x3\x2"+
		"\x2\x2\x178\x175\x3\x2\x2\x2\x179-\x3\x2\x2\x2\x17A\x17B\aW\x2\x2\x17B"+
		"\x17F\x5\x6\x4\x2\x17C\x17D\aW\x2\x2\x17D\x17F\a\x10\x2\x2\x17E\x17A\x3"+
		"\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17F/\x3\x2\x2\x2\x180\x181\a`\x2\x2\x181"+
		"\x186\x5\x32\x1A\x2\x182\x183\aX\x2\x2\x183\x185\x5\x32\x1A\x2\x184\x182"+
		"\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x186\x187\x3"+
		"\x2\x2\x2\x187\x189\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189\x18A\a\x61"+
		"\x2\x2\x18A\x18E\x3\x2\x2\x2\x18B\x18C\a`\x2\x2\x18C\x18E\a\x61\x2\x2"+
		"\x18D\x180\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18E\x31\x3\x2\x2\x2\x18F"+
		"\x191\x5@!\x2\x190\x18F\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2\x192\x190\x3"+
		"\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x195\x3\x2\x2\x2\x194\x192\x3\x2"+
		"\x2\x2\x195\x196\x5,\x17\x2\x196\x33\x3\x2\x2\x2\x197\x19B\aN\x2\x2\x198"+
		"\x19B\aP\x2\x2\x199\x19B\x5\x6\x4\x2\x19A\x197\x3\x2\x2\x2\x19A\x198\x3"+
		"\x2\x2\x2\x19A\x199\x3\x2\x2\x2\x19B\x35\x3\x2\x2\x2\x19C\x19D\a\x12\x2"+
		"\x2\x19D\x19E\x5 \x11\x2\x19E\x19F\aS\x2\x2\x19F\x1A4\x5\x38\x1D\x2\x1A0"+
		"\x1A1\aX\x2\x2\x1A1\x1A3\x5\x38\x1D\x2\x1A2\x1A0\x3\x2\x2\x2\x1A3\x1A6"+
		"\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1AD\x3"+
		"\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1A8\a\x12\x2\x2\x1A8\x1A9\x5 \x11"+
		"\x2\x1A9\x1AA\t\x3\x2\x2\x1AA\x1AB\aN\x2\x2\x1AB\x1AD\x3\x2\x2\x2\x1AC"+
		"\x19C\x3\x2\x2\x2\x1AC\x1A7\x3\x2\x2\x2\x1AD\x37\x3\x2\x2\x2\x1AE\x1AF"+
		"\a\xE\x2\x2\x1AF\x1B0\a`\x2\x2\x1B0\x1B4\a\x61\x2\x2\x1B1\x1B4\x5*\x16"+
		"\x2\x1B2\x1B4\x5 \x11\x2\x1B3\x1AE\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3"+
		"\x1B2\x3\x2\x2\x2\x1B4\x39\x3\x2\x2\x2\x1B5\x1B7\x5\xE\b\x2\x1B6\x1B5"+
		"\x3\x2\x2\x2\x1B7\x1BA\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3"+
		"\x2\x2\x2\x1B9\x1BB\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2\x2\x1BB\x1BD\x5\x12"+
		"\n\x2\x1BC\x1BE\x5\x14\v\x2\x1BD\x1BC\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2"+
		"\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C1\a\xE\x2\x2\x1C0\x1C2\x5\x6\x4\x2\x1C1"+
		"\x1C0\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C6"+
		"\x5<\x1F\x2\x1C4\x1C5\aY\x2\x2\x1C5\x1C7\x5,\x17\x2\x1C6\x1C4\x3\x2\x2"+
		"\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1CA\x5\x42\"\x2"+
		"\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CE\x3\x2\x2\x2\x1CB"+
		"\x1CD\x5\f\a\x2\x1CC\x1CB\x3\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC"+
		"\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D1\x3\x2\x2\x2\x1D0\x1CE\x3"+
		"\x2\x2\x2\x1D1\x1D2\x5\x46$\x2\x1D2\x2CE\x3\x2\x2\x2\x1D3\x1D5\x5\xE\b"+
		"\x2\x1D4\x1D3\x3\x2\x2\x2\x1D5\x1D8\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2"+
		"\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9"+
		"\x1DB\x5\x12\n\x2\x1DA\x1DC\x5\x14\v\x2\x1DB\x1DA\x3\x2\x2\x2\x1DB\x1DC"+
		"\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DE\a\xF\x2\x2\x1DE\x1DF\x5<"+
		"\x1F\x2\x1DF\x1E0\x5\x46$\x2\x1E0\x2CE\x3\x2\x2\x2\x1E1\x1E3\x5\xE\b\x2"+
		"\x1E2\x1E1\x3\x2\x2\x2\x1E3\x1E6\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2\x1E4"+
		"\x1E5\x3\x2\x2\x2\x1E5\x1E7\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2\x1E7\x1E9"+
		"\x5\x12\n\x2\x1E8\x1EA\x5\x14\v\x2\x1E9\x1E8\x3\x2\x2\x2\x1E9\x1EA\x3"+
		"\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EC\x5\x1A\xE\x2\x1EC\x1EE\a\x30"+
		"\x2\x2\x1ED\x1EF\x5\"\x12\x2\x1EE\x1ED\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2"+
		"\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F1\x5<\x1F\x2\x1F1\x1F2\aY\x2\x2\x1F2"+
		"\x1F6\x5,\x17\x2\x1F3\x1F5\x5\x36\x1C\x2\x1F4\x1F3\x3\x2\x2\x2\x1F5\x1F8"+
		"\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1FC\x3"+
		"\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F9\x1FB\x5\f\a\x2\x1FA\x1F9\x3\x2\x2"+
		"\x2\x1FB\x1FE\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2"+
		"\x1FD\x1FF\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FF\x200\x5\x46$\x2\x200"+
		"\x2CE\x3\x2\x2\x2\x201\x203\x5\xE\b\x2\x202\x201\x3\x2\x2\x2\x203\x206"+
		"\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x207\x3"+
		"\x2\x2\x2\x206\x204\x3\x2\x2\x2\x207\x208\x5\x12\n\x2\x208\x209\t\x2\x2"+
		"\x2\x209\x20C\x5\x6\x4\x2\x20A\x20B\aS\x2\x2\x20B\x20D\x5,\x17\x2\x20C"+
		"\x20A\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x210\x3\x2\x2\x2\x20E\x20F"+
		"\at\x2\x2\x20F\x211\x5N(\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2"+
		"\x211\x212\x3\x2\x2\x2\x212\x213\aR\x2\x2\x213\x2CE\x3\x2\x2\x2\x214\x216"+
		"\x5\xE\b\x2\x215\x214\x3\x2\x2\x2\x216\x219\x3\x2\x2\x2\x217\x215\x3\x2"+
		"\x2\x2\x217\x218\x3\x2\x2\x2\x218\x21A\x3\x2\x2\x2\x219\x217\x3\x2\x2"+
		"\x2\x21A\x21C\x5\x12\n\x2\x21B\x21D\x5\x18\r\x2\x21C\x21B\x3\x2\x2\x2"+
		"\x21C\x21D\x3\x2\x2\x2\x21D\x21F\x3\x2\x2\x2\x21E\x220\x5\x14\v\x2\x21F"+
		"\x21E\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x222\x3\x2\x2\x2\x221\x223"+
		"\x5\x1C\xF\x2\x222\x221\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x224\x3"+
		"\x2\x2\x2\x224\x225\t\x4\x2\x2\x225\x227\x5\x6\x4\x2\x226\x228\x5\"\x12"+
		"\x2\x227\x226\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2"+
		"\x229\x22A\x5<\x1F\x2\x22A\x22B\aY\x2\x2\x22B\x22F\x5,\x17\x2\x22C\x22E"+
		"\x5\x36\x1C\x2\x22D\x22C\x3\x2\x2\x2\x22E\x231\x3\x2\x2\x2\x22F\x22D\x3"+
		"\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x235\x3\x2\x2\x2\x231\x22F\x3\x2"+
		"\x2\x2\x232\x234\x5\f\a\x2\x233\x232\x3\x2\x2\x2\x234\x237\x3\x2\x2\x2"+
		"\x235\x233\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236\x238\x3\x2\x2\x2\x237"+
		"\x235\x3\x2\x2\x2\x238\x239\x5\x46$\x2\x239\x2CE\x3\x2\x2\x2\x23A\x23C"+
		"\x5\xE\b\x2\x23B\x23A\x3\x2\x2\x2\x23C\x23F\x3\x2\x2\x2\x23D\x23B\x3\x2"+
		"\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E\x240\x3\x2\x2\x2\x23F\x23D\x3\x2\x2"+
		"\x2\x240\x242\x5\x12\n\x2\x241\x243\x5\x18\r\x2\x242\x241\x3\x2\x2\x2"+
		"\x242\x243\x3\x2\x2\x2\x243\x245\x3\x2\x2\x2\x244\x246\x5\x14\v\x2\x245"+
		"\x244\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x248\x3\x2\x2\x2\x247\x249"+
		"\x5\x1C\xF\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3"+
		"\x2\x2\x2\x24A\x24B\t\x4\x2\x2\x24B\x24C\a^\x2\x2\x24C\x24E\a_\x2\x2\x24D"+
		"\x24F\x5\"\x12\x2\x24E\x24D\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250"+
		"\x3\x2\x2\x2\x250\x251\x5<\x1F\x2\x251\x252\aY\x2\x2\x252\x256\x5,\x17"+
		"\x2\x253\x255\x5\x36\x1C\x2\x254\x253\x3\x2\x2\x2\x255\x258\x3\x2\x2\x2"+
		"\x256\x254\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257\x25C\x3\x2\x2\x2\x258"+
		"\x256\x3\x2\x2\x2\x259\x25B\x5\f\a\x2\x25A\x259\x3\x2\x2\x2\x25B\x25E"+
		"\x3\x2\x2\x2\x25C\x25A\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25F\x3"+
		"\x2\x2\x2\x25E\x25C\x3\x2\x2\x2\x25F\x260\x5\x46$\x2\x260\x2CE\x3\x2\x2"+
		"\x2\x261\x263\x5\xE\b\x2\x262\x261\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2\x264"+
		"\x262\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x267\x3\x2\x2\x2\x266\x264"+
		"\x3\x2\x2\x2\x267\x269\x5\x12\n\x2\x268\x26A\x5\x18\r\x2\x269\x268\x3"+
		"\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26C\x3\x2\x2\x2\x26B\x26D\x5\x14"+
		"\v\x2\x26C\x26B\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26F\x3\x2\x2\x2"+
		"\x26E\x270\x5\x1C\xF\x2\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270"+
		"\x271\x3\x2\x2\x2\x271\x273\x5\x6\x4\x2\x272\x274\x5\"\x12\x2\x273\x272"+
		"\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x276\x5"+
		"<\x1F\x2\x276\x277\aY\x2\x2\x277\x27B\x5,\x17\x2\x278\x27A\x5\x36\x1C"+
		"\x2\x279\x278\x3\x2\x2\x2\x27A\x27D\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2"+
		"\x27B\x27C\x3\x2\x2\x2\x27C\x281\x3\x2\x2\x2\x27D\x27B\x3\x2\x2\x2\x27E"+
		"\x280\x5\f\a\x2\x27F\x27E\x3\x2\x2\x2\x280\x283\x3\x2\x2\x2\x281\x27F"+
		"\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x284\x3\x2\x2\x2\x283\x281\x3"+
		"\x2\x2\x2\x284\x285\x5\x46$\x2\x285\x2CE\x3\x2\x2\x2\x286\x288\x5\xE\b"+
		"\x2\x287\x286\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2"+
		"\x289\x28A\x3\x2\x2\x2\x28A\x28C\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28C"+
		"\x28E\x5\x12\n\x2\x28D\x28F\x5\x18\r\x2\x28E\x28D\x3\x2\x2\x2\x28E\x28F"+
		"\x3\x2\x2\x2\x28F\x291\x3\x2\x2\x2\x290\x292\x5\x14\v\x2\x291\x290\x3"+
		"\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x294\x3\x2\x2\x2\x293\x295\x5\x1C"+
		"\xF\x2\x294\x293\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x296\x3\x2\x2"+
		"\x2\x296\x297\a\x14\x2\x2\x297\x298\x5H%\x2\x298\x299\x5<\x1F\x2\x299"+
		"\x29A\aY\x2\x2\x29A\x29E\x5,\x17\x2\x29B\x29D\x5\x36\x1C\x2\x29C\x29B"+
		"\x3\x2\x2\x2\x29D\x2A0\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F\x3"+
		"\x2\x2\x2\x29F\x2A4\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A1\x2A3\x5\f\a"+
		"\x2\x2A2\x2A1\x3\x2\x2\x2\x2A3\x2A6\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2"+
		"\x2A4\x2A5\x3\x2\x2\x2\x2A5\x2A7\x3\x2\x2\x2\x2A6\x2A4\x3\x2\x2\x2\x2A7"+
		"\x2A8\x5\x46$\x2\x2A8\x2CE\x3\x2\x2\x2\x2A9\x2AB\x5\xE\b\x2\x2AA\x2A9"+
		"\x3\x2\x2\x2\x2AB\x2AE\x3\x2\x2\x2\x2AC\x2AA\x3\x2\x2\x2\x2AC\x2AD\x3"+
		"\x2\x2\x2\x2AD\x2AF\x3\x2\x2\x2\x2AE\x2AC\x3\x2\x2\x2\x2AF\x2B1\x5\x12"+
		"\n\x2\x2B0\x2B2\x5\x14\v\x2\x2B1\x2B0\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2"+
		"\x2B2\x2B4\x3\x2\x2\x2\x2B3\x2B5\x5\x16\f\x2\x2B4\x2B3\x3\x2\x2\x2\x2B4"+
		"\x2B5\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2B7\a\f\x2\x2\x2B7\x2B9"+
		"\x5\x6\x4\x2\x2B8\x2BA\x5\x1E\x10\x2\x2B9\x2B8\x3\x2\x2\x2\x2B9\x2BA\x3"+
		"\x2\x2\x2\x2BA\x2BC\x3\x2\x2\x2\x2BB\x2BD\x5\x10\t\x2\x2BC\x2BB\x3\x2"+
		"\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2C1\x3\x2\x2\x2\x2BE\x2C0\x5\x36\x1C"+
		"\x2\x2BF\x2BE\x3\x2\x2\x2\x2C0\x2C3\x3\x2\x2\x2\x2C1\x2BF\x3\x2\x2\x2"+
		"\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C4\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4"+
		"\x2C8\aZ\x2\x2\x2C5\x2C7\x5:\x1E\x2\x2C6\x2C5\x3\x2\x2\x2\x2C7\x2CA\x3"+
		"\x2\x2\x2\x2C8\x2C6\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2CB\x3\x2"+
		"\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CB\x2CC\a[\x2\x2\x2CC\x2CE\x3\x2\x2\x2"+
		"\x2CD\x1B8\x3\x2\x2\x2\x2CD\x1D6\x3\x2\x2\x2\x2CD\x1E4\x3\x2\x2\x2\x2CD"+
		"\x204\x3\x2\x2\x2\x2CD\x217\x3\x2\x2\x2\x2CD\x23D\x3\x2\x2\x2\x2CD\x264"+
		"\x3\x2\x2\x2\x2CD\x289\x3\x2\x2\x2\x2CD\x2AC\x3\x2\x2\x2\x2CE;\x3\x2\x2"+
		"\x2\x2CF\x2D0\a`\x2\x2\x2D0\x2D5\x5> \x2\x2D1\x2D2\aX\x2\x2\x2D2\x2D4"+
		"\x5> \x2\x2D3\x2D1\x3\x2\x2\x2\x2D4\x2D7\x3\x2\x2\x2\x2D5\x2D3\x3\x2\x2"+
		"\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D8\x3\x2\x2\x2\x2D7\x2D5\x3\x2\x2\x2"+
		"\x2D8\x2D9\a\x61\x2\x2\x2D9\x2DD\x3\x2\x2\x2\x2DA\x2DB\a`\x2\x2\x2DB\x2DD"+
		"\a\x61\x2\x2\x2DC\x2CF\x3\x2\x2\x2\x2DC\x2DA\x3\x2\x2\x2\x2DD=\x3\x2\x2"+
		"\x2\x2DE\x2E0\x5@!\x2\x2DF\x2DE\x3\x2\x2\x2\x2E0\x2E3\x3\x2\x2\x2\x2E1"+
		"\x2DF\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\x2E5\x3\x2\x2\x2\x2E3\x2E1"+
		"\x3\x2\x2\x2\x2E4\x2E6\x5\x6\x4\x2\x2E5\x2E4\x3\x2\x2\x2\x2E5\x2E6\x3"+
		"\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\aS\x2\x2\x2E8\x2F7\x5,\x17\x2"+
		"\x2E9\x2EB\x5@!\x2\x2EA\x2E9\x3\x2\x2\x2\x2EB\x2EE\x3\x2\x2\x2\x2EC\x2EA"+
		"\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2F0\x3\x2\x2\x2\x2EE\x2EC\x3"+
		"\x2\x2\x2\x2EF\x2F1\a:\x2\x2\x2F0\x2EF\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2"+
		"\x2\x2F1\x2F3\x3\x2\x2\x2\x2F2\x2F4\a;\x2\x2\x2F3\x2F2\x3\x2\x2\x2\x2F3"+
		"\x2F4\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F7\a\x10\x2\x2\x2F6\x2E1"+
		"\x3\x2\x2\x2\x2F6\x2EC\x3\x2\x2\x2\x2F7?\x3\x2\x2\x2\x2F8\x2F9\a\x1C\x2"+
		"\x2\x2F9\x41\x3\x2\x2\x2\x2FA\x2FB\aS\x2\x2\x2FB\x2FC\a\x13\x2\x2\x2FC"+
		"\x2FD\a`\x2\x2\x2FD\x2FE\x5\x44#\x2\x2FE\x2FF\a\x61\x2\x2\x2FF\x307\x3"+
		"\x2\x2\x2\x300\x301\aS\x2\x2\x301\x302\a\x10\x2\x2\x302\x303\a`\x2\x2"+
		"\x303\x304\x5\x44#\x2\x304\x305\a\x61\x2\x2\x305\x307\x3\x2\x2\x2\x306"+
		"\x2FA\x3\x2\x2\x2\x306\x300\x3\x2\x2\x2\x307\x43\x3\x2\x2\x2\x308\x30D"+
		"\x5N(\x2\x309\x30A\aX\x2\x2\x30A\x30C\x5N(\x2\x30B\x309\x3\x2\x2\x2\x30C"+
		"\x30F\x3\x2\x2\x2\x30D\x30B\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x312"+
		"\x3\x2\x2\x2\x30F\x30D\x3\x2\x2\x2\x310\x312\x3\x2\x2\x2\x311\x308\x3"+
		"\x2\x2\x2\x311\x310\x3\x2\x2\x2\x312\x45\x3\x2\x2\x2\x313\x317\aZ\x2\x2"+
		"\x314\x316\x5J&\x2\x315\x314\x3\x2\x2\x2\x316\x319\x3\x2\x2\x2\x317\x315"+
		"\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x31A\x3\x2\x2\x2\x319\x317\x3"+
		"\x2\x2\x2\x31A\x31D\a[\x2\x2\x31B\x31D\aR\x2\x2\x31C\x313\x3\x2\x2\x2"+
		"\x31C\x31B\x3\x2\x2\x2\x31DG\x3\x2\x2\x2\x31E\x32B\a\x62\x2\x2\x31F\x32B"+
		"\a\x64\x2\x2\x320\x32B\ar\x2\x2\x321\x32B\ap\x2\x2\x322\x32B\aq\x2\x2"+
		"\x323\x32B\a\x66\x2\x2\x324\x32B\a\x65\x2\x2\x325\x32B\aT\x2\x2\x326\x327"+
		"\a^\x2\x2\x327\x32B\a_\x2\x2\x328\x329\ao\x2\x2\x329\x32B\ao\x2\x2\x32A"+
		"\x31E\x3\x2\x2\x2\x32A\x31F\x3\x2\x2\x2\x32A\x320\x3\x2\x2\x2\x32A\x321"+
		"\x3\x2\x2\x2\x32A\x322\x3\x2\x2\x2\x32A\x323\x3\x2\x2\x2\x32A\x324\x3"+
		"\x2\x2\x2\x32A\x325\x3\x2\x2\x2\x32A\x326\x3\x2\x2\x2\x32A\x328\x3\x2"+
		"\x2\x2\x32BI\x3\x2\x2\x2\x32C\x32D\x5L\'\x2\x32D\x32E\aR\x2\x2\x32E\x371"+
		"\x3\x2\x2\x2\x32F\x330\a\x39\x2\x2\x330\x334\aZ\x2\x2\x331\x333\x5J&\x2"+
		"\x332\x331\x3\x2\x2\x2\x333\x336\x3\x2\x2\x2\x334\x332\x3\x2\x2\x2\x334"+
		"\x335\x3\x2\x2\x2\x335\x337\x3\x2\x2\x2\x336\x334\x3\x2\x2\x2\x337\x371"+
		"\a[\x2\x2\x338\x33C\aZ\x2\x2\x339\x33B\x5J&\x2\x33A\x339\x3\x2\x2\x2\x33B"+
		"\x33E\x3\x2\x2\x2\x33C\x33A\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33F"+
		"\x3\x2\x2\x2\x33E\x33C\x3\x2\x2\x2\x33F\x371\a[\x2\x2\x340\x371\aR\x2"+
		"\x2\x341\x342\x5N(\x2\x342\x343\aR\x2\x2\x343\x371\x3\x2\x2\x2\x344\x346"+
		"\a\'\x2\x2\x345\x347\x5N(\x2\x346\x345\x3\x2\x2\x2\x346\x347\x3\x2\x2"+
		"\x2\x347\x348\x3\x2\x2\x2\x348\x371\aR\x2\x2\x349\x34A\a-\x2\x2\x34A\x34B"+
		"\x5N(\x2\x34B\x34C\aR\x2\x2\x34C\x371\x3\x2\x2\x2\x34D\x34E\a \x2\x2\x34E"+
		"\x34F\a`\x2\x2\x34F\x350\x5N(\x2\x350\x351\a\x61\x2\x2\x351\x354\x5J&"+
		"\x2\x352\x353\a!\x2\x2\x353\x355\x5J&\x2\x354\x352\x3\x2\x2\x2\x354\x355"+
		"\x3\x2\x2\x2\x355\x371\x3\x2\x2\x2\x356\x357\a \x2\x2\x357\x358\a`\x2"+
		"\x2\x358\x359\x5L\'\x2\x359\x35A\a\x61\x2\x2\x35A\x35D\x5J&\x2\x35B\x35C"+
		"\a!\x2\x2\x35C\x35E\x5J&\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2"+
		"\x35E\x371\x3\x2\x2\x2\x35F\x360\a\"\x2\x2\x360\x363\a`\x2\x2\x361\x364"+
		"\x5L\'\x2\x362\x364\a|\x2\x2\x363\x361\x3\x2\x2\x2\x363\x362\x3\x2\x2"+
		"\x2\x364\x365\x3\x2\x2\x2\x365\x366\a#\x2\x2\x366\x367\x5N(\x2\x367\x368"+
		"\a\x61\x2\x2\x368\x369\x5J&\x2\x369\x371\x3\x2\x2\x2\x36A\x36B\a\xF\x2"+
		"\x2\x36B\x36C\x5N(\x2\x36C\x36D\aR\x2\x2\x36D\x371\x3\x2\x2\x2\x36E\x36F"+
		"\a&\x2\x2\x36F\x371\aR\x2\x2\x370\x32C\x3\x2\x2\x2\x370\x32F\x3\x2\x2"+
		"\x2\x370\x338\x3\x2\x2\x2\x370\x340\x3\x2\x2\x2\x370\x341\x3\x2\x2\x2"+
		"\x370\x344\x3\x2\x2\x2\x370\x349\x3\x2\x2\x2\x370\x34D\x3\x2\x2\x2\x370"+
		"\x356\x3\x2\x2\x2\x370\x35F\x3\x2\x2\x2\x370\x36A\x3\x2\x2\x2\x370\x36E"+
		"\x3\x2\x2\x2\x371K\x3\x2\x2\x2\x372\x373\t\x2\x2\x2\x373\x375\x5\x6\x4"+
		"\x2\x374\x376\a\x66\x2\x2\x375\x374\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2"+
		"\x376\x379\x3\x2\x2\x2\x377\x378\aS\x2\x2\x378\x37A\x5,\x17\x2\x379\x377"+
		"\x3\x2\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x37D\x3\x2\x2\x2\x37B\x37C\at"+
		"\x2\x2\x37C\x37E\x5N(\x2\x37D\x37B\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E"+
		"M\x3\x2\x2\x2\x37F\x380\b(\x1\x2\x380\x381\t\x5\x2\x2\x381\x3AB\x5N(\x1A"+
		"\x382\x383\t\x6\x2\x2\x383\x3AB\x5N(\r\x384\x385\a`\x2\x2\x385\x386\x5"+
		"N(\x2\x386\x387\a\x61\x2\x2\x387\x3AB\x3\x2\x2\x2\x388\x389\ao\x2\x2\x389"+
		"\x38A\x5N(\x2\x38A\x38B\ao\x2\x2\x38B\x3AB\x3\x2\x2\x2\x38C\x38D\a\xE"+
		"\x2\x2\x38D\x38E\x5(\x15\x2\x38E\x38F\a`\x2\x2\x38F\x390\x5\x44#\x2\x390"+
		"\x391\a\x61\x2\x2\x391\x3AB\x3\x2\x2\x2\x392\x394\a\xE\x2\x2\x393\x395"+
		"\x5\x10\t\x2\x394\x393\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396\x3"+
		"\x2\x2\x2\x396\x397\a`\x2\x2\x397\x398\x5\x44#\x2\x398\x399\a\x61\x2\x2"+
		"\x399\x39D\aZ\x2\x2\x39A\x39C\x5:\x1E\x2\x39B\x39A\x3\x2\x2\x2\x39C\x39F"+
		"\x3\x2\x2\x2\x39D\x39B\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E\x3A0\x3"+
		"\x2\x2\x2\x39F\x39D\x3\x2\x2\x2\x3A0\x3A1\a[\x2\x2\x3A1\x3AB\x3\x2\x2"+
		"\x2\x3A2\x3AB\x5&\x14\x2\x3A3\x3AB\aO\x2\x2\x3A4\x3AB\a\x10\x2\x2\x3A5"+
		"\x3AB\aM\x2\x2\x3A6\x3AB\aN\x2\x2\x3A7\x3AB\a\x11\x2\x2\x3A8\x3AB\aP\x2"+
		"\x2\x3A9\x3AB\aQ\x2\x2\x3AA\x37F\x3\x2\x2\x2\x3AA\x382\x3\x2\x2\x2\x3AA"+
		"\x384\x3\x2\x2\x2\x3AA\x388\x3\x2\x2\x2\x3AA\x38C\x3\x2\x2\x2\x3AA\x392"+
		"\x3\x2\x2\x2\x3AA\x3A2\x3\x2\x2\x2\x3AA\x3A3\x3\x2\x2\x2\x3AA\x3A4\x3"+
		"\x2\x2\x2\x3AA\x3A5\x3\x2\x2\x2\x3AA\x3A6\x3\x2\x2\x2\x3AA\x3A7\x3\x2"+
		"\x2\x2\x3AA\x3A8\x3\x2\x2\x2\x3AA\x3A9\x3\x2\x2\x2\x3AB\x3EA\x3\x2\x2"+
		"\x2\x3AC\x3AD\f\x1F\x2\x2\x3AD\x3AE\aU\x2\x2\x3AE\x3E9\x5N( \x3AF\x3B0"+
		"\f\x19\x2\x2\x3B0\x3B1\t\a\x2\x2\x3B1\x3E9\x5N(\x1A\x3B2\x3B3\f\x18\x2"+
		"\x2\x3B3\x3B4\t\b\x2\x2\x3B4\x3E9\x5N(\x19\x3B5\x3B6\f\x17\x2\x2\x3B6"+
		"\x3B7\t\x3\x2\x2\x3B7\x3E9\x5N(\x18\x3B8\x3B9\f\x16\x2\x2\x3B9\x3BA\t"+
		"\t\x2\x2\x3BA\x3E9\x5N(\x17\x3BB\x3BC\f\x15\x2\x2\x3BC\x3BD\ap\x2\x2\x3BD"+
		"\x3E9\x5N(\x16\x3BE\x3BF\f\x14\x2\x2\x3BF\x3C0\aq\x2\x2\x3C0\x3E9\x5N"+
		"(\x15\x3C1\x3C2\f\x13\x2\x2\x3C2\x3C3\ar\x2\x2\x3C3\x3E9\x5N(\x14\x3C4"+
		"\x3C5\f\x12\x2\x2\x3C5\x3C6\a\x65\x2\x2\x3C6\x3E9\x5N(\x13\x3C7\x3C8\f"+
		"\x11\x2\x2\x3C8\x3C9\a#\x2\x2\x3C9\x3E9\x5N(\x12\x3CA\x3CB\f\f\x2\x2\x3CB"+
		"\x3CC\a\x66\x2\x2\x3CC\x3CD\x5N(\x2\x3CD\x3CE\aS\x2\x2\x3CE\x3CF\x5N("+
		"\f\x3CF\x3E9\x3\x2\x2\x2\x3D0\x3D1\f\v\x2\x2\x3D1\x3D2\t\n\x2\x2\x3D2"+
		"\x3E9\x5N(\v\x3D3\x3D4\f \x2\x2\x3D4\x3D5\aT\x2\x2\x3D5\x3E9\x5\x6\x4"+
		"\x2\x3D6\x3D7\f\x1E\x2\x2\x3D7\x3D8\aY\x2\x2\x3D8\x3E9\x5\x6\x4\x2\x3D9"+
		"\x3DA\f\x1D\x2\x2\x3DA\x3DB\a`\x2\x2\x3DB\x3DC\x5\x44#\x2\x3DC\x3DD\a"+
		"\x61\x2\x2\x3DD\x3E9\x3\x2\x2\x2\x3DE\x3DF\f\x1C\x2\x2\x3DF\x3E0\a^\x2"+
		"\x2\x3E0\x3E1\x5\x44#\x2\x3E1\x3E2\a_\x2\x2\x3E2\x3E9\x3\x2\x2\x2\x3E3"+
		"\x3E4\f\x1B\x2\x2\x3E4\x3E9\a\x66\x2\x2\x3E5\x3E6\f\xE\x2\x2\x3E6\x3E7"+
		"\t\v\x2\x2\x3E7\x3E9\x5*\x16\x2\x3E8\x3AC\x3\x2\x2\x2\x3E8\x3AF\x3\x2"+
		"\x2\x2\x3E8\x3B2\x3\x2\x2\x2\x3E8\x3B5\x3\x2\x2\x2\x3E8\x3B8\x3\x2\x2"+
		"\x2\x3E8\x3BB\x3\x2\x2\x2\x3E8\x3BE\x3\x2\x2\x2\x3E8\x3C1\x3\x2\x2\x2"+
		"\x3E8\x3C4\x3\x2\x2\x2\x3E8\x3C7\x3\x2\x2\x2\x3E8\x3CA\x3\x2\x2\x2\x3E8"+
		"\x3D0\x3\x2\x2\x2\x3E8\x3D3\x3\x2\x2\x2\x3E8\x3D6\x3\x2\x2\x2\x3E8\x3D9"+
		"\x3\x2\x2\x2\x3E8\x3DE\x3\x2\x2\x2\x3E8\x3E3\x3\x2\x2\x2\x3E8\x3E5\x3"+
		"\x2\x2\x2\x3E9\x3EC\x3\x2\x2\x2\x3EA\x3E8\x3\x2\x2\x2\x3EA\x3EB\x3\x2"+
		"\x2\x2\x3EBO\x3\x2\x2\x2\x3EC\x3EA\x3\x2\x2\x2\x8ASY\x64ktz\x82\x87\x8A"+
		"\x8F\x92\x97\x9E\xA6\xAE\xB2\xB9\xBE\xC2\xCA\xD0\xD5\xDB\xE0\xE4\xEC\xEF"+
		"\xF5\xF9\xFD\x104\x108\x112\x119\x11D\x120\x128\x137\x13D\x147\x152\x159"+
		"\x15F\x165\x167\x16B\x16F\x178\x17E\x186\x18D\x192\x19A\x1A4\x1AC\x1B3"+
		"\x1B8\x1BD\x1C1\x1C6\x1C9\x1CE\x1D6\x1DB\x1E4\x1E9\x1EE\x1F6\x1FC\x204"+
		"\x20C\x210\x217\x21C\x21F\x222\x227\x22F\x235\x23D\x242\x245\x248\x24E"+
		"\x256\x25C\x264\x269\x26C\x26F\x273\x27B\x281\x289\x28E\x291\x294\x29E"+
		"\x2A4\x2AC\x2B1\x2B4\x2B9\x2BC\x2C1\x2C8\x2CD\x2D5\x2DC\x2E1\x2E5\x2EC"+
		"\x2F0\x2F3\x2F6\x306\x30D\x311\x317\x31C\x32A\x334\x33C\x346\x354\x35D"+
		"\x363\x370\x375\x379\x37D\x394\x39D\x3AA\x3E8\x3EA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PreAdamant.Compiler.Parser
