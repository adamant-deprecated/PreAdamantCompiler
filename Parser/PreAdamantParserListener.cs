//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PreAdamantParser.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreAdamant.Compiler.Parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PreAdamantParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface IPreAdamantParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompilationUnit([NotNull] PreAdamantParser.CompilationUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompilationUnit([NotNull] PreAdamantParser.CompilationUnitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.usingDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingDirective([NotNull] PreAdamantParser.UsingDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.usingDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingDirective([NotNull] PreAdamantParser.UsingDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] PreAdamantParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] PreAdamantParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.namespaceName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespaceName([NotNull] PreAdamantParser.NamespaceNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.namespaceName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespaceName([NotNull] PreAdamantParser.NamespaceNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NamespaceDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespaceDeclaration([NotNull] PreAdamantParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NamespaceDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespaceDeclaration([NotNull] PreAdamantParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClassDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDeclaration([NotNull] PreAdamantParser.ClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClassDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDeclaration([NotNull] PreAdamantParser.ClassDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] PreAdamantParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] PreAdamantParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] PreAdamantParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] PreAdamantParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExternalDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExternalDeclaration([NotNull] PreAdamantParser.ExternalDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExternalDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExternalDeclaration([NotNull] PreAdamantParser.ExternalDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Precondition</c>
	/// labeled alternative in <see cref="PreAdamantParser.contract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrecondition([NotNull] PreAdamantParser.PreconditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Precondition</c>
	/// labeled alternative in <see cref="PreAdamantParser.contract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrecondition([NotNull] PreAdamantParser.PreconditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Postcondition</c>
	/// labeled alternative in <see cref="PreAdamantParser.contract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostcondition([NotNull] PreAdamantParser.PostconditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Postcondition</c>
	/// labeled alternative in <see cref="PreAdamantParser.contract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostcondition([NotNull] PreAdamantParser.PostconditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute([NotNull] PreAdamantParser.AttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute([NotNull] PreAdamantParser.AttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.baseTypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBaseTypes([NotNull] PreAdamantParser.BaseTypesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.baseTypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBaseTypes([NotNull] PreAdamantParser.BaseTypesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.accessModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessModifier([NotNull] PreAdamantParser.AccessModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.accessModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessModifier([NotNull] PreAdamantParser.AccessModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.safetyModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSafetyModifier([NotNull] PreAdamantParser.SafetyModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.safetyModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSafetyModifier([NotNull] PreAdamantParser.SafetyModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.classInheritanceModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassInheritanceModifier([NotNull] PreAdamantParser.ClassInheritanceModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.classInheritanceModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassInheritanceModifier([NotNull] PreAdamantParser.ClassInheritanceModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.methodInheritanceModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodInheritanceModifier([NotNull] PreAdamantParser.MethodInheritanceModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.methodInheritanceModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodInheritanceModifier([NotNull] PreAdamantParser.MethodInheritanceModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.conversionModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConversionModifier([NotNull] PreAdamantParser.ConversionModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.conversionModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConversionModifier([NotNull] PreAdamantParser.ConversionModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.asyncModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAsyncModifier([NotNull] PreAdamantParser.AsyncModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.asyncModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAsyncModifier([NotNull] PreAdamantParser.AsyncModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.typeParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameters([NotNull] PreAdamantParser.TypeParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.typeParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameters([NotNull] PreAdamantParser.TypeParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.typeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameter([NotNull] PreAdamantParser.TypeParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.typeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameter([NotNull] PreAdamantParser.TypeParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.typeArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeArguments([NotNull] PreAdamantParser.TypeArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.typeArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeArguments([NotNull] PreAdamantParser.TypeArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.identifierOrPredefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierOrPredefinedType([NotNull] PreAdamantParser.IdentifierOrPredefinedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.identifierOrPredefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierOrPredefinedType([NotNull] PreAdamantParser.IdentifierOrPredefinedTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierName</c>
	/// labeled alternative in <see cref="PreAdamantParser.simpleName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierName([NotNull] PreAdamantParser.IdentifierNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierName</c>
	/// labeled alternative in <see cref="PreAdamantParser.simpleName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierName([NotNull] PreAdamantParser.IdentifierNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GenericName</c>
	/// labeled alternative in <see cref="PreAdamantParser.simpleName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericName([NotNull] PreAdamantParser.GenericNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GenericName</c>
	/// labeled alternative in <see cref="PreAdamantParser.simpleName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericName([NotNull] PreAdamantParser.GenericNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnqualifiedName</c>
	/// labeled alternative in <see cref="PreAdamantParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnqualifiedName([NotNull] PreAdamantParser.UnqualifiedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnqualifiedName</c>
	/// labeled alternative in <see cref="PreAdamantParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnqualifiedName([NotNull] PreAdamantParser.UnqualifiedNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>QualifiedName</c>
	/// labeled alternative in <see cref="PreAdamantParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedName([NotNull] PreAdamantParser.QualifiedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>QualifiedName</c>
	/// labeled alternative in <see cref="PreAdamantParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedName([NotNull] PreAdamantParser.QualifiedNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NamedType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedType([NotNull] PreAdamantParser.NamedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NamedType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedType([NotNull] PreAdamantParser.NamedTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] PreAdamantParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] PreAdamantParser.FunctionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TupleType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleType([NotNull] PreAdamantParser.TupleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TupleType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleType([NotNull] PreAdamantParser.TupleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MaybeType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaybeType([NotNull] PreAdamantParser.MaybeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MaybeType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaybeType([NotNull] PreAdamantParser.MaybeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PointerType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPointerType([NotNull] PreAdamantParser.PointerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PointerType</c>
	/// labeled alternative in <see cref="PreAdamantParser.valueType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPointerType([NotNull] PreAdamantParser.PointerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImmutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImmutableReferenceType([NotNull] PreAdamantParser.ImmutableReferenceTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImmutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImmutableReferenceType([NotNull] PreAdamantParser.ImmutableReferenceTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMutableReferenceType([NotNull] PreAdamantParser.MutableReferenceTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMutableReferenceType([NotNull] PreAdamantParser.MutableReferenceTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OwnedImmutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOwnedImmutableReferenceType([NotNull] PreAdamantParser.OwnedImmutableReferenceTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OwnedImmutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOwnedImmutableReferenceType([NotNull] PreAdamantParser.OwnedImmutableReferenceTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OwnedMutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOwnedMutableReferenceType([NotNull] PreAdamantParser.OwnedMutableReferenceTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OwnedMutableReferenceType</c>
	/// labeled alternative in <see cref="PreAdamantParser.referenceType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOwnedMutableReferenceType([NotNull] PreAdamantParser.OwnedMutableReferenceTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.returnType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnType([NotNull] PreAdamantParser.ReturnTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.returnType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnType([NotNull] PreAdamantParser.ReturnTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.lifetime"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLifetime([NotNull] PreAdamantParser.LifetimeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.lifetime"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLifetime([NotNull] PreAdamantParser.LifetimeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.funcTypeParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncTypeParameterList([NotNull] PreAdamantParser.FuncTypeParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.funcTypeParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncTypeParameterList([NotNull] PreAdamantParser.FuncTypeParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.funcTypeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncTypeParameter([NotNull] PreAdamantParser.FuncTypeParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.funcTypeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncTypeParameter([NotNull] PreAdamantParser.FuncTypeParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.constExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstExpression([NotNull] PreAdamantParser.ConstExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.constExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstExpression([NotNull] PreAdamantParser.ConstExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.typeParameterConstraintClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameterConstraintClause([NotNull] PreAdamantParser.TypeParameterConstraintClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.typeParameterConstraintClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameterConstraintClause([NotNull] PreAdamantParser.TypeParameterConstraintClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstructorConstraint</c>
	/// labeled alternative in <see cref="PreAdamantParser.typeParameterConstraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorConstraint([NotNull] PreAdamantParser.ConstructorConstraintContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstructorConstraint</c>
	/// labeled alternative in <see cref="PreAdamantParser.typeParameterConstraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorConstraint([NotNull] PreAdamantParser.ConstructorConstraintContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeConstraint</c>
	/// labeled alternative in <see cref="PreAdamantParser.typeParameterConstraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeConstraint([NotNull] PreAdamantParser.TypeConstraintContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeConstraint</c>
	/// labeled alternative in <see cref="PreAdamantParser.typeParameterConstraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeConstraint([NotNull] PreAdamantParser.TypeConstraintContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeListParameterConstraint</c>
	/// labeled alternative in <see cref="PreAdamantParser.typeParameterConstraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeListParameterConstraint([NotNull] PreAdamantParser.TypeListParameterConstraintContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeListParameterConstraint</c>
	/// labeled alternative in <see cref="PreAdamantParser.typeParameterConstraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeListParameterConstraint([NotNull] PreAdamantParser.TypeListParameterConstraintContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Constructor</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructor([NotNull] PreAdamantParser.ConstructorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Constructor</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructor([NotNull] PreAdamantParser.ConstructorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Destructor</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDestructor([NotNull] PreAdamantParser.DestructorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Destructor</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDestructor([NotNull] PreAdamantParser.DestructorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConversionMethod</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConversionMethod([NotNull] PreAdamantParser.ConversionMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConversionMethod</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConversionMethod([NotNull] PreAdamantParser.ConversionMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Field</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterField([NotNull] PreAdamantParser.FieldContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Field</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitField([NotNull] PreAdamantParser.FieldContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Accessor</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessor([NotNull] PreAdamantParser.AccessorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Accessor</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessor([NotNull] PreAdamantParser.AccessorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Indexer</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexer([NotNull] PreAdamantParser.IndexerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Indexer</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexer([NotNull] PreAdamantParser.IndexerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Method</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod([NotNull] PreAdamantParser.MethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Method</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod([NotNull] PreAdamantParser.MethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OperatorOverload</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorOverload([NotNull] PreAdamantParser.OperatorOverloadContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OperatorOverload</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorOverload([NotNull] PreAdamantParser.OperatorOverloadContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedClassDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedClassDeclaration([NotNull] PreAdamantParser.NestedClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedClassDeclaration</c>
	/// labeled alternative in <see cref="PreAdamantParser.member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedClassDeclaration([NotNull] PreAdamantParser.NestedClassDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] PreAdamantParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] PreAdamantParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>namedParameter</c>
	/// labeled alternative in <see cref="PreAdamantParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamedParameter([NotNull] PreAdamantParser.NamedParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>namedParameter</c>
	/// labeled alternative in <see cref="PreAdamantParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamedParameter([NotNull] PreAdamantParser.NamedParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>selfParameter</c>
	/// labeled alternative in <see cref="PreAdamantParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelfParameter([NotNull] PreAdamantParser.SelfParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>selfParameter</c>
	/// labeled alternative in <see cref="PreAdamantParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelfParameter([NotNull] PreAdamantParser.SelfParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.parameterModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterModifier([NotNull] PreAdamantParser.ParameterModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.parameterModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterModifier([NotNull] PreAdamantParser.ParameterModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.constructorInitializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorInitializer([NotNull] PreAdamantParser.ConstructorInitializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.constructorInitializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorInitializer([NotNull] PreAdamantParser.ConstructorInitializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] PreAdamantParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] PreAdamantParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockMethodBody</c>
	/// labeled alternative in <see cref="PreAdamantParser.methodBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockMethodBody([NotNull] PreAdamantParser.BlockMethodBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockMethodBody</c>
	/// labeled alternative in <see cref="PreAdamantParser.methodBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockMethodBody([NotNull] PreAdamantParser.BlockMethodBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NoMethodBody</c>
	/// labeled alternative in <see cref="PreAdamantParser.methodBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNoMethodBody([NotNull] PreAdamantParser.NoMethodBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NoMethodBody</c>
	/// labeled alternative in <see cref="PreAdamantParser.methodBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNoMethodBody([NotNull] PreAdamantParser.NoMethodBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.overloadableOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOverloadableOperator([NotNull] PreAdamantParser.OverloadableOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.overloadableOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOverloadableOperator([NotNull] PreAdamantParser.OverloadableOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableDeclarationStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationStatement([NotNull] PreAdamantParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableDeclarationStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationStatement([NotNull] PreAdamantParser.VariableDeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnsafeBlockStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsafeBlockStatement([NotNull] PreAdamantParser.UnsafeBlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnsafeBlockStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsafeBlockStatement([NotNull] PreAdamantParser.UnsafeBlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] PreAdamantParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] PreAdamantParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] PreAdamantParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] PreAdamantParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] PreAdamantParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] PreAdamantParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] PreAdamantParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] PreAdamantParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThrowStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] PreAdamantParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThrowStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] PreAdamantParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] PreAdamantParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] PreAdamantParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LetIfStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetIfStatement([NotNull] PreAdamantParser.LetIfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LetIfStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetIfStatement([NotNull] PreAdamantParser.LetIfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] PreAdamantParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] PreAdamantParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] PreAdamantParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] PreAdamantParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeleteStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeleteStatement([NotNull] PreAdamantParser.DeleteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeleteStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeleteStatement([NotNull] PreAdamantParser.DeleteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContinueStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] PreAdamantParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContinueStatement</c>
	/// labeled alternative in <see cref="PreAdamantParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] PreAdamantParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PreAdamantParser.localVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalVariableDeclaration([NotNull] PreAdamantParser.LocalVariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PreAdamantParser.localVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalVariableDeclaration([NotNull] PreAdamantParser.LocalVariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullCheckExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullCheckExpression([NotNull] PreAdamantParser.NullCheckExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullCheckExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullCheckExpression([NotNull] PreAdamantParser.NullCheckExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteralExpression([NotNull] PreAdamantParser.StringLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteralExpression([NotNull] PreAdamantParser.StringLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>XorExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterXorExpression([NotNull] PreAdamantParser.XorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>XorExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitXorExpression([NotNull] PreAdamantParser.XorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NameExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameExpression([NotNull] PreAdamantParser.NameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NameExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameExpression([NotNull] PreAdamantParser.NameExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] PreAdamantParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] PreAdamantParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] PreAdamantParser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] PreAdamantParser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] PreAdamantParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] PreAdamantParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntLiteralExpression([NotNull] PreAdamantParser.IntLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntLiteralExpression([NotNull] PreAdamantParser.IntLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewObjectExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewObjectExpression([NotNull] PreAdamantParser.NewObjectExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewObjectExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewObjectExpression([NotNull] PreAdamantParser.NewObjectExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] PreAdamantParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] PreAdamantParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] PreAdamantParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] PreAdamantParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SelfExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelfExpression([NotNull] PreAdamantParser.SelfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SelfExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelfExpression([NotNull] PreAdamantParser.SelfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteralExpression([NotNull] PreAdamantParser.BooleanLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteralExpression([NotNull] PreAdamantParser.BooleanLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] PreAdamantParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] PreAdamantParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] PreAdamantParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] PreAdamantParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallExpression([NotNull] PreAdamantParser.CallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallExpression([NotNull] PreAdamantParser.CallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteralExpression([NotNull] PreAdamantParser.NullLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteralExpression([NotNull] PreAdamantParser.NullLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] PreAdamantParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] PreAdamantParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] PreAdamantParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] PreAdamantParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfExpression([NotNull] PreAdamantParser.IfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfExpression([NotNull] PreAdamantParser.IfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpression([NotNull] PreAdamantParser.NewExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpression([NotNull] PreAdamantParser.NewExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UninitializedExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUninitializedExpression([NotNull] PreAdamantParser.UninitializedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UninitializedExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUninitializedExpression([NotNull] PreAdamantParser.UninitializedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TryExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryExpression([NotNull] PreAdamantParser.TryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TryExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryExpression([NotNull] PreAdamantParser.TryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MagnitudeExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMagnitudeExpression([NotNull] PreAdamantParser.MagnitudeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MagnitudeExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMagnitudeExpression([NotNull] PreAdamantParser.MagnitudeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberExpression([NotNull] PreAdamantParser.MemberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberExpression([NotNull] PreAdamantParser.MemberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ComparativeExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparativeExpression([NotNull] PreAdamantParser.ComparativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ComparativeExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparativeExpression([NotNull] PreAdamantParser.ComparativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] PreAdamantParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] PreAdamantParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharLiteralExpression([NotNull] PreAdamantParser.CharLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharLiteralExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharLiteralExpression([NotNull] PreAdamantParser.CharLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DotDotExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDotDotExpression([NotNull] PreAdamantParser.DotDotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DotDotExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDotDotExpression([NotNull] PreAdamantParser.DotDotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LambdaExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaExpression([NotNull] PreAdamantParser.LambdaExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LambdaExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaExpression([NotNull] PreAdamantParser.LambdaExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CoalesceExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCoalesceExpression([NotNull] PreAdamantParser.CoalesceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CoalesceExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCoalesceExpression([NotNull] PreAdamantParser.CoalesceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayAccessExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccessExpression([NotNull] PreAdamantParser.ArrayAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayAccessExpression</c>
	/// labeled alternative in <see cref="PreAdamantParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccessExpression([NotNull] PreAdamantParser.ArrayAccessExpressionContext context);
}
} // namespace PreAdamant.Compiler.Parser
